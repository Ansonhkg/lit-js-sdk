{"version":3,"file":"index.modern.js","sources":["../node_modules/regenerator-runtime/runtime.js","../src/utils/crypto.js","../src/lib/constants.js","../src/utils/eth.js","../src/utils/frameComms.js","../src/utils/browser.js","../src/utils/lit.js","../src/lib/utils.js","../src/lib/bls-sdk.js","../src/utils/litNodeClient.js","../src/index.js","../src/utils/init.js"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","\nimport nacl from 'tweetnacl'\nimport naclUtil from 'tweetnacl-util'\n\nconst SYMM_KEY_ALGO_PARAMS = {\n  name: 'AES-CBC',\n  length: 256\n}\n\nexport function compareArrayBuffers (buf1, buf2) {\n  if (buf1.byteLength !== buf2.byteLength) return false\n  const dv1 = new Uint8Array(buf1)\n  const dv2 = new Uint8Array(buf2)\n  for (let i = 0; i !== buf1.byteLength; i++) {\n    if (dv1[i] !== dv2[i]) return false\n  }\n  return true\n}\n\nexport async function importSymmetricKey (jwkSymmKey) {\n  const importedSymmKey = await crypto.subtle.importKey(\n    'jwk',\n    JSON.parse(jwkSymmKey),\n    SYMM_KEY_ALGO_PARAMS,\n    true,\n    ['encrypt', 'decrypt']\n  )\n  return importedSymmKey\n}\nexport async function generateSymmetricKey () {\n  const symmKey = await crypto.subtle.generateKey(\n    SYMM_KEY_ALGO_PARAMS,\n    true,\n    ['encrypt', 'decrypt']\n  )\n  return symmKey\n}\n\n/**\n * Decrypt an encrypted blob with a symmetric key.  Uses AES-CBC via SubtleCrypto\n * @param {Blob} encryptedBlob The encrypted blob that should be decrypted\n * @param {Object} symmKey The symmetric key\n * @returns {Blob} The decrypted blob\n */\nexport async function decryptWithSymmetricKey (\n  encryptedBlob,\n  symmKey\n) {\n  const recoveredIv = await encryptedBlob.slice(0, 16).arrayBuffer()\n  const encryptedZipArrayBuffer = await encryptedBlob.slice(16).arrayBuffer()\n  const decryptedZip = await crypto.subtle.decrypt(\n    {\n      name: 'AES-CBC',\n      iv: recoveredIv\n    },\n    symmKey,\n    encryptedZipArrayBuffer\n  )\n  return decryptedZip\n}\n\n// used this as an example\n// https://github.com/infotechinc/symmetric-encryption-in-browser/blob/master/crypto.js\n/**\n * Encrypt a blob with a symmetric key\n * @param {Object} symmKey The symmetric key\n * @param {Blob} data The blob to encrypt\n * @returns {Blob} The encrypted blob\n */\nexport async function encryptWithSymmetricKey (\n  symmKey,\n  data\n) {\n  // encrypt the zip with symmetric key\n  const iv = window.crypto.getRandomValues(new Uint8Array(16))\n\n  const encryptedZipData = await crypto.subtle.encrypt(\n    {\n      name: 'AES-CBC',\n      iv\n    },\n    symmKey,\n    data\n  )\n  const encryptedZipBlob = new Blob([iv, new Uint8Array(encryptedZipData)], { type: 'application/octet-stream' })\n  return encryptedZipBlob\n}\n\n// borrowed from eth-sig-util from meatmask.\n/**\n * Encrypt a blob with the public key of a receiver\n * @param {string} receiverPublicKey The base64 encoded 32 byte public key.  The corresponding private key will be able to decrypt this blob\n * @param {Blob} data The blob to encrypt\n * @param {string} version The encryption algorithm to use.  This should be set to \"x25519-xsalsa20-poly1305\" as no other algorithms are implemented right now.\n * @returns {Blob} The encrypted blob\n */\nexport function encryptWithPubKey (\n  receiverPublicKey,\n  data,\n  version\n) {\n  switch (version) {\n    case 'x25519-xsalsa20-poly1305': {\n      // generate ephemeral keypair\n      const ephemeralKeyPair = nacl.box.keyPair()\n\n      // assemble encryption parameters - from string to UInt8\n      let pubKeyUInt8Array\n      try {\n        pubKeyUInt8Array = naclUtil.decodeBase64(receiverPublicKey)\n      } catch (err) {\n        throw new Error('Bad public key')\n      }\n\n      // padding?  not needed for c decryption?\n      // const paddingBytes = new Uint8Array(32)\n      // paddingBytes.fill(0)\n      // const msgParamsUInt8Array = new Uint8Array([...paddingBytes, ...naclUtil.decodeUTF8(data)])\n      const msgParamsUInt8Array = naclUtil.decodeUTF8(data)\n      const nonce = nacl.randomBytes(nacl.box.nonceLength)\n\n      // encrypt\n      const encryptedMessage = nacl.box(\n        msgParamsUInt8Array,\n        nonce,\n        pubKeyUInt8Array,\n        ephemeralKeyPair.secretKey\n      )\n\n      // handle encrypted data\n      const output = {\n        version: 'x25519-xsalsa20-poly1305',\n        nonce: naclUtil.encodeBase64(nonce),\n        ephemPublicKey: naclUtil.encodeBase64(ephemeralKeyPair.publicKey),\n        ciphertext: naclUtil.encodeBase64(encryptedMessage)\n      }\n      // return encrypted msg data\n      return output\n    }\n\n    default:\n      throw new Error('Encryption type/version not supported')\n  }\n}\n\n// borrowed from eth-sig-util from meatmask.\n/**\n * Decrypt a blob with a private key\n * @param {Blob} encryptedData The blob to decrypt\n * @param {string} receiverPrivateKey The base64 encoded 32 byte private key.  The corresponding public key was used to encrypt this blob\n * @param {string} version The encryption algorithm to use.  This should be set to \"x25519-xsalsa20-poly1305\" as no other algorithms are implemented right now.\n * @returns {Blob} The decrypted blob\n */\nexport function decryptWithPrivKey (\n  encryptedData,\n  receiverPrivateKey\n) {\n  switch (encryptedData.version) {\n    case 'x25519-xsalsa20-poly1305': {\n      const recieverEncryptionPrivateKey = naclUtil.decodeBase64(receiverPrivateKey)\n\n      // assemble decryption parameters\n      const nonce = naclUtil.decodeBase64(encryptedData.nonce)\n      const ciphertext = naclUtil.decodeBase64(encryptedData.ciphertext)\n      const ephemPublicKey = naclUtil.decodeBase64(\n        encryptedData.ephemPublicKey\n      )\n\n      // decrypt\n      const decryptedMessage = nacl.box.open(\n        ciphertext,\n        nonce,\n        ephemPublicKey,\n        recieverEncryptionPrivateKey\n      )\n\n      // return decrypted msg data\n      let output\n      try {\n        output = naclUtil.encodeUTF8(decryptedMessage)\n      } catch (err) {\n        throw new Error('Decryption failed.  Could not encode result as utf8')\n      }\n\n      if (output) {\n        return output\n      }\n      throw new Error('Decryption failed.  Output is falsy')\n    }\n\n    default:\n      throw new Error('Encryption type/version not supported.')\n  }\n}\n","import protons from 'protons'\n\nexport const protobufs = protons(`\nmessage Request {\n  enum Type {\n    HANDSHAKE = 0;\n    GET_KEY_FRAGMENT = 1;\n    STORE_KEY_FRAGMENT = 2;\n  }\n  required Type type = 1;\n  optional GetKeyFragment getKeyFragment = 2;\n  optional StoreKeyFragment storeKeyFragment = 3;\n  optional bytes authSig = 4;\n  optional TokenParams tokenParams = 5;\n  optional bytes clientPubKey = 6;\n  optional bytes merkleProof = 7;\n}\nmessage Response {\n  enum Type {\n    HANDSHAKE_RESPONSE = 0;\n    GET_KEY_FRAGMENT_RESPONSE = 1;\n    STORE_KEY_FRAGMENT_RESPONSE = 2;\n  }\n  required Type type = 1;\n  optional GetKeyFragmentResponse getKeyFragmentResponse = 2;\n  optional StoreKeyFragmentResponse storeKeyFragmentResponse = 3;\n  optional bytes serverPubKey = 4;\n}\nmessage GetKeyFragment {\n  required bytes keyId = 1;\n}\nmessage GetKeyFragmentResponse {\n  enum Result {\n    SUCCESS = 0;\n    NOT_FOUND = 1;\n    AUTH_FAILURE = 2;\n    ERROR = 3;\n  }\n  required Result result = 1;\n  optional bytes keyId = 2;\n  optional bytes fragmentValue = 3;\n}\nmessage StoreKeyFragment {\n  required bytes fragmentValue = 1;\n  required bytes fragmentNumber = 2;\n}\nmessage StoreKeyFragmentResponse {\n  enum Result {\n    SUCCESS = 0;\n    AUTH_FAILURE = 1;\n    ERROR = 2;\n  }\n  required Result result = 1;\n  optional bytes errorMessage = 2;\n}\nmessage TokenParams {\n  required bytes tokenAddress = 1;\n  required bytes tokenId = 2;\n  required bytes chain = 3;\n}\n`)\n\n/**\n * @typedef {Object} LITChain\n * @property {string} contractAddress - The address of the token contract\n * @property {string} chainId - The chain ID of the chain that this token contract is deployed on.  Used for EVM chains.\n * @property {string} name - The human readable name of the chain\n */\n\n/**\n * Pre-deployed token contracts that you may use for minting LITs.  These are ERC1155 contracts that let you mint any quantity of a given token.  Use the chain name as a key in this object.  Currently \"polygon\" and \"ethereum\" are supported.\n * @constant\n * @type {LITChain}\n * @default\n*/\nexport const LIT_CHAINS = {\n  polygon: {\n    contractAddress: '0xb9A323711528D0c5a70df790929f4739f1cDd7fD',\n    chainId: 137,\n    name: 'Polygon',\n    symbol: 'MATIC',\n    decimals: 18,\n    rpcUrls: ['https://floral-rough-flower.matic.quiknode.pro/a17b25f97cc396bb2b6aaf85a005f579bf93dc73/'],\n    blockExplorerUrls: ['https://explorer.matic.network'],\n    balanceStorageSlot: 1,\n    type: 'ERC1155',\n    websocketUrl: 'wss://floral-rough-flower.matic.quiknode.pro/a17b25f97cc396bb2b6aaf85a005f579bf93dc73/'\n  },\n  // fantom: { // the block hashes on fantom are funky and prevent it from producing the proper merkle proof\n  //   contractAddress: '0x3110c39b428221012934A7F617913b095BC1078C',\n  //   chainId: 250,\n  //   name: 'Fantom',\n  //   symbol: 'FTM',\n  //   decimals: 18,\n  //   rpcUrls: ['https://rpcapi.fantom.network'],\n  //   blockExplorerUrls: ['https://ftmscan.com'],\n  //   balanceStorageSlot: 1,\n  //   type: 'ERC1155',\n  //   websocketUrl: 'wss://wsapi.fantom.network'\n  // },\n  ethereum: {\n    contractAddress: '0x55485885e82E25446DEC314Ccb810Bda06B9e01B',\n    chainId: 1,\n    name: 'Ethereum',\n    symbol: 'ETH',\n    decimals: 18,\n    balanceStorageSlot: 1,\n    type: 'ERC1155',\n    websocketUrl: 'wss://mainnet.infura.io/ws/v3/ddf1ca3700f34497bca2bf03607fde38'\n  },\n  kovan: {\n    contractAddress: '0xA9b2180C2A479Ba9b263878C4d81AE4e0E717846',\n    chainId: 42,\n    name: 'Ethereum',\n    symbol: 'ETH',\n    decimals: 18,\n    rpcUrls: ['https://kovan.infura.io/v3/ddf1ca3700f34497bca2bf03607fde38'],\n    blockExplorerUrls: ['https://kovan.etherscan.io'],\n    balanceStorageSlot: 1,\n    type: 'ERC20'\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { verifyMessage } from '@ethersproject/wallet'\nimport { Web3Provider } from '@ethersproject/providers'\n\nimport detectEthereumProvider from '@metamask/detect-provider'\n\nimport naclUtil from 'tweetnacl-util'\nimport nacl from 'tweetnacl'\n\nimport { Header, Proof, Receipt, Transaction } from 'eth-object'\nimport { mappingAt } from 'eth-util-lite'\n\nimport LIT from '../abis/LIT.json'\nimport { LIT_CHAINS } from '../lib/constants'\n\nconst AUTH_SIGNATURE_BODY = 'I am creating an account to use LITs at {{timestamp}}'\n\nfunction chainHexIdToChainName (chainHexId) {\n  for (let i = 0; i < Object.keys(LIT_CHAINS).length; i++) {\n    const chainName = Object.keys(LIT_CHAINS)[i]\n    const litChainHexId = '0x' + LIT_CHAINS[chainName].chainId.toString('16')\n    if (litChainHexId === chainHexId) {\n      return chainName\n    }\n  }\n}\n\nexport async function connectWeb3 () {\n  if (typeof window.ethereum === 'undefined') {\n    throw new Error({ errorCode: 'no_wallet', message: 'No web3 wallet was found' })\n  }\n\n  const provider = await detectEthereumProvider()\n\n  // trigger metamask popup\n  const accounts = await provider.request({ method: 'eth_requestAccounts' })\n  const account = accounts[0].toLowerCase()\n\n  return { web3: provider, account }\n}\n\n// taken from the excellent repo https://github.com/zmitton/eth-proof\nexport async function getMerkleProof ({ tokenAddress, balanceStorageSlot, tokenId }) {\n  console.log(`getMerkleProof for { tokenAddress, balanceStorageSlot, tokenId } ${tokenAddress}, ${balanceStorageSlot}, ${tokenId}`)\n  const { web3, account } = await connectWeb3()\n  console.log(`getting mappingAt(${balanceStorageSlot}, ${tokenId}, ${account})`)\n  const storageAddress = mappingAt(balanceStorageSlot, parseInt(tokenId), account)\n  console.log('storageAddress: ', storageAddress)\n\n  // you may need to try the below twicce because sometimes the proof isn't available for the latest block on polygon because the node just isn't fast enough\n  let tries = 0\n  let rpcProof = null\n  let rpcBlock = null\n  while (!rpcProof && tries < 6) {\n    try {\n      if (!rpcBlock) {\n        // only set the rpc block once\n        rpcBlock = await web3.request({ method: 'eth_getBlockByNumber', params: ['latest', false] })\n        console.log('rpcBlock: ', rpcBlock)\n      }\n      rpcProof = await web3.request({ method: 'eth_getProof', params: [tokenAddress, [storageAddress], rpcBlock.number] })\n      console.log('rpcProof: ', rpcProof)\n    } catch (e) {\n      console.log(e)\n      console.log(`error getting rpc proof, have made ${tries} attempts`)\n      tries++\n    }\n  }\n\n  return {\n    header: rpcBlock,\n    accountProof: rpcProof.accountProof,\n    storageProof: rpcProof.storageProof[0].proof,\n    blockHash: rpcBlock.hash\n  }\n}\n\n// export async function checkAndDeriveKeypair () {\n//   let keypair = localStorage.getItem('lit-keypair')\n//   if (!keypair) {\n//     await deriveEncryptionKeys()\n//     keypair = localStorage.getItem('lit-keypair')\n//   }\n//   keypair = JSON.parse(keypair)\n//   const { web3, account } = await connectWeb3()\n//   // make sure we are on the right account\n//   if (account !== keypair.address) {\n//     await deriveEncryptionKeys()\n//     keypair = localStorage.getItem('lit-keypair')\n//     keypair = JSON.parse(keypair)\n//   }\n//   return keypair\n// }\n\n/**\n * Check for an existing cryptographic authentication signature and create one of it does not exist.  This is used to prove ownership of a given crypto wallet address to the LIT nodes.  The result is stored in LocalStorage so the user doesn't have to sign every time they perform an operation.\n * @param {Object} params\n * @param {string} params.chain The chain you want to use.  \"polygon\" and \"ethereum\" are currently supported.\n * @returns {AuthSig} The AuthSig created or retrieved\n */\nexport async function checkAndSignAuthMessage ({ chain }) {\n  const { web3, account } = await connectWeb3()\n  const chainId = await web3.request({ method: 'eth_chainId', params: [] })\n  const selectedChain = LIT_CHAINS[chain]\n  const selectedChainId = '0x' + selectedChain.chainId.toString('16')\n  console.debug(`checkAndSignAuthMessage with chainId ${chainId} and chain set to ${chain} and selectedChain is `, selectedChain)\n  if (chainId !== selectedChainId) {\n    // the metamask chain switching thing does not work on mainnet\n    if (selectedChain.chainId !== 1) {\n      const data = [{\n        chainId: selectedChainId,\n        chainName: selectedChain.name,\n        nativeCurrency:\n                {\n                  name: selectedChain.name,\n                  symbol: selectedChain.symbol,\n                  decimals: selectedChain.decimals\n                },\n        rpcUrls: selectedChain.rpcUrls,\n        blockExplorerUrls: selectedChain.blockExplorerUrls\n      }]\n      const res = await web3.request({ method: 'wallet_addEthereumChain', params: data }).catch()\n      if (res) {\n        console.log(res)\n      }\n    } else {\n      return { errorCode: 'wrong_chain' }\n    }\n  }\n  let authSig = localStorage.getItem('lit-auth-signature')\n  if (!authSig) {\n    await signAndSaveAuthMessage()\n    authSig = localStorage.getItem('lit-auth-signature')\n  }\n  authSig = JSON.parse(authSig)\n  // make sure we are on the right account\n  if (account !== authSig.address) {\n    await signAndSaveAuthMessage()\n    authSig = localStorage.getItem('lit-auth-signature')\n    authSig = JSON.parse(authSig)\n  }\n  return authSig\n}\n\nexport async function signAndSaveAuthMessage () {\n  const now = (new Date()).toISOString()\n  const body = AUTH_SIGNATURE_BODY.replace('{{timestamp}}', now)\n  const signedResult = await signMessage({ body })\n  localStorage.setItem('lit-auth-signature', JSON.stringify({\n    sig: signedResult.signature,\n    derivedVia: 'web3.eth.personal.sign',\n    signedMessage: body,\n    address: signedResult.address\n  }))\n  // store a keypair in localstorage for communication with sgx\n  const commsKeyPair = nacl.box.keyPair()\n  localStorage.setItem('lit-comms-keypair', JSON.stringify({\n    publicKey: naclUtil.encodeBase64(commsKeyPair.publicKey),\n    secretKey: naclUtil.encodeBase64(commsKeyPair.secretKey)\n  }))\n  console.log('generated and saved lit-comms-keypair')\n}\n\n/**\n * @typedef {Object} AuthSig\n * @property {string} sig - The actual hex-encoded signature\n * @property {string} derivedVia - The method used to derive the signature\n * @property {string} signedMessage - The message that was signed\n * @property {string} address - The crypto wallet address that signed the message\n */\nexport async function signMessage ({ body }) {\n  const { web3, account } = await connectWeb3()\n\n  console.log('signing with ', account)\n  const signature = await web3.request({ method: 'personal_sign', params: [account, body] })\n  const address = verifyMessage(body, signature).toLowerCase()\n\n  console.log('Signature: ', signature)\n  console.log('recovered address: ', address)\n\n  if (address !== account) {\n    const msg = `ruh roh, the user signed with a different address (${address}) then they\\'re using with web3 (${account}).  this will lead to confusion.`\n    console.error(msg)\n    alert('something seems to be wrong with your wallets message signing.  maybe restart your browser or your wallet.  your recovered sig address does not match your web3 account address')\n    throw new Error(msg)\n  }\n\n  return { signature, address }\n}\n\n// export async function decryptWithWeb3PrivateKey (encryptedData) {\n//   const { web3, account } = await connectWeb3()\n//   try {\n//     const decryptedMessage = ethereum\n//       .request({\n//         method: 'eth_decrypt',\n//         params: [encryptedData, account]\n//       })\n//     return decryptedMessage\n//   } catch (error) {\n//     console.log(error)\n//     return false\n//   }\n// }\n//\n// async function deriveKeysViaSignature () {\n//   const { signature, address } = await signMessage({ body: KEY_DERIVATION_SIGNATURE_BODY })\n//   console.log('Signed message: ' + signature)\n//\n//   // derive keypair\n//   const data = Buffer.from(signature.substring(2), 'hex')\n//   const hash = await crypto.subtle.digest('SHA-256', data)\n//   const uint8Hash = new Uint8Array(hash)\n//   const { publicKey, secretKey } = nacl.box.keyPair.fromSecretKey(uint8Hash)\n//   return {\n//     publicKey: naclUtil.encodeBase64(publicKey),\n//     secretKey: naclUtil.encodeBase64(secretKey)\n//   }\n// }\n//\n// // this only works on metamask :(\n// async function deriveKeysViaPrivateKey () {\n//   try {\n//     const { web3, account } = await connectWeb3()\n//     /* global ethereum */\n//     /* eslint no-undef: \"error\" */\n//     const publicKey = await ethereum\n//       .request({\n//         method: 'eth_getEncryptionPublicKey',\n//         params: [account] // you must have access to the specified account\n//       })\n//     return { publicKey }\n//   } catch (error) {\n//     console.log(error)\n//     if (error.code === 4001) {\n//       // EIP-1193 userRejectedRequest error\n//       console.log(\"We can't encrypt anything without the key.\")\n//       error('You must accept the metamask request to derive your public encryption key')\n//     } else {\n//       console.error(error)\n//     }\n//     return { error }\n//   }\n// }\n//\n// export async function deriveEncryptionKeys () {\n//   let keypair = {}\n//   // key derivation via metamask is more desirable because then even this SDK can't see the secret key :-D\n//   const { error, publicKey } = await deriveKeysViaPrivateKey()\n//   if (!error) {\n//     keypair = {\n//       publicKey,\n//       derivedVia: 'eth_getEncryptionPublicKey'\n//     }\n//   } else {\n//     const { publicKey, secretKey } = await deriveKeysViaSignature()\n//     keypair = {\n//       publicKey,\n//       secretKey,\n//       derivedVia: 'web3.eth.personal.sign',\n//       signedMessage: KEY_DERIVATION_SIGNATURE_BODY\n//     }\n//   }\n//\n//   const { web3, account } = await connectWeb3()\n//   keypair.address = account\n//\n//   console.log('public key: ' + keypair.publicKey)\n//   const asString = JSON.stringify(keypair)\n//   localStorage.setItem('lit-keypair', asString)\n//\n//   // is it already saved on the server?\n//   const { pubkey, errorCode } = await getPublicKey({\n//     address: account\n//   })\n//   if (errorCode === 'not_found' || pubkey !== keypair.publicKey) {\n//     // add it\n//     const msg = `I am saving my public key so that others can send me LITs.  It is ${pubkey}`\n//     const res = await signMessage({ body: msg })\n//     await savePublicKey({\n//       sig: res.signature,\n//       msg,\n//       pubkey: keypair.publicKey\n//     })\n//   }\n// }\n\n/**\n * This function mints a LIT using our pre-deployed token contracts.  You may our contracts, or you may supply your own.  Our contracts are ERC1155 tokens on Polygon and Ethereum.  Using these contracts is the easiest way to get started.\n * @param {Object} params\n * @param {string} params.chain The chain to mint on.  \"ethereum\" and \"polygon\" are currently supported.\n * @param {number} params.quantity The number of tokens to mint.  Note that these will be fungible, so they will not have serial numbers.\n * @returns {Object} The txHash, tokenId, tokenAddress, mintingAddress, and authSig.\n */\nexport async function mintLIT ({ chain, quantity }) {\n  console.log(`minting ${quantity} tokens on ${chain}`)\n  try {\n    const authSig = await checkAndSignAuthMessage({ chain })\n    if (authSig.errorCode) {\n      return authSig\n    }\n    const { web3, account } = await connectWeb3()\n    const tokenAddress = LIT_CHAINS[chain].contractAddress\n    const contract = new Contract(tokenAddress, LIT.abi, new Web3Provider(web3).getSigner())\n    console.log('sending to chain...')\n    const tx = await contract.mint(quantity)\n    console.log('sent to chain.  waiting to be mined...')\n    const txReceipt = await tx.wait()\n    console.log('txReceipt: ', txReceipt)\n    const tokenId = txReceipt.events[0].args[3].toNumber()\n    return {\n      txHash: txReceipt.transactionHash,\n      tokenId,\n      tokenAddress,\n      mintingAddress: account,\n      authSig\n    }\n  } catch (error) {\n    console.log(error)\n    if (error.code === 4001) {\n      // EIP-1193 userRejectedRequest error\n      console.log('User rejected request')\n      return { errorCode: 'user_rejected_request' }\n    } else {\n      console.error(error)\n    }\n    return { errorCode: 'unknown_error' }\n  }\n}\n\n/**\n * Finds the tokens that the current user owns from the predeployed LIT contracts\n * @param {Object} params\n * @param {string} params.chain The chain that was minted on. \"ethereum\" and \"polygon\" are currently supported.\n * @param {number} params.accountAddress The account address to check\n * @returns {array} The token ids owned by the accountAddress\n */\nexport async function findLITs () {\n  console.log('findLITs')\n\n  try {\n    const { web3, account } = await connectWeb3()\n    const chainHexId = await web3.request({ method: 'eth_chainId', params: [] })\n    const chain = chainHexIdToChainName(chainHexId)\n    const tokenAddress = LIT_CHAINS[chain].contractAddress\n    const contract = new Contract(tokenAddress, LIT.abi, new Web3Provider(web3).getSigner())\n    console.log('getting maxTokenid')\n    const maxTokenId = await contract.tokenIds()\n    const accounts = []\n    const tokenIds = []\n    for (let i = 0; i <= maxTokenId; i++) {\n      accounts.push(account)\n      tokenIds.push(i)\n    }\n    console.log('getting balanceOfBatch')\n    const balances = await contract.balanceOfBatch(accounts, tokenIds)\n    // console.log('balances', balances)\n    const tokenIdsWithNonzeroBalances = balances.map((b, i) => b.toNumber() === 0 ? null : i).filter(b => b !== null)\n    return { tokenIds: tokenIdsWithNonzeroBalances, chain }\n  } catch (error) {\n    console.log(error)\n    if (error.code === 4001) {\n      // EIP-1193 userRejectedRequest error\n      console.log('User rejected request')\n      return { errorCode: 'user_rejected_request' }\n    } else {\n      console.error(error)\n    }\n    return { errorCode: 'unknown_error' }\n  }\n}\n\n/**\n * Send a token to another account\n * @param {Object} params\n * @param {string} params.tokenMetadata The token metadata of the token to be transferred.  Should include tokenId, tokenAddress, and chain\n * @param {number} params.to The account address to send the token to\n * @returns {Object} Success or error\n */\nexport async function sendLIT ({ tokenMetadata, to }) {\n  console.log('sendLIT for ', tokenMetadata)\n\n  try {\n    const { web3, account } = await connectWeb3()\n    const { tokenAddress, tokenId, chain } = tokenMetadata\n    const contract = new Contract(tokenAddress, LIT.abi, new Web3Provider(web3).getSigner())\n    console.log('transferring')\n    const maxTokenId = await contract.safeTransferFrom(account, to, tokenId, 1, [])\n    console.log('sent to chain')\n    return { success: true }\n  } catch (error) {\n    console.log(error)\n    if (error.code === 4001) {\n      // EIP-1193 userRejectedRequest error\n      console.log('User rejected request')\n      return { errorCode: 'user_rejected_request' }\n    } else {\n      console.error(error)\n    }\n    return { errorCode: 'unknown_error' }\n  }\n}\n","import { checkAndSignAuthMessage, getMerkleProof } from './eth'\nimport { LIT_CHAINS } from '../lib/constants'\nimport { unlockLitWithKey } from './lit'\n\nexport const listenForChildFrameMessages = async () => {\n  console.log('calling listenForChildFrameMessages from ' + window.origin)\n  // listen for requests from child frames\n  window.addEventListener('message', async (event) => {\n    // console.log('onMessage in sdk: ', event)\n\n    let childFrameThatSentMessageIndex = false\n    for (let i = 0; i < frames.length; i++) {\n      if (frames[i] === event.source) {\n        childFrameThatSentMessageIndex = i\n      }\n    }\n\n    if (childFrameThatSentMessageIndex !== false) {\n      console.log('onMessage in parent: ', event)\n\n      const { command, params } = event.data\n      if (command === 'LIT_SYN') {\n        window.frames[childFrameThatSentMessageIndex].postMessage({ response: 'LIT_ACK' }, '*')\n        return\n      }\n      //       if (command === 'signAndGetEncryptionKey') {\n      //         authSig = await checkAndSignAuthMessage({ chain: params.chain })\n      //         if (authSig.errorCode && authSig.errorCode === 'wrong_chain') {\n      //           alert('You are connected to the wrong blockchain.  Please switch your metamask to ' + params.chain)\n      //         }\n      //\n      //         // get the merkle proof\n      //         const { balanceStorageSlot } = LIT_CHAINS[params.chain]\n      //         try {\n      //           merkleProof = await getMerkleProof({ tokenAddress: params.tokenAddress, balanceStorageSlot, tokenId: params.tokenId })\n      //         } catch (e) {\n      //           console.log(e)\n      //           alert('Error - could not obtain merkle proof.  Some nodes do not support this operation yet.  Please try another ETH node.')\n      //           return\n      //         }\n      //         const encryptionKey = await window.litNodeClient.getEncryptionKey({\n      //           ...params, authSig, merkleProof\n      //         })\n      //         window.frames[childFrameThatSentMessageIndex].postMessage({ respondingToCommand: command, encryptionKey }, '*')\n      //         return\n      //       }\n      if (event.data.target === 'LitNodeClient') {\n        // forward this on to the nodes\n        if (command === 'getEncryptionKey') {\n          const encryptionKey = await window.litNodeClient.getEncryptionKey({\n            ...params\n          })\n          window.frames[childFrameThatSentMessageIndex].postMessage({ respondingToCommand: command, encryptionKey }, '*')\n        }\n      }\n    }\n  }, false)\n}\n\nexport const listenForFrameParentMessages = async () => {\n  console.log('calling listenForFrameParentMessages from ' + window.origin)\n  // listen for requests from child frames\n  window.addEventListener('message', async (event) => {\n    const messageIsFromFrameParent = event.source === window.parent\n\n    if (messageIsFromFrameParent) {\n      console.log('onMessage in frame: ', event)\n    }\n\n    // console.log('messageIsFromFrameParent: ', messageIsFromFrameParent)\n\n    if (messageIsFromFrameParent) {\n      const { response, respondingToCommand } = event.data\n      if (response === 'LIT_ACK') {\n        window.useLitPostMessageProxy = true\n        return\n      }\n      if (respondingToCommand === 'getEncryptionKey') {\n        const { encryptionKey } = event.data\n        unlockLitWithKey({ symmetricKey: encryptionKey })\n      }\n    }\n  }, false)\n}\n\nexport const sendMessageToFrameParent = (data) => {\n  window.parent.postMessage(data, '*')\n}\n\nexport const inIframe = () => {\n  try {\n    return window.self !== window.top\n  } catch (e) {\n    return true\n  }\n}\n","/**\n * Convert a file to a data URL, which could then be embedded in a LIT.  A data URL is a string representation of a file.\n * @param {File} file The file to turn into a data url\n * @returns {string} The data URL.  This is a string representation that can be used anywhere the original file would be used.\n */\nexport function fileToDataUrl (file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader()\n    reader.onloadend = () => {\n      resolve(reader.result)\n    }\n    reader.readAsDataURL(file)\n  })\n}\n\n/**\n * Inject an iFrame into the current page that will display a LIT.  This function safely sandboxes the content in the iFrame so that the LIT cannot see cookies or localStorage of the parent website.\n * @param {Object} params\n * @param {Object} params.symmetricKey The decryption key obtained by calling \"LitNodeClient.getEncryptionKey\"\n * @returns {promise} A promise that will resolve when the LIT is unlocked\n */\nexport function injectViewerIFrame ({ destinationId, title, fileUrl, className }) {\n  if (fileUrl.includes('data:')) {\n    // data urls are not safe, refuse to do this\n    throw new Error('You can not inject an iFrame with a data url.  Try a regular https URL.')\n  }\n\n  const url = new URL(fileUrl)\n  if (url.host.toLowerCase() === window.location.host.toLowerCase()) {\n    throw new Error('You cannot host a LIT on the same domain as the parent webpage.  This is because iFrames with the same origin have access to localstorage and cookies in the parent webpage which is unsafe')\n  }\n\n  const iframe = document.createElement('iframe')\n  iframe.src = fileUrl\n  iframe.title = title\n  iframe.sandbox = 'allow-forms allow-scripts allow-popups  allow-modals allow-popups-to-escape-sandbox allow-same-origin'\n  iframe.loading = 'lazy'\n  iframe.allow = 'accelerometer; ambient-light-sensor; autoplay; battery; camera; display-capture; encrypted-media; fullscreen; geolocation; gyroscope; layout-animations; legacy-image-formats; magnetometer; microphone; midi; payment; picture-in-picture; publickey-credentials-get; sync-xhr; usb; vr; screen-wake-lock; web-share; xr-spatial-tracking'\n  if (className) {\n    iframe.className = className\n  }\n  document.getElementById(destinationId).appendChild(iframe)\n}\n","import JSZip from 'jszip'\n\nimport {\n  importSymmetricKey,\n  generateSymmetricKey,\n  encryptWithSymmetricKey,\n  decryptWithSymmetricKey,\n  compareArrayBuffers\n} from './crypto'\n\nimport {\n  checkAndSignAuthMessage,\n  getMerkleProof\n} from './eth'\n\nimport {\n  sendMessageToFrameParent\n} from './frameComms'\n\nimport { fileToDataUrl } from './browser'\nimport { LIT_CHAINS } from '../lib/constants'\n\nconst PACKAGE_CACHE = {}\n\n/**\n * Zip and encrypt a string.  This is used to encrypt any string that is to be locked and included in a LIT.  For example, on MintLIT, we render the HTML/CSS containing the locked files and a grid to view them to a string using ReactDOMServer.renderToString().\n * @param {string} string The string to zip and encrypt\n * @returns {Object} The encryptedZip as a Blob and the symmetricKey used to encrypt it, as a JSON string.  The encrypted zip will contain a single file called \"string.txt\"\n */\nexport async function zipAndEncryptString (string) {\n  const zip = new JSZip()\n  zip.file('string.txt', string)\n  return encryptZip(zip)\n}\n\n/**\n * Zip and encrypt multiple files.\n * @param {array} files An array of the files you wish to zip and encrypt\n * @returns {Object} The encryptedZip as a Blob and the symmetricKey used to encrypt it, as a JSON string.  The encrypted zip will contain a folder \"encryptedAssets\" and all of the files will be inside it.\n */\nexport async function zipAndEncryptFiles (files) {\n  // let's zip em\n  const zip = new JSZip()\n  for (let i = 0; i < files.length; i++) {\n    zip.folder('encryptedAssets').file(files[i].name, files[i])\n  }\n  return encryptZip(zip)\n}\n\n/**\n * Decrypt and unzip a zip that was created using encryptZip, zipAndEncryptString, or zipAndEncryptFiles.\n * @param {Blob} encryptedZipBlob The encrypted zip as a Blob\n * @param {Object} symmKey An object containing the symmetric key used that will be used to decrypt this zip.\n * @returns {Array} An array of the decrypted files inside the zip.\n */\nexport async function decryptZip (encryptedZipBlob, symmKey) {\n  // const keypair = await checkAndDeriveKeypair()\n\n  // console.log('Got keypair out of localstorage: ' + keypair)\n  // const privkey = keypair.secretKey\n\n  // let decryptedSymmKey = await decryptWithWeb3PrivateKey(symmKey)\n  // if (!decryptedSymmKey) {\n  //   // fallback to trying the private derived via signature\n  //   console.log('probably not metamask')\n  //   decryptedSymmKey = decryptWithPrivkey(symmKey, privkey)\n  // }\n  // console.log('decrypted', decryptedSymmKey)\n\n  // import the decrypted symm key\n  const importedSymmKey = await importSymmetricKey(symmKey)\n\n  const decryptedZipArrayBuffer = await decryptWithSymmetricKey(\n    encryptedZipBlob,\n    importedSymmKey\n  )\n\n  // unpack the zip\n  const zip = new JSZip()\n  const unzipped = await zip.loadAsync(decryptedZipArrayBuffer)\n\n  // load the files into data urls with the metadata attached\n  // const files = await Promise.all(unzipped.files.map(async f => {\n  //   // const dataUrl = await fileToDataUrl(f)\n  //   return {\n  //     type: f.type,\n  //     name: f.name,\n  //     file: f\n  //   }\n  // }))\n\n  return unzipped.files\n}\n\n/**\n * Encrypt a zip file created with JSZip using a new random symmetric key via WebCrypto.\n * @param {JSZip} zip The JSZip instance to encrypt\n * @returns {Object} The encryptedZip as a Blob and the symmetricKey used to encrypt it, as a JSON string.\n */\nexport async function encryptZip (zip) {\n  const zipBlob = await zip.generateAsync({ type: 'blob' })\n  const zipBlobArrayBuffer = await zipBlob.arrayBuffer()\n  console.log('blob', zipBlob)\n\n  const symmKey = await generateSymmetricKey()\n  const encryptedZipBlob = await encryptWithSymmetricKey(\n    symmKey,\n    zipBlobArrayBuffer\n  )\n\n  // to download the encrypted zip file for testing, uncomment this\n  // saveAs(encryptedZipBlob, 'encrypted.bin')\n\n  const exportedSymmKey = await crypto.subtle.exportKey('jwk', symmKey)\n  console.log('exportedSymmKey', exportedSymmKey)\n\n  // encrypt the symmetric key with the\n  // public key derived from the eth wallet\n  // const keypair = await checkAndDeriveKeypair()\n  // const pubkey = keypair.publicKey\n  // const privkey = keypair.secretKey\n\n  // encrypt symm key\n  // const encryptedSymmKeyData = encryptWithPubkey(pubkey, JSON.stringify(exportedSymmKey), 'x25519-xsalsa20-poly1305')\n  // const packed = JSON.stringify(encryptedSymmKeyData)\n\n  //   console.log('packed symmetric key ', packed)\n  //   const unpacked = JSON.parse(packed)\n  //   // test decrypt\n  //   const decryptedSymmKey = decryptWithPrivkey(unpacked, privkey)\n  //   console.log('decrypted', decryptedSymmKey)\n  //\n  //   // import the decrypted symm key\n  //   const importedSymmKey = await importSymmetricKey(decryptedSymmKey)\n  //\n  //   const decryptedZipArrayBuffer = await decryptWithSymmetricKey(\n  //     encryptedZipBlob,\n  //     importedSymmKey\n  //   )\n  //\n  //   // compare zip before and after as a sanity check\n  //   const isEqual = compareArrayBuffers(\n  //     zipBlobArrayBuffer,\n  //     decryptedZipArrayBuffer\n  //   )\n  //   console.log('Zip before and after decryption are equal: ', isEqual)\n  //   if (!isEqual) {\n  //     throw new Error('Decrypted zip does not match original zip.  Something is wrong.')\n  //   }\n\n  // to download the zip, for testing, uncomment this\n  //   const decryptedBlob = new Blob(\n  //     [decryptedZipArrayBuffer],\n  //     { type: 'application/zip' }\n  //   )\n  //   console.log('decrypted blob', decryptedBlob)\n  //\n  //   saveAs(decryptedBlob, 'decrypted.zip')\n  // console.log('saved')\n\n  return {\n    symmetricKey: JSON.stringify(exportedSymmKey),\n    encryptedZip: encryptedZipBlob\n  }\n}\n\nasync function getNpmPackage (packageName) {\n  // console.log('getting npm package: ' + packageName)\n  if (PACKAGE_CACHE[packageName]) {\n    // console.log('found in cache')\n    return PACKAGE_CACHE[packageName]\n  }\n\n  const resp = await fetch('https://unpkg.com/' + packageName)\n  if (!resp.ok) {\n    console.log('error with response: ', resp)\n    throw Error(resp.statusText)\n  }\n  const blob = await resp.blob()\n  // console.log('got blob', blob)\n  const dataUrl = await fileToDataUrl(blob)\n  // console.log('got dataUrl', dataUrl)\n  PACKAGE_CACHE[packageName] = dataUrl\n  return dataUrl\n}\n\n/**\n * Create a ready-to-go LIT using provided HTML/CSS body and an encrypted zip data url.  You need to design your LIT with HTML and CSS, and provide an unlock button with the id \"unlockButton\" inside your HTML.  This function will handle the rest.\n * @param {Object} params\n * @param {string} params.title The title that will be used for the title tag in the outputted HTML\n * @param {number} params.htmlBody The HTML body for the locked state of the LIT.  All users will be able to see this HTML.  This HTML must have a button with an id of \"unlockButton\" which will be automatically set up to decrypt and load the encryptedZipDataUrl\n * @param {string} params.css Any CSS you would like to include in the outputted HTML\n * @param {number} params.encryptedZipDataUrl a data URL of the encrypted zip that contains the locked content that only token holders will be able to view.\n * @param {string} params.tokenAddress The token address of the corresponding NFT for this LIT.  ERC721 and ERC 1155 tokens are currently supported.\n * @param {number} params.tokenId The ID of the token of the corresponding NFT for this LIT.  Only holders of this token ID will be able to unlock and decrypt this LIT.\n * @param {string} params.chain The chain that the corresponding NFT was minted on.  \"ethereum\" and \"polygon\" are currently supported.\n * @param {Array} [params.npmPackages=[]] An array of strings of NPM package names that should be embedded into this LIT.  These packages will be pulled down via unpkg, converted to data URLs, and embedded in the LIT HTML.  You can include any packages from npmjs.com.\n * @returns {string} The HTML string that is now a LIT.  You can send this HTML around and only token holders will be able to unlock and decrypt the content inside it.  Included in the HTML is this LIT JS SDK itself, the encrypted locked content, an automatic connection to the LIT nodes network, and a handler for a button with id \"unlockButton\" which will perform the unlock operation when clicked.\n */\nexport async function createHtmlLIT ({\n  title,\n  htmlBody,\n  css,\n  encryptedZipDataUrl,\n  tokenAddress,\n  tokenId,\n  chain,\n  npmPackages = []\n}) {\n  // uncomment this to embed the LIT JS SDK directly instead of retrieving it from unpkg when a user views the LIT\n  // npmPackages.push('lit-js-sdk')\n  // console.log('createHtmlLIT with npmPackages', npmPackages)\n  let scriptTags = ''\n  for (let i = 0; i < npmPackages.length; i++) {\n    const scriptDataUrl = await getNpmPackage(npmPackages[i])\n    const tag = `<script src=\"${scriptDataUrl}\"></script>\\n`\n    scriptTags += tag\n  }\n\n  // console.log('scriptTags: ', scriptTags)\n\n  return `\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>${title}</title>\n    <style id=\"jss-server-side\">${css}</style>\n    ${scriptTags}\n    <script>\n      var encryptedZipDataUrl = \"${encryptedZipDataUrl}\"\n      var tokenAddress = \"${tokenAddress}\"\n      var tokenId = \"${tokenId}\"\n      var chain = \"${chain}\"\n      var locked = true\n      var useLitPostMessageProxy = false\n\n      document.addEventListener('lit-ready', function(){\n        var unlockButton = document.getElementById('unlockButton')\n        if (unlockButton) {\n          unlockButton.disabled = false\n        }\n\n        var loadingSpinner = document.getElementById('loadingSpinner')\n        if (loadingSpinner) {\n          loadingSpinner.style = 'display: none;'\n        }\n\n        var loadingText = document.getElementById('loadingText')\n        if (loadingText){\n          loadingText.innerText = ''\n        }\n      })\n    </script>\n    <script onload='LitJsSdk.default.litJsSdkLoadedInALIT()' src=\"https://jscdn.litgateway.com/index.web.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\">${htmlBody}</div>\n    <script>\n      var unlockButton = document.getElementById('unlockButton')\n      unlockButton.onclick = function() {\n        LitJsSdk.default.toggleLock()\n      }\n      unlockButton.disabled = true\n    </script>\n  </body>\n</html>\n  `\n}\n\n/**\n * Lock and unlock the encrypted content inside a LIT.  This content is only viewable by holders of the NFT that corresponds to this LIT.  Locked content will be decrypted and placed into the HTML element with id \"mediaGridHolder\".  The HTML element with the id \"lockedHeader\" will have it's text automatically changed to LOCKED or UNLOCKED to denote the state of the LIT.  Note that if you're creating a LIT using the createHtmlLIT function, you do not need to use this function, because this function is automatically bound to any button in your HTML with the id \"unlockButton\".\n * @returns {Promise} the promise will resolve when the LIT has been unlocked or an error message has been shown informing the user that they are not authorized to unlock the LIT\n */\nexport async function toggleLock () {\n  const mediaGridHolder = document.getElementById('mediaGridHolder')\n  const lockedHeader = document.getElementById('lockedHeader')\n\n  if (window.locked) {\n    // save public content before decryption, so we can toggle back to the\n    // locked state in the future\n    window.publicContent = mediaGridHolder.innerHTML\n\n    if (!window.useLitPostMessageProxy && !window.litNodeClient.ready) {\n      alert('The LIT network is still connecting.  Please try again in about 10 seconds.')\n      return\n    }\n\n    const authSig = await checkAndSignAuthMessage({ chain: window.chain })\n    if (authSig.errorCode && authSig.errorCode === 'wrong_chain') {\n      alert('You are connected to the wrong blockchain.  Please switch your metamask to ' + window.chain)\n      return\n    }\n\n    // get the merkle proof\n    // const { balanceStorageSlot } = LIT_CHAINS[window.chain]\n    // let merkleProof = null\n    // try {\n    //   merkleProof = await getMerkleProof({ tokenAddress: window.tokenAddress, balanceStorageSlot, tokenId: window.tokenId })\n    // } catch (e) {\n    //   console.log(e)\n    //   alert('Error - could not obtain merkle proof.  Some nodes do not support this operation yet.  Please try another ETH node.')\n    //   return\n    // }\n\n    if (window.useLitPostMessageProxy) {\n      // instead of asking the network for the key part, ask the parent frame\n      // the parentframe will then call unlockLit() with the encryption key\n      sendMessageToFrameParent({ command: 'getEncryptionKey', target: 'LitNodeClient', params: { tokenAddress: window.tokenAddress, tokenId: window.tokenId, chain: window.chain, authSig } })\n      return\n    }\n\n    // get the encryption key\n    const symmetricKey = await window.litNodeClient.getEncryptionKey({\n      tokenAddress: window.tokenAddress,\n      tokenId: window.tokenId,\n      authSig,\n      chain: window.chain\n    })\n\n    await unlockLitWithKey({ symmetricKey })\n  } else {\n    mediaGridHolder.innerHTML = window.publicContent\n    lockedHeader.innerText = 'LOCKED'\n    window.locked = true\n  }\n}\n\n/**\n * Manually unlock a LIT with a symmetric key.  You can obtain this key by calling \"checkAndSignAuthMessage\" to get an authSig, then calling \"getMerkleProof\" to get the merkle proof, and then \"LitNodeClient.getEncryptionKey\" to get the key.  If you want to see an example, check out the implementation of \"toggleLock\" which does all those operations and then calls this function at the end (unlockLitWithKey)\n * @param {Object} params\n * @param {Object} params.symmetricKey The decryption key obtained by calling \"LitNodeClient.getEncryptionKey\"\n * @returns {promise} A promise that will resolve when the LIT is unlocked\n */\nexport async function unlockLitWithKey ({ symmetricKey }) {\n  const mediaGridHolder = document.getElementById('mediaGridHolder')\n  const lockedHeader = document.getElementById('lockedHeader')\n\n  // convert data url to blob\n  const encryptedZipBlob = await (await fetch(window.encryptedZipDataUrl)).blob()\n  const decryptedFiles = await decryptZip(encryptedZipBlob, symmetricKey)\n  const mediaGridHtmlBody = await decryptedFiles['string.txt'].async('text')\n  mediaGridHolder.innerHTML = mediaGridHtmlBody\n  lockedHeader.innerText = 'UNLOCKED'\n  window.locked = false\n}\n","import multihashing from 'multihashing'\nimport CID from 'cids'\n\nexport const kFragKey = ({ tokenAddress, tokenId, chain }) => {\n  const normalizedTokenAddress = tokenAddress.toLowerCase()\n  const normalizedTokenId = parseInt(tokenId).toString(16).padStart(64, '0') // to hex and padded for consistent length\n  const formattedKey = `${normalizedTokenAddress}|${normalizedTokenId}|${chain}`\n  const hashed = multihashing(Buffer.from(formattedKey), 'sha2-256')\n  const cid = new CID(hashed)\n  return cid.toString()\n}\n\nexport const printError = (e) => {\n  console.log('Error Stack', e.stack)\n  console.log('Error Name', e.name)\n  console.log('Error Message', e.message)\n}\n\nexport const mostCommonString = (arr) => {\n  return arr.sort((a, b) =>\n    arr.filter(v => v === a).length -\n    arr.filter(v => v === b).length\n  ).pop()\n}\n","import pako from 'pako'\n\n// Constants\n\nconst skLen = 32 // bytes\nconst pkLen = 48 // bytes\nconst sigLen = 96 // bytes\nconst maxMsgLen = 1049600 // bytes\nconst maxCtLen = 1049600 // bytes\nconst decryptionShareLen = 48 // bytes\n\n// the number of bytes in a row derived from a BivarPoly\n// which varies depending on the threshold.\nconst row_sizes_by_threshold = [\n  40, // threshold 0\n  72, // threshold 1\n  104, // threshold 2\n  136, // threshold 3\n  168, // threshold 4\n  200, // threshold 5\n  232, // threshold 6\n  264, // threshold 7\n  296, // threshold 8\n  328, // threshold 9\n  360 // threshold 10\n]\n\n// the number of bytes in a commitment derived from a BivarPoly\n// which varies depending on the threshold.\nconst commitment_sizes_by_threshold = [\n  56, // threshold 0\n  104, // threshold 1\n  152, // threshold 2\n  200, // threshold 3\n  248, // threshold 4\n  296, // threshold 5\n  344, // threshold 6\n  392, // threshold 7\n  440, // threshold 8\n  488, // threshold 9\n  536 // threshold 10\n]\n\n// the number of bytes in the master secret key (Poly)\n// which varies depending on the threshold.\nconst poly_sizes_by_threshold = [\n  40, // threshold 0\n  72, // threshold 1\n  104, // threshold 2\n  136, // threshold 3\n  168, // threshold 4\n  200, // threshold 5\n  232, // threshold 6\n  264, // threshold 7\n  296, // threshold 8\n  328, // threshold 9\n  360 // threshold 10\n]\n\n// Encoding conversions\n\n// modified from https://stackoverflow.com/a/11058858\nfunction asciiToUint8Array (a) {\n  const b = new Uint8Array(a.length)\n  for (let i = 0; i < a.length; i++) {\n    b[i] = a.charCodeAt(i)\n  }\n  return b\n}\n// https://stackoverflow.com/a/19102224\n// TODO resolve RangeError possibility here, see SO comments\nfunction uint8ArrayToAscii (a) {\n  return String.fromCharCode.apply(null, a)\n}\n// https://stackoverflow.com/a/50868276\nfunction hexToUint8Array (h) {\n  if (h.length == 0) {\n    return new Uint8Array()\n  }\n  return new Uint8Array(h.match(/.{1,2}/g).map(byte => parseInt(byte, 16)))\n}\nfunction uint8ArrayToHex (a) {\n  return a.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '')\n}\nfunction uint8ArrayToByteStr (a) {\n  return '[' + a.join(', ') + ']'\n}\n// https://stackoverflow.com/a/12713326\nfunction uint8ArrayToBase64 (a) {\n  return btoa(String.fromCharCode.apply(null, a))\n}\nfunction base64ToUint8Array (b) {\n  return new Uint8Array(atob(b).split('').map(function (c) {\n    return c.charCodeAt(0)\n  }))\n}\n\n// threshold_crypto wasm calls. Since they operate on single bytes at a time\n// it's handy to have helpers to do the required looping.\n\nlet isWasming = false\n\nconst wasmHelpers = new function () {\n  // s is secret key unit8array\n  this.sk_bytes_to_pk_bytes = function (s) {\n    isWasming = true\n    let pkBytes = []\n    try {\n      // set sk bytes\n      for (let i = 0; i < s.length; i++) {\n        wasmExports.set_sk_byte(i, s[i])\n      }\n      // convert into pk bytes\n      wasmExports.derive_pk_from_sk()\n      // read pk bytes\n      for (let i = 0; i < pkLen; i++) {\n        const pkByte = wasmExports.get_pk_byte(i)\n        pkBytes.push(pkByte)\n      }\n    } catch (e) {\n      isWasming = false\n      throw ('Failed to generate')\n    }\n    isWasming = false\n    return pkBytes\n  }\n\n  // s is secret key uint8array\n  // m is message uint8array\n  this.sign_msg = function (s, m) {\n    isWasming = true\n    let sigBytes = []\n    try {\n      // set secret key bytes\n      for (let i = 0; i < s.length; i++) {\n        wasmExports.set_sk_byte(i, s[i])\n      }\n      // set message bytes\n      for (let i = 0; i < m.length; i++) {\n        wasmExports.set_msg_byte(i, m[i])\n      }\n      // sign message\n      wasmExports.sign_msg(m.length)\n      // get signature bytes\n      for (let i = 0; i < sigLen; i++) {\n        const sigByte = wasmExports.get_sig_byte(i)\n        sigBytes.push(sigByte)\n      }\n    } catch (e) {\n      isWasming = false\n    }\n    isWasming = false\n    return sigBytes\n  }\n\n  // p is public key uint8array\n  // s is signature uint8array\n  // m is message uint8array\n  this.verify = function (p, s, m) {\n    isWasming = true\n    let verified = false\n    try {\n      // set public key bytes\n      for (let i = 0; i < p.length; i++) {\n        wasmExports.set_pk_byte(i, p[i])\n      }\n      // set signature bytes\n      for (let i = 0; i < s.length; i++) {\n        wasmExports.set_sig_byte(i, s[i])\n      }\n      // set message bytes\n      for (let i = 0; i < m.length; i++) {\n        wasmExports.set_msg_byte(i, m[i])\n      }\n      verified = wasmExports.verify(m.length)\n    } catch (e) {\n      isWasming = false\n    }\n    isWasming = false\n    return verified\n  }\n\n  this.set_rng_values = function () {\n    // Warning if no window.crypto available\n    if (!window.crypto) {\n      alert('Secure randomness not available in this browser, output is insecure.')\n      return\n    }\n    const RNG_VALUES_SIZE = wasmExports.get_rng_values_size()\n    let rngValues = new Uint32Array(RNG_VALUES_SIZE)\n    window.crypto.getRandomValues(rngValues)\n    for (let i = 0; i < rngValues.length; i++) {\n      wasmExports.set_rng_value(i, rngValues[i])\n    }\n  }\n\n  // p is public key uint8array\n  // m is message uint8array\n  this.encrypt = function (p, m) {\n    isWasming = true\n    let ctBytes = []\n    try {\n      wasmHelpers.set_rng_values()\n      // set public key bytes\n      for (let i = 0; i < p.length; i++) {\n        wasmExports.set_pk_byte(i, p[i])\n      }\n      // set message bytes\n      for (let i = 0; i < m.length; i++) {\n        wasmExports.set_msg_byte(i, m[i])\n      }\n      // generate strong random u64 used by encrypt\n      // encrypt the message\n      const ctSize = wasmExports.encrypt(m.length)\n      // get ciphertext bytes\n      for (let i = 0; i < ctSize; i++) {\n        const ctByte = wasmExports.get_ct_byte(i)\n        ctBytes.push(ctByte)\n      }\n    } catch (e) {\n      isWasming = false\n    }\n    isWasming = false\n    return ctBytes\n  }\n\n  // s is secret key uint8array\n  // c is message uint8array\n  this.decrypt = function (s, c) {\n    isWasming = true\n    let msgBytes = []\n    try {\n      // set secret key bytes\n      for (let i = 0; i < s.length; i++) {\n        wasmExports.set_sk_byte(i, s[i])\n      }\n      // set ciphertext bytes\n      for (let i = 0; i < c.length; i++) {\n        wasmExports.set_ct_byte(i, c[i])\n      }\n      const msgSize = wasmExports.decrypt(c.length)\n      // get message bytes\n      for (let i = 0; i < msgSize; i++) {\n        const msgByte = wasmExports.get_msg_byte(i)\n        msgBytes.push(msgByte)\n      }\n    } catch (e) {\n      isWasming = false\n    }\n    isWasming = false\n    return msgBytes\n  }\n\n  this.generate_poly = function (threshold) {\n    wasmHelpers.set_rng_values()\n    let polySize = poly_sizes_by_threshold[threshold]\n    wasmExports.generate_poly(threshold)\n    let polyBytes = []\n    for (let i = 0; i < polySize; i++) {\n      const polyByte = wasmExports.get_poly_byte(i)\n      polyBytes.push(polyByte)\n    }\n    return polyBytes\n  }\n\n  this.get_msk_bytes = function () {\n    const mskBytes = []\n    for (let i = 0; i < skLen; i++) {\n      const mskByte = wasmExports.get_msk_byte(i)\n      mskBytes.push(mskByte)\n    }\n    return mskBytes\n  }\n\n  this.get_mpk_bytes = function () {\n    const mpkBytes = []\n    for (let i = 0; i < pkLen; i++) {\n      const mpkByte = wasmExports.get_mpk_byte(i)\n      mpkBytes.push(mpkByte)\n    }\n    return mpkBytes\n  }\n\n  this.get_mc_bytes = function (threshold) {\n    const mcBytes = []\n    let mcSize = commitment_sizes_by_threshold[threshold]\n    for (let i = 0; i < mcSize; i++) {\n      const mcByte = wasmExports.get_mc_byte(i)\n      mcBytes.push(mcByte)\n    }\n    return mcBytes\n  }\n\n  this.set_mc_bytes = function (mcBytes) {\n    // set master commitment in wasm\n    for (let i = 0; i < mcBytes.length; i++) {\n      const v = mcBytes[i]\n      wasmExports.set_mc_byte(i, v)\n    }\n  }\n\n  this.get_skshare = function () {\n    const skshareBytes = []\n    for (let i = 0; i < skLen; i++) {\n      const skshareByte = wasmExports.get_skshare_byte(i)\n      skshareBytes.push(skshareByte)\n    }\n    return skshareBytes\n  }\n\n  this.get_pkshare = function () {\n    const pkshareBytes = []\n    for (let i = 0; i < pkLen; i++) {\n      const pkshareByte = wasmExports.get_pkshare_byte(i)\n      pkshareBytes.push(pkshareByte)\n    }\n    return pkshareBytes\n  }\n\n  this.combine_signatures = function (mcBytes, sigshares) {\n    // set master commitment in wasm\n    wasmHelpers.set_mc_bytes(mcBytes)\n    // set the signature shares\n    for (let shareIndex = 0; shareIndex < sigshares.length; shareIndex++) {\n      const share = sigshares[shareIndex]\n      let sigHex = share.shareHex\n      let sigBytes = hexToUint8Array(sigHex)\n      let sigIndex = share.shareIndex\n      for (let byteIndex = 0; byteIndex < sigBytes.length; byteIndex++) {\n        const sigByte = sigBytes[byteIndex]\n        // NB shareIndex is used instead of sigIndex so we can interate\n        // over both\n        // SHARE_INDEXES[i]\n        // and\n        // SIGNATURE_SHARE_BYTES[i*96:(i+1)*96]\n        wasmExports.set_signature_share_byte(byteIndex, shareIndex, sigByte)\n        wasmExports.set_share_indexes(shareIndex, sigIndex)\n      }\n    }\n    // combine the signatures\n    wasmExports.combine_signature_shares(sigshares.length, mcBytes.length)\n    // read the combined signature\n    let sigBytes = []\n    for (let i = 0; i < sigLen; i++) {\n      const sigByte = wasmExports.get_sig_byte(i)\n      sigBytes.push(sigByte)\n    }\n    return sigBytes\n  }\n\n  // s is secret key share bytes\n  // ct is ciphertext bytes\n  // uiShareIndex is the index of the share as it appears in the UI\n  // derivedShareIndex is the index of the share when derived from the poly\n  this.create_decryption_share = function (s, uiShareIndex, derivedShareIndex, ct) {\n    // set ct bytes\n    for (let i = 0; i < ct.length; i++) {\n      wasmExports.set_ct_byte(i, ct[i])\n    }\n    // set secret key share\n    for (let i = 0; i < s.length; i++) {\n      wasmExports.set_sk_byte(i, s[i])\n    }\n    // create decryption share\n    const dshareSize = wasmExports.create_decryption_share(uiShareIndex, ct.length)\n    // set derivedShareIndex\n    wasmExports.set_share_indexes(uiShareIndex, derivedShareIndex)\n    // read decryption share\n    let dshareBytes = []\n    for (let i = 0; i < decryptionShareLen; i++) {\n      const dshareByte = wasmExports.get_decryption_shares_byte(i, uiShareIndex)\n      dshareBytes.push(dshareByte)\n    }\n    return dshareBytes\n  }\n\n  // Assumes master commitment is already set.\n  // Assumes create_decryption_share is already called for all shares,\n  // Which means ciphertext is already set\n  // and decryption shares are already set\n  // and share_indexes is already set\n  this.combine_decryption_shares = function (totalShares, mcSize, ctSize) {\n    // combine decryption shares\n    const msgSize = wasmExports.combine_decryption_shares(totalShares, mcSize, ctSize)\n    // read msg\n    let msgBytes = []\n    for (let i = 0; i < msgSize; i++) {\n      const msgByte = wasmExports.get_msg_byte(i)\n      msgBytes.push(msgByte)\n    }\n    return msgBytes\n  }\n}()\n\nlet wasm\n\nasync function load (module, imports) {\n  const instance = await WebAssembly.instantiate(module, imports)\n\n  if (instance instanceof WebAssembly.Instance) {\n    return { instance, module }\n  } else {\n    return instance\n  }\n}\n\nexport async function init () {\n  let b = ''\n\n  b += 'eNrsvQt4XtdVIHre5/wv6bct27LkxzknTpHzaJXElp3EcXycOI7rpEnbtA1toGkbN8nvPPxqaS9'\n  b += 'u/AOeji64oJnxpWrHwwjwYAFOEeBeTJumauthBEmpGNwblRvuaL7P3BEQQHDDoAFT3/Xa5/H/Rw'\n  b += '9HjhNSOdF/9t5rP9dea+299l5nHe0jB57UNU3Th/WVDxuHD2sP6/AHAf3ww+ZhjOMvRHT8sQ4f5'\n  b += 'iz6Mw/bhzmiQbqmMQiCzmFJlwAkuYcPP3NY6nrmGa79GUyVnAUOPMMw+LFVScjPj0Pc+iHuyjOY'\n  b += '9kzcR6gMkp4xv+N+2zW0+J9uOpqu656m2aYDYQItMk1T10xNt72KZjimoZmmphkly6w4pg5Bc7m'\n  b += 'uGbrjeRaCzWW2AQH4T4cqIGsJckE1pmXaUEsFCtieye058L9pFU3blgKOqUGVUKkJUVMrQoWOjR'\n  b += '2j7FjKhhr1xZDbgj8oD6U00zYgHUq1QT7Obuh2GUvB/2WsTMexQPYVmmGaDvwzy2Vsg8aC2SHRB'\n  b += 'BD0p2BpjlGF5h2nqtk64gARoLVYlNnEfy16wTT0To2qBaBleR5UYes69hJzaJoHyHAIh4ZhaI6u'\n  b += 'Qy2AU+gtjxzSAW5Tfw0MLsHemmY8GfgPeqG5tmN6Hg4C6tAhLyLCrMDIoUpAMWaDNgBiQj0mDEP'\n  b += 'XAU3UjqaVTCihG6pO1+OAa9DgDeg6Vqq3YgU6dcpDFDuGbdBQNN2i4cB4bZ4Mk3uGeWmoODoYKA'\n  b += 'Z0yAV9MHBUPOswJh3Grtm2rS/FIXgadhSGrFmG7kFvPAzbMIGMOZxCC6nNLmG72BQORhcS0M2iL'\n  b += 'u0Tsg2sE8O2bgP9Wo5lGTb2hAdsYZ90zIrEohEqCjglSAdULf3zqEYbcsO/dqQHRApijqrGhjtc'\n  b += 'LcUomg0ISv5hUgGpTGditQH5BpBoAf6ZWI1Rwr7iLABFWYgi+sN501ph+FCZjr3DcUOsiIW5N5B'\n  b += 'uUFMwFo1pCVPtgo4ohf/hX6Ho0j8gRFffq/8H+A/4QbvRKYDcier1Ya3k/rzX4zy5+8mn93/a0J'\n  b += 'Y8uvvgh/c/9eiHP/mRJz6x+8CHDzz+v+3WvuVWDqSTtV9wSphwYM+HP/rpg7u1X3VKj6aiv8vQv'\n  b += 'RL9NYaq6FecMpV9/FGO/7pTfjQd/yrDnzwg8VMMj+PPce0fO8jRZ7l2Ff2as1iN4Kndn4L0pz/x'\n  b += '1EHtd3gAe59+4tOc7UtO5dFMwvOqVenlb6hWJf51gatRDAlcxYe5V09+jKO/yb1S0W84VcbXgcc'\n  b += '+sn83p/2WU320Me2bnG9vOu23OV8m7VvOYsz30cc/+ZH9H97/9I9x6h/aNPaG1D+1O5K8H3v6yS'\n  b += 'cfP/jk7qcOHmDolN3x6PTQo+l2oKec+r/S7cSpn0vn3atS/zGdN079WaddaOCpjxz8BIwqNbZ/s'\n  b += 'tsfnQ72c84iKkcpjz/1yO5P7T6g/Udn0aNNib/k0Kgf2f2x/Z/ee/Dxp59iuLR/gUc9DbTPWfTI'\n  b += '7v2Pf3I30uzH9z/9JAxSO+t62CWkQ+2M63wSMnz809rvuu7up6gS7SuuK/VpX3WBup7avf8jB3c'\n  b += 'TiWnPua0xuT2y+9H9u4FQ3YpQiCQ876pWn/zIgYO79394z+5Pa193q5IIMe6k9utYmdROeD2gnX'\n  b += 'LbYe4++vhTuxvxdkB71l3+sf27MXPjcLUvuStUsSZUaF9wC8+D2Ir00nH9Bfen7BfcY87vm190f'\n  b += '979W+d9x92/dF5w/29nCn5fcP/MfMH9R+dX4ffvnGPGC9YL7m9A6pCLsH8Pf38Buf4IKvgu/P0C'\n  b += 'xP+D2+8OuM/bw+4kpBwH6H+B1N+Dv/8Mf0fNo+b/tIb1/2xP2t9w/xr+/o6e33S/ZX7beMGdsr7'\n  b += 'j/KTzdxD/efu33G8C9AX3HPz9ksutjLh/4Jxxhu2fNv7JOW+dt86YQ+Zvmgz7C+dFyPW/rO/qf2'\n  b += 'h91/4D93vOv3X+wRqD+v7B/iP7l9wjUObv7QHnJ91fdP6b/i3j6/ZPub8PNf6E/cfOV61fds87W'\n  b += 'PrfuaPWv3I/b53R/w9AxjdgvH/gntd/R3/e+GPrb/TPu2eMP7J+zf2PRvHoXy37tvvvP2DsOew9'\n  b += 'c5UWTbp7QmOt5utdRt0INN+IRrSar1frrrHV2OpDQpdxz33WVgBs3SPpmHYnJOnRMaPWZWhQTI/'\n  b += '6OGhB8CgHTQgOGrVwF0YciJzidBeCQ0ZtnakFT2G7vUZgQ/X9ei1sBdAAgAwtfHKjib0ZhNR7fI'\n  b += 'mcgUhRRUYgUpAIFOuHlu6Xgn06JMFzQJ5D8hyGZzQK4zOiPr0WDWvVb9sdfsF/Cisp8uMefhi+8'\n  b += '6zvPrvN/+yR8Mlt5qHw6S0GFT+r1/ynt/m9WwzM9OQ2g0DYQnS6AaQfCp/cYmAnohMAejIGQQv9'\n  b += '2CW3xziGT6fHwC5HQ5Z0rfplkwOcqHoKGHBq/j2AufApQQLEixgXpIxBvIDxpwV9DlZxxqqFHqb'\n  b += 'u5aEZ6wA14T5AjMOxIT3cD+iR2LAeHthojiqYFR4EVDo4QIcmcAkEn+PgrYgRDm6G4IscvA2C5z'\n  b += 'i4BYIvc/B2pJsTTkD0c8oJIgBtqkVaVKz+PZJHr1EL3u0/fTLY5h84GdzhP3kyuNPffzLY7j91M'\n  b += 'rjL33cy2OHvPRnc7R88GezEOjaFDj42hy4QaPTqH/zE95xgdfRnk9/4GSfoiv565Ce+YAbrot/6'\n  b += 'k94X3OAaSb9W0q+T9Oul3A0Cv1HgNwl8vcA3CLxH4BsFvkngN/s20LgJxG0FRV8LChBvg/hSiC+'\n  b += 'D+HKIt0N8FcRLEF9RNkpIjE4tKMNzGJ4VnGx4tviu7+wJ3oPJgJI1mAxPH57AG0GAxeD5ToTrtS'\n  b += 'BEODyvQjg81yIcnrcgBUG+98Jz3KoFVUyH5yIsB8/FmO7WAiSrAXjei3B4dmI5eL4L88FzJTzr8'\n  b += 'LwPCcmuBW9HsoLnO5Bn4dk9K2ZgtDRqHD1iAbGBWEHsIJYQW4g1xB5gMca4mgE1I2qG1IypGVQz'\n  b += 'qmZ4Fkowt/qt/jU9xIkreoyjQOV+qQfEEDxX9RhH8NneA+IQnst7jAvIoct6jCl8Lu0xXsVnW48'\n  b += 'xic9Cj/EKPos9xoRw9Hnh6HF8aj3Gy/i0eowxfJo9xjl82j3GKD5v7jFexOemHmMEnxt7jLP47O'\n  b += 'khaeNv6DGew+f6HuMMPm/qMU7j88YeEjn+DT3GKXxe32MM4vO6HuMEPq/tIbnjr+4xjuNznUiaL'\n  b += 'pI072UxyGIFkG/4twMeQOT42wAP+NwCeMDnHYAHfN4GeEB83Al4wOdmwAM+twMe8Hkr4AGfdwEe'\n  b += '8LkE8IDPHYAHfEaAB3zeDXjA51bAAz53Ah4MkXy3pMScWws1vxVEViyw+nQQVy7Spl0Lbcjs1cI'\n  b += '2kPec4RYK9dqJ1HTxt9euVb9mwyq2FrN3xdnXUgiqs/3FCHFiyGJV0drmSq7CrOvirFcllSxCiB'\n  b += 'tDFqlKrmquJMSs18RZw6SSKkKKMaSqKgkbK6GA/84EXfG6kST1m7XQgjxQ5dK4yndSqA/XljGAm'\n  b += '80YHkXYAC0afSb+jpq16gnTt/xurGp5XFW3qsr0G5EHdbQ0l38Hlm+Ps74jKd+INyhfaS7/diy/'\n  b += 'Ks769qR8I8qgfLmxvMIgDE3hyPO19OiHXJgGKx49oLT6JzZkWontXh03sZLny6Ihxpk6MdPb4ky'\n  b += 'dKlMlnakDM/1QnKlDZSonmYxo0mnoJs/uOxnEiWFJATW/gJUuiystJOSUTHtJUVKhmRwDLH9tnD'\n  b += 'VIyufwRNBc3sfy18VZ/aR8Djv4zeXXYPnr46xrkvI5nLAmnxNuyeKqoKKW3yggiF4asTU9zc+D3'\n  b += 'OdB6VeWyL+HpDkDfRN8BtIm+AxU/b0ZqPqWDFWvSKg6T/LbqdlcMYu4z5X0cxPyufJ9bqI9V6rP'\n  b += 'XaCXZhDoVhM7E1Vcgvz+QaDll2ah5ZdmoeWXZqHll2ag5VKGllcntDyLcF49g3Ceh1yeh0iehzR'\n  b += 'G3KxI4cWdRhqveC3S+D5cKm6Is9+X1NE45flk/C4sf2Oc9V1J+UaSyKfle7H8TXHWe5PyjSQzDU'\n  b += 'FbDYSj+V6GoC3Z4QpBu7XqGM5H44RDnpY0vHFWAV5JwxunDuDlBM6yJ9OvFZwo6kHJb0XtfQWq2'\n  b += 'n06Kv9doEsE6/F5XA824HNAD3pIu9eDjfgc1INNpOXroP7Bc0jHk4Iu0F3wmKALdBk8I+gC3QYP'\n  b += 'CLpA1+HTgbM6nw6M6Hg60AW6UbANn+f04A58junBnfh8WQ+243NUD+7C53k92IHPCT24G5+v6Hx'\n  b += 'CMK4HD+DzVT14Hz6n9OD9+LygBx/A56QePIjPI0bww/jsNYIP4vOoEXwIn3UjeEiOjGI6xuaN4E'\n  b += 'eoeSP4UeqeEXyYumcED1PzRvARat4IPkrdM4KPUfeM4BFq3gh2U/NG8HHqnhE8St0zgseoeTN4n'\n  b += 'Jo3gxp1zwz2UPfM4ImY6WIFDiUjbOi1WpqY7m8Sjl+xZhaOBJ9BOBJ8BuH4FWt64ZgSjR2gfK9g'\n  b += '5fshUb4/JMr3B0X5/mFRvh8U5fsDony/X5Tv94ny/YAo3ztF+b5blO8donzfJcr3dlG+7xTl+w5'\n  b += 'RvreJ8h2J8r1VlO/bRfneIsr3baJ8bxbl+1ZRvm8W5XuTKN8bRfnuEeV7gyjf60X5XkLKdyF9po'\n  b += 'fs5D8hyvceUb5ronw/Lsr3Y6J8PyrK98dF+d4tyvcjonx/TJTvj4ry/RFRvh8W5fvDonz/qCjfP'\n  b += '5JSvktz33yV3oqbr9Vz3HytXth8zaQtz6Yoz6Yjv0b1eHVm81XI23wtydt8FRRVLHkLbL5ydIgl'\n  b += 'eZuvUt7ma8mCKvyGqsKl6Q54fiClcWGO0riwII3fhKpwYUEaM25KWVX48knjeWjB81CAfxB031J'\n  b += 'a9+1g1fcaUX27RPVdJ6rvalF9rxXV9zpRfa8X1fcGUX1vFNX3JlF914vqu0FU3x5RfTeK6rtJVN'\n  b += '+bRcU1RQW2RAXWRAW2RcV1RQUuigpcEBXYERV3qajAy0QFXi4qcJuouKtEBS6JCrxCVOD2xl0Eq'\n  b += '6bbRBXdIqrpHaKq3i6q7Z2iym4W1Xa7qLq3iWp8l6jCS0Q13iGq8q2iWt8tqvRWUa13iqodxUyW'\n  b += 'MolobaYjMqUQttFJL21t4g3I05KGNzIAwCtpeCOVA7ycwOem9yrTk1Tv3xMdroXvqWilsl6Kjgw'\n  b += 'Oa9GG6Dl4VJ+1tZKvrzMHDbSRgXEZwZNoXwFcdTMpz9EIBDdx8CwEN3LwOQhu4OAZCK7n4GkI3s'\n  b += 'TBUxC8gYODELyegycgeB0r5XjzbMoNsyk3yabcJOPzmh6j35QbZVNulJHDj8JwWa+PenE/w8EjE'\n  b += 'FzFwQvQxnIOTkFwGQdfheBSDr4CwQIHJyBY5OB5CLrcNbyUt+Ty3ZRLdlMu2U25ZDflkt2US/ZE'\n  b += 'hKbOSwANQEe3CxoguE3QAMEtHDwOwds42A/BOzl4DIKbOXgUgrfKeCF4l4wXxTz39g5AnMunD30'\n  b += 'un0rUXT5tuODwacWUw6cOrzp8ijGJRjb9gLJ3R15ymvNuCvUhmQ0C7P407H4KDSBsAppWVkBJcC'\n  b += 'QJnoHgLjzDTPYOT4ll0ziK3vNu2nzpKbFsGkXQuQaQzvZQCDqbAe2iqlGSY6tk5PTUNutQ+NQWs'\n  b += 'nCCCOY8ljV2GnVSy8EuxcbY5W61iPyVEwvreGVBsdCNP+urddu/ByfaRkMjnokB2gz32wpXrWw6'\n  b += 'kBYWvbYIiy5hXm4m7hjWTTL/uurPWxl7rG4hI19YPNM/Lujjz9rqr1txjbisnFUE2K6WOSoZ14y'\n  b += 'F2vFnZfWUlUHS59xMD8aSw0g91Hgh2Elmeuf0Gq4EZBuEO7FT8Gxj+7pgaaQFtrkVeSbSa3w8pj'\n  b += 'o8ovtaLXR5raqxaRUgMTSrFx1Yepb6FDD9Nt/BgAPbPBcDrl/0NQwQ5dm1cJlvIokqgWnytgBX2'\n  b += 'wmALvedNJQX+HGETgG03XfTUF7eJ2mldrBzWhqqUaiOCJxw0GDESkMtrhmg29Dw57986Qt9f4l8'\n  b += 'BJVtQ8ug//dzX+i7SWlOJCHGndQOzo7qxl0VUwxO8NnvoKFIWstwpHhS8BXH133Ijz3hPboG3cL'\n  b += 'M4w4GcQ+cqmHUph6azPaZuq3pu4bKyqzdsJDE4h5E1Vq6E8vT5ceTTgxmOzEw/050pTvhZzrRni'\n  b += '4/qTrhplPrzrw7sCndge5UB+xo6x7eQqU4CJZi3AFW2QQWQh7xRhV/2qrfRTNFDU+nS2hzijnIb'\n  b += 'paLW6F9X0XHEIwuMg6iLAJqYE7DA+1o0q2t1VpL0Su/Aiv9tdHLv6JWeuzNqych9jVLK335/cYT'\n  b += 'bJw7Lsa5Bo0itr3d7Ou7gNU1ZX5rQlDMb2HPq8xvLQii+e09bHOrKfNb0B2V+e3TvkYbPhJewOp'\n  b += 'VAIn5rdiXolHuvWIRS7a4JRVhW1yxldXI/PbdUrCus41rnzwH5ElGslv3oD1hos4XfTJVLfHjXn'\n  b += '4A5z/re2x9S2vU3pSJ7d7sGrU3ZWK7N7tGyaoTHQPQUzEIWujFHnk9xhGx2avTlpFkbV1Z39ZJ1'\n  b += 'g6krW/RmvbelHUtWuOW8qxx9wr2iBSBqUKyyd2XOp9Ae9sBJ7bFPZCxxT2Y2OIOWOEnAJM4QyfY'\n  b += 'jBZl+anE5PZ0YnL7XGJyezY2uVU2uUQ5xxy+Vzvu4C4e2EFZ32pkffsetK+9A+1r70Sb2+1oh3s'\n  b += 'XWuTuQDvcu9EEd6f/iZNoegpLL68V60Mvsb5dIzaX68Tm8hqxubxW0q+T9Osl/e1S7kaB3yTw9Q'\n  b += 'LfIPAegW8U+CaB3yzwW3yHLG893yY70yLE2fLWBm3HBE3GIRvU1RAvQ7yDrW+zVre0BQhAofDdP'\n  b += 'WQ122h1i9a0oVjl7sqxuoWFNLhaVl40jK5DvgdyrG5h/SYb6tmsbWF7gLoZbjCC+xutblnGxXbL'\n  b += '02MGRkujxtEjFhAbtljgIpYQW4g1xB5gMca4mgE1I2qG1IypGVQzqmZ4FkqA3UcVlQrSpeSCryw'\n  b += 'XfKvlgm+FXPC1ywXfcrngWyYXfEvlgq8oF3wlueDz5ILPlQs+Uy74bLngs+SCz5ELvlvkgu9mue'\n  b += 'DbJBd8G+WCr0cu+DbIBd96ueC7SS74bpQLvreDTiRWuMfECpdk35oe46jOOtMRscIFSfMASUG5/'\n  b += 'yuyBkD3e3fI/d7tcr93p9zvbZH7ve1yv3eb3O/dJfd7m+V+b4fc77XJ/d7dfL9H95xibDsixrhn'\n  b += '8flOQIMhgu/WlJRzcb9TzazDOkgrXA7rNu4Mb82ald5KoSkrEZqkpU9Zsk5fnbWbZV0cqnP8JVm'\n  b += '72SWqoqubK1mbtZtdm1RCFrxew0ERVLK2uZKrstaOVyWVkAVvqeE0CSq5qrESCoAeFaMrXjaSpF'\n  b += '4TTZR3ZU0zd/Fu1WTdPbSaMTxsxjudOik5w3x8Zvs3ZI1nb1BVWX4j8qCO1ubyZLy7ouHYm8o34'\n  b += 'm2YDw0bypPx7uqGs28q34iyYT45zJRXGOxzUu/cmJmNpitKLI9+gK/7Cv6qrF0tH6EPWDTEONPK'\n  b += 'rF3tSpWpJZ2pM2sA3qkyVZJMauvYlz6ywdndxSA5zy4roOkXszbRxYSckmkvK0oqNpNjmDWeDZP'\n  b += 'yOTwRNpcPssazQVI+hx2C5vJkvPv2huNxKp/DCX4+J9yaxVVRRdMH+7cm9NKIrelpfh7kPg9Kv7'\n  b += 'JE/j0kzRnom+AzkDbBZ6Dq781A1bdmqLojoeo8ye+kZrNjFnGfK+nnJuRz5fvcRHuuVJ+7QC/PI'\n  b += 'NDtJnYmqrgE+f2DQMsvzULLL81Cyy/NQssvzUDL5Qwtr0loeRbhvGYG4TwPuTwPkTwPaYy46Ujh'\n  b += 'xZ1GGne8Fml8f9Z49v6kjsYpzyfj+7LGs/cl5RtJIp+WyXh3fcPdJZVvJJlpCNpqIByT3pPNHHX'\n  b += 'RDlcImi8IzaYJhzytaXjjrA7wBWUMb5y6Ab6gHFAXkFON/ergRFEPyn4VlXc66K3Ljd0RuTk8Kj'\n  b += 'eHfXJzeExuDvvl5vC4ju+A0g3lZrmhvE1uKLfIDeXtckO5VW4oI7mh3CY3lHfIzeSdcjO5XW4m7'\n  b += '5Kbyx1yM3m33EzulJvJd8rN5fvkZvL9cjP5AbmZfFBuLn9YbiY/KDeTH5KbyYfk5vJH+MComLqA'\n  b += 'fFFsbofF5vas2NyOiM3ty2JzOyo2t+fE5nZMbG5fEZvbcbG5PS82txMG29xeMNjmdtJgm9tXDbS'\n  b += '5pQvNJ2OeU+pbB9k6jGRNb7c2icavWDOLRoLPIBoJPoNopCvIaURjSjB2gObdwZr3j4jm/ZBo3h'\n  b += '8SzfuDonn/sGjeD4rm/QHRvN8vmvf7RPN+p2jeO0Xzvls07x2ied8lmvd20bzvFM37DtG8t4nmH'\n  b += 'YnmvVU079tF894imvdtonlvFs37FtG8bxbNe5No3htF8+4RzXuDaN5tpHkX0wd6yEz+k6J6PyGq'\n  b += '9x5RvWuiej8uqvdjono/Kqr3x0X13i2q9yOien9MVO+Piur9EVG9HxbV+8Oiev9oSvUuz33rVX4'\n  b += 'rbr3WzHHrtWZh6zWTrjybmjybhvwaleM1ma1XMW/r1Za39Soqqmh7C2y9cjSItrytVzlv69W2oA'\n  b += 'i/oYpwebrjnR9IaVycozQuLkjjN6EiXFyQxoybclYRvnzSeB468DzU3x8Ezbec1nw7WPG9VhTfd'\n  b += 'aL4XiOK7xpRfK8Txfd6UXzfLorvjaL43iSK73pRfDeI4tsjiu9GUXw3ieJ7syi+t4iCa4kCbIsC'\n  b += 'bIoC7IiC64kCXBIFuCgKsCsK7jJRgJeLAtwuCvBSUXBXiwJcFgW4QxTgFY27CNZM7xBN9HbRTO8'\n  b += 'UTXWraLbbRZO9TTTbu0TT3SKa8Q7RhNtEM75bNOXNolnvFE06Es36naJpb4uZLGUPUW2mI7KjEL'\n  b += 'Zh09hqE29AntY0vJEB6myaG8MbqbzOprl1/RL0XjE7SXX+vWh5+16xvB3+DbK8nfqN2B6HLG+fx'\n  b += 'ucQWuCyYe0tiWHtzYlh7abEsLYnMazdkBjWihHucQjeKBalEHy7WJTGRrh062zK7bIpt8im3CKL'\n  b += 'JW6vWOAeEQtcuk1Ew9qOxLC2nBjWrk4Ma9sTw9rliWGtGOG+nJjbjpmx7e45CHqxmyyyuF0qFrc'\n  b += 'uW9bSBbtY2o6IBe5ZscxNSdDktITtarcmdrV3JHa1tyd2tVsSu9rtiV2tmONecGIb3CkI7pDhQr'\n  b += 'CNO3unGNzeJQa3d7NhLZ41vCKGthMOnzmcd/gMY9wRs+X3pI1r30MhNDme0SgXrW2fSqxtn0qsb'\n  b += 'ZXdFATvwfPLZOfwtBg1xda1ieXS02LUFFvXpkE6m0Ih6HQGdA8bArtsaUX2TU+j4e3TW8i4SUx0'\n  b += 'j2TtnEad1GJwj2JiTVnEDivDWxbV8bqSsout2/69bCIZG96yjWpvbGpbZbOBtKiYUqLCF9blZuK'\n  b += 'Opexnf97KmGJ1p81nx51s//S0+SwZ3nKNuKjEhrdVtchRybjmlJXfKSuDJDK8TXrAhrdsiPeiHp'\n  b += 'q8ELDp7Vm9hisBGQbhTuw4mtyybV2wLNICh0xvTTIIxOMx1eUzum/WQo/XKrHBBTSGFprVwqbbt'\n  b += '5QNbmxx62HA80vKKhdoj4xrc0xgh20xzM01ro0Nc1f4XhrqZQ1zvTyjXjLMHXPQXMROQ22uudH0'\n  b += 'tt5gesuaExvnO6kdnEOmt4aYm1jK+LfRMJSKJwVfQStyyIc94T06GnmSlS3Ze5pZq9dhm3poMeN'\n  b += 'n6ram75rlz6EbNpJn3AMxvVWdaG+0/5VO5Nj/zrMTXelO+JlOrGi0/6VOeI0GufPswKZ0B7pTHX'\n  b += 'DQ9NZp4CAxvfXY0hVr7jKIJcpod6v5uhjRjosR7alTZER7/JQs2i+939h72ESz2eGC+LRFq9TgP'\n  b += 'nZDG9wvLkYfYL7DOwlcOvFOApdFetsJljy8m0AhR/4ygfLxjiKasNjyb8xii78Riy3+YKhkuQer'\n  b += 'JvnRHIHnCl6HyVLvDMA/iH3W2QIQ/XIuFgtBesmxwBaAkx66PgUBU2ALwHGvRv4/+wpsATjqsR9'\n  b += 'PWBFxq4sLH/nhnIDnOiznsRvRPo8NGuvwbEEHvihw6LUjvfoZ//30SxbLKT+/M3r4hc21gY58QR'\n  b += '6hmbBO74VZsddeeMI+iaygTxkgjvhNpf0g8+m+70NoEHwA6WQFqTzhwY2wRKxA0Gb/AIY7fEoi1'\n  b += '3i3cVI7J7Vj0hZOMiDJPINCbsqo8Q4s3lH4+0EOmfwcl+eoPOlFJtjCPCd7ljNmxrJ4Py7CB7YY'\n  b += 'E5h8gBbIV6gkrsCQPpakv8zpsPzu38Jbnf2U/qLJ4p47xYbDZ2idHEobhE3R3hlNpskQeD+ipIK'\n  b += 'kfpvwUcXvkFALJm9WkZhTy5i8RUWyUmSI7IcnaSZfdXlzf8FlJeG4x8pBv8eb+mMeX+71eaxMHP'\n  b += 'VYiej1WHk44rHSUPdYWRjwWEk44bFycMpjpWDQIxPYxH/v/pPBPWgvfC975nXZM2/KNvhqsQi9R'\n  b += 'ixCrxWLUOW3tVvSlV9X5edV+X1VfmCVX9gegW8U+CaB3yzwWwR+q2+LbbBDPmZLEF8q1q9oG7wG'\n  b += '4j7EA4i3Qnw12gaTDfD7Zq3ZJJvaViqNtWBtjtjW2mRbW6JW2TLZjXusRqBGpEaoRqwwoDCiMDQ'\n  b += 'LJsm2Vt7jg73/aXxZrhW0CnwGPQZubHy/xxi0WKs4YbFtLZ5foSpw3OItfr/FNrXHLLaxxV0ust'\n  b += 'FRi9mo1+Kt/xGLt/r0Uh5s/S+IKjBlspOcV02+qSP2BI2JmAvUJeI30HbOm3xTR2y7QV7iWy8v8'\n  b += 'd0kL/HdKKrGDaJqdIuqcbWoGtcKe19D7P1BlhGx6yra3Z+20fwS8GDz7v+UzVrBoM03jids1gYG'\n  b += 'bNYSjtt8Q9lvszZxzJbX+GzWKo7afMOJr5ug2nIEn/cAHmy+abyA+LgX8GCJcHhHyjS00GRce8a'\n  b += 'ErVGB97Oh2FoubTixHHNiwVIv1HjXxedkmxucqkFNdr5dLdSxorn8bY12IQXlFLfxgAfKdzSX3x'\n  b += 'Lnak/KL8q6sl2kyrc3lmeP5e9KvTWrNwr4aJhsjt+VtablY7AzNm9QGq1pEaVTNr9xw26reTHHE'\n  b += 'zHHX4dVrYmrWqeqaj6JhjpamsuTK1q/wZ0DlW862rTprKKh/PVYPoizXp+Ub0QZlC83llcYhKFN'\n  b += 'cyZdL8i7Njx6QOkM1rRDfNwSZ8q1ph3iM5c4U6417RC/Ey2ZYN68hm7y7L6LQXJE3ZqcSpay1rS'\n  b += 'lhJySaW9VlFRqpsRcC3Eqn8MJa5vL5xqHU/kcTriquXyuNS+Vz+GEMJ8T3pHFVexAIn3t9I6EXh'\n  b += 'qxNT3Nz4Pc50HpV5bIcy8RU/Sde4mYIu3cS8QUVX9vBqp+R4aqV09ziSiivtn/5yXK93mI9nlI9'\n  b += 'bkL9NYZBLrTxM5EFZcgv38QaPmlWWj5pVlo+aVZaPmlGWi5NUPLV+ddIuYK56tnEM7zkMvzEMnz'\n  b += 'kMaIm5RTQITmSuPVr0UavxeXiu44+3uTOhqnPJ+M35N1hfuepHwjSeTT8ruz1rzvTso3kkw+QTN'\n  b += 'Tpwin4U5xSJctLY8ekJd/pwh5WtLwxlkFeCUNb5w6gJcTOMueTL9Wc6LoA618qUiXbmdMVpSfM/'\n  b += 'mS8KzJl4QjJl8SvmjyJeGoyZeE50y+JBwz+ZLwZZMvCcdNdlxzXhzgTJhyG2eywj0pDnNeFUc5F'\n  b += '0xWuOuWKNwWK9xTJivcRy1WuPssVriPWaxw91qocINCb4GejYq5xar2CYutZfst9kl7ymL72CGL'\n  b += '7WNPW2wfO2ihfSwdoJRSl4pHbDaXnbLYXPaCxeaydZvNZY/ZbC7ba7O57FGbzWX7bDaXPWGzuWy'\n  b += '/zeayx202lx2w0VwWmrfx+gyat4OnqXt2sJe6Zwf7YqaLNTa2p62b2dsCo0k65hrUpqRjrkFtSj'\n  b += 'rmGtSmpCNdLE4jHVOyEe9A+Y4NDT1J3X5Y1O0Pi7r9o6Ju/4io2w+Jun2vqNv3iLq9S9Ttd4q6v'\n  b += 'VPU7btF3d4h6vZdom5vF3X7TlG37xB1e5uo25Go21tF3b5d1O1bRd2+RdTtm0Xd3iTq9kZRt3tE'\n  b += '3d4g6vZ6UbdvEnW7jdTtUvqgiwxq94m6vVfU7adF3X5K1O0nRd1+QtTtPaJu10TdflzU7cdE3X5'\n  b += 'U1O2Pi7q9W9TtR0Td/pio2x9Nqdutc999tb4Vd19Xz3H3dfXC7msmdXk2TXk2Jfk16sdXZ3Zfpe'\n  b += 'lNuBp2XyVFFW1vgd1XjhLRlrf7as3bfbUt6MJvqC7cOt0Jzw+kNC7NURqXFqTxm1AXLi1IY8ZNa'\n  b += '1YXvnzSeB5q8Dw04B8E5bc1rfyKQe11ovteI7rvtaL7Xi26b7fovjeI7nuj6L43ie67XnTfDaL7'\n  b += '9ojuu1F0302i+94suu8tovveKjquJTqwIzqwKTqwLTquJzpwUXTgkujArui4y0QHXi468BrRgZe'\n  b += 'KjhuIDtwqOvBq0YH9xl0E66a7RBfdKbrp3aKrvlN020h02W2i294huu5W0Y23iy58l+jGO0RXvl'\n  b += 'N063tEl24T3fpe0bVvj5ksZSdQbaYjMnoQtjGnMag9wxbjMbyRAc6wWXgMb6TyM+yxWeBz03uVJ'\n  b += 'Uaq9+9Di9r3iUXt8d8mi9pzv531ZbtfLEQOyAWxLRfEtlwQ23JBbMsFsS0XxLZcENtyQWzLBbEt'\n  b += 'F8S2XBDbckFsywWxzWa0aAFHF8W2XBTbckHuyAW5IxfkjlyQO3JB7sgFuSMX5I5ckDtyQe7IBbk'\n  b += 'jF+SOXJA7ckHuyAW5IxfktlyQJ8IwdfRByv8Fjw8Dpjw+BHjVEwtWj5X5VzxW7ic8VvbPe6z8j3'\n  b += 't8GPCyJx+88fiw4JzHhwejHh8CvOjxocOIx0r8WY8PI4Y99ocWlvwH0nauD1DojMPWXeFS/0Mx6'\n  b += 'D4KjTh8q80eApKl/ACUKvBzUJ79hdhjLcpHn+xvDm4xhjBykOxpTheU/Q2kDyTpJwrK/gbS+5L0'\n  b += 'Y1L1MJvkWGSfcyaxz3kua5+TMXi9XzFZ7GkWRTyZhbIoRbn/w1kvs+J4Fl2yicHrCth4JYau440'\n  b += '+QsccYeIuYSrxMau61OhjNjEeyviYBdbL9Mxs9jGry5Ld4GMWl4e/ctI1N/mYjdFDpq5JDxIfs0'\n  b += 'csNtPrtXZaW2MfsmzIesRKOjRpoiErvwShLFrR2ZXL9qtVZb/6oLJfbfeLGCj6H0gMWdH/2LI8U'\n  b += '1V6SwU/Dbw8z1SVjKJHXGy1mIaKZwuXLbWhc3neaalmpN88A9ohr8GQlZzKpgxZSWMZ5/2ql9o5'\n  b += 'sQ9Zy3fYPXPWhHXclYJJkYz3WDPtPXbIY8PNZY3vnkHfHPJBmegLzvQdcvw5dMFKm68qz7GqA8u'\n  b += 'bvjvh0RYwlToy/w50pTvgZzqQMVIdVh0oZqxq3Xl3YFO6A92pDiReY1M88Rq9xpqx11iDvcaa4j'\n  b += 'UWLSuFu8hUk1kSHZiPN6mS0CN9X/XnQGO6Xps0IqA3LcPEI7p8b4FZ/M8sX6v+mgU9RqlSYFPaI'\n  b += '79FprSv/qZardGe++hviz/a379arx6+SovqjvJGO4amozBJik/YwhQmKk4g41KgozgBTUsBQXF8'\n  b += 'E8JTnKZTqBtnBfANXFqMhv5kWAv1KvqpGiKHesDLPscndXLJTOgkP1bkudqO46MGLmT44pzASRi'\n  b += '5kCLlrVrYisbzEh9GY3vfi+N1E02OWuP4qI3Oca043gfly76TxKF8BcRbXB+6fIVdlcShpCWQAa'\n  b += 'hpEeq8Kg49bcFdAcXJPlXK8OgeegNC1cvcA+eS67s8OChd5nEU5lGfOWNZ+7L01HoT1eLNsRb7M'\n  b += 's/Rpff+8ozXuSy1LJpjLcXXTUZYbyKeaX0T0XPLJdfivW5z1PIG0fjlmdW5hsqvm8S83OvC5V6x'\n  b += 'Lw/lzGeOWuZRtvwGlb2yHFC5AhwwnzXFeoPW30vvvf2m5J4rsdpfHhoyX7dd6eUu+8bT5OXm2n8'\n  b += '5uL90ii29iXDV8i8Gzz9oZa03SBLynkuL0zT6rzmkTozqTm2tVvpS01FWv91wlNVnNxxl9doNR1'\n  b += 'l1SkidZaH7iZzDrEmLTrPwrKnFb0kfZ9XlOKsldfyUPs7qzp5m4RlRMXWaNdRwmjVMp1nFzGlU+'\n  b += 'jQLT8NmOs3C07FS6jQLT9PKqdOsPjrNKs3hNGuSzsEWTrNeD/2guHCatXCa9ZY8zWpZOM1606+3'\n  b += '3ptoT/4v8TSr9LpJzOLCadbrqPWV3kTnjK8fB5QXTrMWTrPeFDS0cJr1xnHtW/k0q/gmwlVl4VT'\n  b += 'pLX2aVZ7naVZyXvXttUaBfRpOWntCc61mbPX167WHK1o0rgX43e1xrRa44uevT7+romMtNTJBC4'\n  b += 'x1pnY/WnqZeMLku2JSSrFqKzwndTy4UqkYY5gLzwGDYLUYjAluDJKM0B+Ni0K+f2dX8Mvn3TXOE'\n  b += '6dUS+hSzcRzqDgv2aRB1sCOugJDBvAp1X90kleWEhwrPYCfVo8+BaMC/JYe5GGdgbrqX/2GFg3B'\n  b += 'D3qhM9F7N/6e0UNrT2R+MtQjNL9zdnaG+vaKtk0LpCeBQTasBjdVOhRWfAvCh8IS++MrP/AsbOA'\n  b += 'qDzx7KCgJOsk2FL0foqW7TkZ/Jhniab4tjZ+mxodyGre2Tts2NRxiFz7DbZeg7TK1vU1/97Mzt4'\n  b += '9eeanSeKIghWZ3iCAQYwg2H2nUNMMMqMQny3xofJv+2SP0HfZtt/dKg6ERde+AVtITtMNKSnPvD'\n  b += 'ZoANUdGZo506uFgziSdIjwNzjhJ0MplQ9QbNviBnMGfoMEPXLHBQ3XjTVTCKdAMsXSflTAtsyYK'\n  b += 'Fo9ZtBCNaTEWurI8ClK2hnVNz6P9ORg4ThjonxED0KXLxaPokrrge9L4MWq8byYebW77MpEe4vm'\n  b += '1kx6Xnivp9eYg/iiNvfcSET8v0huGTmvJ0mMlZKdxYwQLLZJZ2HaxcUVgYk0ozpqB2uo5gz5Cg6'\n  b += '7roTbdoK0cStNmozQNH1p2sFNaTbpblMYP4c+nmpsWWmtsmZqdC6rzWp8E7DnN2Bu25oq9Sa0Ze'\n  b += 'wfxZ+8VwN0E4Q4760jTT+DPY1cAd/PB2XgOzh7Bn4evAM7GmnD2EP48eGXoDem8UHUzEo5ZNdTi'\n  b += 'qi9Jwo1f0uI6moP6B/Dn/ulRT21cPiQUGP0kw4D37odMdqDxoLbjx47u2o/rJXQ91Lg1D8Neip6'\n  b += '8LD2N5AzqHvy5O3dQ9H5KYODYLoGkZCDSeGZSt+4BNUjtZ+/En6151DRdu7Pjctq2HV4AYGWwkL'\n  b += 'AD5MNeEGlalGw/7s9uP/QZ1YNNzZjcjD+brgwmuxvXgvX4032FsGnSW1SidKFOwH24Dn+6pukDb'\n  b += 'vouGwIs+u5FZvKQyVN7x2hwFgb3mydwLf74001g/gDmgUUXtiU8EKTGCRwQ67CguL5GqmxvHtRK'\n  b += '/Gm/tEG9ZrKsivYeM3kb/lQviSTmgdEEm4MmYxN1ndeMTa8Zm2X88a4MNkUDV6i08EfLa1q//Lg'\n  b += 's6yW0dKK1B4VN6rjGjUa/8g3ZdcvOcK1W+uOr1HHSqE3HSQ2nSLOdI+mU0YZnH37hRtZ8WMzpay'\n  b += '2+fSnnTnb63IlS8VhJyxw3McwVKZacVI0a6ZMqxD/qqWEhfQQCU+LGxyOqGtTdM4damODGoORQS'\n  b += '7U/mhxjqbqGzOaTrWb1Gk95vOZt5UByoJXd7aRou+SX53m81bzDAbIW1blCezEib6K0ORxvcbe9'\n  b += 'uR9xNbVP+mOFuvEZbr9CNF6akwbJhxPjuQdZl0uhLqW3m+XUakSzMb+DrCaFet7oIH4ZzqIlTuE'\n  b += 'tFPF8TK4xtecRZd1ME+WkNTNRvtYTrUnrshFlvy57mpgopz9Qioly8jLOQoYEJ+dFgpOXRIJ9Oc'\n  b += 'if/jxrBuTPjwQH7OxxoUph0tO4QT7X0Vjiz3YyUUoW/Fyqe22HWdrlori63qhnx4dK01GcdjkRP'\n  b += 'mrn4g+xPjf8TeVolXI09fpjb5JOKbCzTvZQ6fXH3XxwNpGDMzmSev1xNt6EMzlUugL0VuCWmYEd'\n  b += '0kyj+yEL77ICnRBqbceLeDre0PFIQ1cyDMJGjFSpPEHqWA5S5cwqD6l8A5G3X58Jr9JqnvaDrio'\n  b += '0v5A9LcrB6TQNzwGt0zbusCBM7UuHMZZZTOrzuptKr+SzLyYznDTNsJTUL+fmTosPelAZtBqVwP'\n  b += 'jkNVYC8zl1656mgcjJ1RWhqU2N2xE5ZboyZEUHTXbjIVN+29Mpv69p4Bpr8o0HPHqKBAdnIcGuZ'\n  b += 'gqUA6ppJi53APPBHh7waJkDHmu6A565UuP0p1aXMqjXTo7tjQc8crx0CSQxH4wm2MTPb1q8UXzt'\n  b += '2Kw2Y1MOrK4MNr2aOrHIHi9dIWy6rONVXXXa06erQx3YFK7VSt9fYxiHV+GhTl9BvdU2im+kYaM'\n  b += 'WHy7Z1c/Sp9I52QsdX1ImOaWK75txCr3dts5sDz2V0scpflhQKQOc0hUWVcoQpGhYs+1bUo+DQs'\n  b += 'nhyChFXCntYsSTDlCkwBH0PImCjCNcZTWpsi9d5Xi6yqF0lXUvVeVouspRrrI9qXIgXeVkusrhd'\n  b += 'JV96SrH01WOc5V+UuVQusq6m6pyNF3lQLrKyXSVk1xlV1LlcLrKvnSV4+kqh9JVonfRBJcWf33X'\n  b += 'Cu1t/3zx/7v4nYsX/9f/fviZ0Nr269/9/sWLF79+8XcPSx2Q09p28eJ3fvovL1787mopbmLiiVe'\n  b += '+9eWfO3e6/39oMhwDU7/+n44d/87kf/3qeUkd1zH1pe996Yvn/+eff+4FSUUNwNr2xW9ffOGXv3'\n  b += 'a23iEooG9sj5AY4C81D1uhdci3gC3wA6LrzCHrUEiAIRudCa4zx62wwN/hJVYuHgrLh0JnljH15'\n  b += 'Y2pbuWNadLMHZOZN6ZRM2dMeIwI3AXsTV//5ZG5MCA8YMYRmjKiukML5ATnKfoFHHQLfXkZBt1K'\n  b += 'CEAPlOvoe68e1eDxh6sPhdVDiAb8SvQh9LYYDXIt9AF34HmHcTg7ZgbMHMz05c52PRczk0YeZsa'\n  b += 'NHMwMG4iZImGmPz3qQ+Ei/uw2jqUguBsxBXcVyrGYyNcg3OH7tghr9VsQZ61U2BaMjDqH8I4VUc'\n  b += '7fDcecLknaQ0JUfQ7NBX4wfR257Uwhd5SRuwRXC8SmSXOCnvMEv0PmpeB3yMjB74CRh9++XG6q5'\n  b += '+J3Us/B76iO+G2hcQ9yf1t43GEbDZvGUpIZ6FUzsIhyLCXCM3EGlsgMjBkyA4uTGRjXeQZ6GXUF'\n  b += 'vxVnYAlVbyucuTgnLq2v5FGRKbjAM0CTNC6TVGFi4CwVZhOZpAGZpLGcSRqHppYdCpcfCtthtmh'\n  b += 'WDCKiaMRQ8zRsXMo8Des58zSk583TgJ43T325Uq+eN0+o2DuIdqQr7u8iv0rdXEEjp7FUZSb71U'\n  b += 'y2UY4OInaayXaZySlTZnJpMpPjNJPLZSZhU5ueyeWYYy9PZD+jt+QvwYlsp/ZtQeqki7NOc8xeW'\n  b += 'ZnphJVK7AA0PdcTeXM9mZnrwby5HpK5nuDOLEvP9STPdeehcOWhcJXQ2rBONB2N6Wq6R/VLme5R'\n  b += 'LWe60e6haba78ybbz5vratNU40ZsQlM9fDjpYLgaE+4/hCk4r0i4PJI2mgdh2CEYpQPsyKQyqEh'\n  b += 'lRUIqfUQqq4RUehWpdCSkMmkgqawUUpnIIZVRU5YQxWjtMSUMe4jvEpINf8McMyxmWhUaqXtpGj'\n  b += 'mTRyPDGRqZyqORupumkTN5NDIsNDLVSCOdQuRTmhD5ci4VywghHdx3IxjKhWtgmEsY7+TqGpDcT'\n  b += 'tXRsEc95A017F4vZ9h9mWGP5A17NDPsXjdn2H2ZYY80DNvHkS+TmRvLzJySgwZzOU//lJGeftlu'\n  b += '1Gn+O4WG+jM0JOvugI6zvNJ3GPlMiA7LGyRAyLIVKXIV0i47f8Uclr+acyzdaHo+rrFrAEwLL2A'\n  b += 'eECyriCfT0p7InnEPSV8huL8BwbQ7GvBw9ArBY3kIHicE+4Lg/gYEL0YcVxTdG4I9L4W9SR2xt0'\n  b += 'gxj8JehbOUaYJ0RKMjtDKoC60s4iy0WetGiliquFgTLnYEvxvNKh42+ssINQVeLG1B5IQniFye8'\n  b += 'PykoIa3L4OebF/sFGqGPJyVxYKaiUbUIN7KamnQc8Zd1xE1LWrx1YXqypyliFl8HD8tSuSpl+VC'\n  b += 'i5DVRrOdpntJMt0t8Zim1Jh4ueK9WYHHJATmCYHZcYdt3gjiLOiyr/BS1FfFIVVknrtkmosyoo2'\n  b += 'mT2yNs8h1orkyV1aQvrRS3nhT2C5I5UnaaHZFXXKkrfM5KmjZNVae9eQM1cYDLDzoDnS0j+MDLK'\n  b += 'PJ/MTA8wEDzwd0Oh8wIzz1xfMBk49QLRMbYK2cdXTHh52vRQcDFiGJkMkHAxY5lgl0ZQJi4sGAK'\n  b += 'f6m+woL+v+C/r+g/y/o/wv6/4L+v6D/L+j/C/r/gv6/oP8v6P8L+v+C/r+g/18O/b/3a7Pq/5gl'\n  b += 'OvO1Bf1/Qf9f0P8X9P8F/X9B/1/Q/xf0/wX9f0H/X9D/F/T/Bf1/Qf9f0P//per/E8/Pqv9jlqj'\n  b += '/6wv6/4L+v6D/L+j/C/r/gv6/oP8v6P8L+v+C/r+g/y/o/wv6/4L+v6D//0vV/4e+Oav+j1mi8W'\n  b += '++Ufr/3wWGJ04dTdb/2QuBLUPqRmcLum/XpCrlnJE3OMrhIsWqraLAkaMfJwaNC6iPPEKOxx/wo'\n  b += 'BSCDBvpqoBTpCLOwXg5pePvoB6aDZ4TLGsrVxHo2GPGCpAE0qmZ+OQsEFWXiI2CgkIMOmgITN9C'\n  b += 'xFji8Skzm9w5ntFC+o2OYmpGoW41o03+7Qzyb2eQf7umrvOkFvL6b7J3CxzGZ7j/6NiTdR6a3On'\n  b += 'HwNWp6Qjc9JjIdwbNnRpTeoTFB8QfkxoUzXR/zpiO05j6L21Mr3FOZIfM3XalA8eoA3259PC64Z'\n  b += 'T8Hzbgss+4FFz25uDyKA2l90rhsq44ix0OGeSNziBvdFcGl1hlpFF1CmEgLQvs6KSgXFYV0GUVV'\n  b += 'wI9Ui6r5sWcTW7sDHRjZ6AbuyvHmpOGkHLsjzRBxuS8kDF5SciYzEHGQfzZOxMyJi8vMvCrDVm+'\n  b += 'fgJ/HpuBEicvHydgVe588Tieg8dH8OfhK4hHPIqjSuNVdIC+44Tnvq4s6VaK1GAXgh+RL/j2bGQ'\n  b += 'mDpnQuZpCk/jpsmIUDc6CorEcFD2EPw/mokj6q2N/LxFFghvBVApFGqNEvIqqT4c1iPK0NNFmFO'\n  b += 'OjOSN6AH/un37StctFtiPENMNGwjT34M/d0zKNdtlIbT44a3SzZ6CbPQPd7L3+KNvUiLHN+LPpC'\n  b += 'mAM9ApqOeUOEzgIstiBRZg0t0M77AnTQu+XluIq5RWTsCn1JtjsbibA9fjTPR1Ldedw1CwInZab'\n  b += 'UJNS360z0OmegU738nbm+e3Oh5MdFnTk+TJZOfvmtXL2XZLE95tRvxZ//JkEft/rtYG6kiNvbx7'\n  b += '5Svxpf8uPvNo88jb8qV6pkYuzU4vP/ckhYrweKx1dBiMrc74Unt7lwJWQGw2Kh4U/2qW0PB/JQZ'\n  b += 'eua7XSf1tjrDxs4ZnHcFG+i5r8xw2tuX+7tZWtHQIVrIYhBdf44aHQ99d8kMLBZ/w1D2KG67SOY'\n  b += 'JGvv0NvDxycHPRgWahFWjSgV3/G6fCdZ7d1f3Zb97/2/W2HD336M9u++cVvTFjPbKv/4rcHThuH'\n  b += 'tvm9J0M7qh6Mqp8IWn1HQgWuRZYKnb+faPlrthj4MRKL/eGSv8w1UAN2m91eWvul+QH09xgsxa/'\n  b += 'Z9hhaXr9yGwiaGwiwgUA1gF8zyDbSwW0M6nNuJGxuJMRGQtUIfhIjt5FRA13mWtjAcWlg20/U6/'\n  b += 'XqRnPKhDksRIfvIZfGU7DlAyLZw+isHtPRD6YJm+JjOg9CBdEcAYMlKN0aae9SpX07unjR3Ff9R'\n  b += 'S4JlbVKZaEOiVKJBOk7IxAs0XdcAkd6DkNYmnTf6TH6C0Jr5BF01Ag9/NbXrs4QlJF7oWW3gkh0'\n  b += 'y0apzF8soEoCPUYJIMwNbOYLZKCqb8GjFlb8Yi0swET7Fb+6E5ijsnN/UATkWswKhGobOcJGDBe'\n  b += 'Rz9zoh3bBdLgRulWvRcehLSQVSMCzI8SWiz3Gnk6Z0JLrwx/0VY/W7US6h3Io5JBzgDuiw4AivT'\n  b += 'OwGF3Qcx+rEWTq/P2XQ7gHOuzb2PWC7+LD3oHKCPM+SNwMR1r+orstnBYo3or1OtG6+yo24g9bB'\n  b += 'ETLrEJXQiAK+nIF4guExxpG0gZD21Z8xl8DjItEJwjxgdqCNYCXQywi/DUn2Q2sgzixiWUgDM06'\n  b += 'JZ45Tb7XUcAeEKVxDwrcg4L04BQ5/GcemUc3CtgN5lwIQzcK1Agyme9hDxZBDzzugcc98KQH5+I'\n  b += 'P0MyrBx72wOAeeNgDjxpBDpQvOTCDIp9Z+8MlIm9WQKZqjzFgSx69yp+ZmDKJiEccKqZyC1OPOA'\n  b += 'Iysrkn3UzuTs496QrIhNwpYqEvKLn4mHTDNqDWNqBVh/kq5qSVCW6qTCuFZL5WSduL6askdrAMn'\n  b += 'yNOsBwwWAoqRGbTUzyapCGeANlmM7VbvifUbqWoHaavDMi/qO+LdOynA7XqwLcFGD9U7DtpXveI'\n  b += '16PDB2qwDgK7uzg3Jd/biYYqs7F7h6LjyIMmHeRv11+Of4QlIKkVs4wPJuiSx4c8zKPbhdKN+TU'\n  b += '9yI7XZ5B+GeezjDrDMvyDMRLbLCc2mX6MZKFIq1LeGF3qG47RnXaMDvOjlxrjCqjPS4/RbRijw2'\n  b += 'N0d0JX5zZGj8cI20EYo+cvxj9aRWCMy0iiTz9GEcfTjNGJx+hMO0YvIK/SbmqMSxoXJi9/jN7cx'\n  b += '+jyGHUcY4rNK9Ei2sb7lRpAu2u3aHgpx8K5jBfnvELdV/EhKxQuTbdQ8drBq/ic0eEQOvyVal1H'\n  b += 'OcXLJHXOlWW9BUItRHQkfjxa1j1c1tcgzxf9aiNNrJaFvB2RVcSht/urd8L+tn32hdzj1cJrXMg'\n  b += 'zchsW8sVMKgmC5rSEe9Mv4flMj2ZK74rwVnLRuzpptcYQLq68nJvxqoB3mby7ACXG11XHwlk6Jr'\n  b += '1x8qes4Ds5+4qYfiGCNHRfBVQQv1SLDgM+K7FGdZg2qJEQBH09DlDtBPr1mhbdfBdpUr4DyIcs0'\n  b += 'GlK1okGaXmo7YTidoSHPr6F21PssBHdQBlI+cTTf7+CoJJfwm4YUTdCeY8DPQOeLhFoVwVtgVpv'\n  b += '1dFMotRjkGUQbURAewFtphXywH+TfwPq3NcsjcpEfZMqBqQXXej/ZgpWR9jzKjYQx1hqIPXyhsL'\n  b += 'lDYUbb6pwE4Fc/po2Em5qK5PZWSJzy16qzA2XueFyspeille9xpbLqb2cyBGsnTZRLWoj2cJNt3'\n  b += 'DTLckmipquvsamW7Bpl5tuwaZbqHbSX2BjktqcoH5aXo6TkJ6usoo9n4kRrCUDa8nAspNeyI9RO'\n  b += 'ScNK1fw/2wfymXUQcrFUjTx19/Qoo3RABLas7ZWigYwoSca+2uV8OpfQcLKqC9OOIsJq6Lzf6US'\n  b += 'Ps85TquEpK3nM/3GWHT0C9/Uog5OoMxOJrOeydyV7vQfrDZKh9vppQZ9T2it1XDmLNTOo/U1mEP'\n  b += 'Y2unRyxoFl0BwjINtEDzHwaUQHOXgMgi+yMHlEBzhYDsEz3JwBQS37sFQB4Q2U1onhDZRqIptXw'\n  b += 'c7Tnh0wd4SHmuD1fjwgWbgsTII8NEehPhoC67CRzVYi49ycDU+vOBtIDyR+vCn+1DYuu0i/Gv9K'\n  b += 'd+EtM+E/kncID0MeRb7i/xWIEc0H0rlsYhGt+k/dYgywzrwCGSu+m/zF3HmxanMXipz9SSqk49B'\n  b += '5k7/an8xZ+5MZS771XRmWLKegMwd/lq/kzN3pDJXs5lBmu2FzCv8q/wOzrwilbktmxkY9iBkbvd'\n  b += 'DfwVnbk9lbs9mrvQYn4LMaJiGpmdL/dWwAVwDG93Ab+fCy/mxjB9L+dHGjyV4GOMvSVV/nd+Win'\n  b += 'X5S1Oxtf6yVMz3l6diK9PdikMr49CqOLQ6DuFBzslI37cHVsXWk/twkwn7p9DZt5+n2PYXQarje'\n  b += '5jwCCUspoQCJjxGCZ2UUMSEJyihgxJKmLCXElZQQhkTDlJCOyVUMOFTlLAEEtac9Kndo2S15LdB'\n  b += '0mpJ6uWkpZC0SpKOcNIySFopSXVOWg5JVUk65BvMjEbMjEbCjEbCjEbCjEbCjEbCjEbCjEbCjEb'\n  b += 'MjEbMjEbMjAYzo8HMaDAzGsyMBjOjwcxoMDMazIwGM6OhmNFAZjSmZ8buS2HG9ZfCjJsuhRk3Xw'\n  b += 'ozbr0UZrxzOv5KM+gVZbVp5cElMB6HghlYsLuRBdc3suCmRhbc3MiCWxtZ8M6Y4wLhkodihlM8+'\n  b += 'GDMb4oFH4jZTXHg/TG3KQa8J2ZuxX9309fi1Q99KLB6q4Twu0oUo+8cswU7xmEXvwGFDxF4K259'\n  b += 'KOUR/LGIxhlxALIY9Bj+eFmQx6An8KecBZUZtBd/qllQlUEH8actC2pj0Kfwpz0LamfQIfxZmQW'\n  b += 'tZBCKJiSiDMxn2BGCrc3C1jKsl2BdWVgXw44S7Los7Dq02NyAh++UzoTFis8+fAOJ0Umf/9b3PY'\n  b += 'tZLSU2BJ/4xSgF81Iwj2FlBSunYGWGVRWsmoJVGdamYG0pWBvD2hWsPQVrZ9hKBVuZgq1kmK9gf'\n  b += 'grmM2ytgq1NwdYyrEvBulIwxKrWJfg8WePvu+n7aj2EU8B0N9ElYbnb12A9CQ1MWc/EmZkFvFDa'\n  b += 'hDYvANrEFNoE31xDTX8DMiySaRN86x48tNmA/Iu02gSHNQhPPDYgPyPFNmWA9QoUU4DdzXTblAH'\n  b += 'WtrCIsHuYepsywDqInyLbgKxONNyUAxZN/GjYBhQPRMlNOcbopgCADwo9N+WA5ThsQeBDQtWNOX'\n  b += 'Cmuqcn6G6UI4qgaalMJhXtrWOCththTkLQTiPMTQjabYR5CUF7jbBCQtCFRlgxIehiI6yUEHSpE'\n  b += 'VZOCLrcCKskBF1phLX4LV2SlCFohdNExiIOCXXNMhZRaAvIawQ5jLhmGYsIdAVUbQR5jLZmGYvo'\n  b += 'KwiovRFUZKQ1y1hEXklAfiOozChrlrCIuoqAuhpBgDkBXTcHctRyyVGbgRy1GchRm4EctRnIUZu'\n  b += 'BHLUZyFGbgRy1GchRm4EctTmSo8bkaKHN9VqtdGSVsfmwjbp0fbFyEIBvh+vRsKVMDUso1QqRHm'\n  b += 'nR0J8Mg+wwq8/gnr2EsqoUgWigeL1cA/npxvGhMkqqchwfL6N8tuN4XwXFqRfH8T10vbreV12gl'\n  b += 'OpBfg86hJ7j+x2GhmYB5K0gvB6S/CRpDJLeDkntSdIoJL0DkqpxEr0rQZERPBrUKDhs0eoB4WAL'\n  b += 'rQMYup0FOga3smTGYIRFumEHSa9HsrSNm0NnCBEHeyG4lYPoNOF2Dk7BELdwP7ZtNCctftE47GY'\n  b += 'rzLieYUi7AdLqqbQzkHYjpE2l2huCtJsgbTKVNghpgEN6uTAe8zrj4Y3mgO3jiUk8zH4O4jgH9H'\n  b += 'icg7oaJ9rtYnAbv1kHCWdS/UFHBNs4OJEMezwZ9lgy7FHo0wYZOL52HS5D3KYq64O05YjkVFq/g'\n  b += '+fkGr3HqdIGIG0F2o+m0gYhrQMHrGcGPKxvNOsOIicZ8VQy4roRj7jXiEfcZ8QjHnNwxP1Gipic'\n  b += 'eMR4SyYjRvcLMuIzTjziIQfXYBnxAAx/ESiLxWj8c98A9unEzXi4Esi+wr4wwsWgTBajeh9Cl+D'\n  b += 'rNS20Lwdx6XOIXhIMVyHaUj2qQ9pqSBtOpU1BdWtwrlJpk5Dm44Sm0iYgLcD5NjJoGzA2muOItl'\n  b += 'EjRtuYEaNtPEHbRIK2yQRtZ1xE21SqIXS/IWgbdGO0oZ8PQVu/G6OtDwbUo9A2AZGN2EMzxfaQt'\n  b += 'gkJNpU2Bmk341yl0kYh7Rac0FTaCKTdivOdSht2cU+ooQMDSdPQS4Ma+RkzHvmwGY98xIxHPmrG'\n  b += 'I+/3SBykKkfHIDLyXi8eOXogkZFPJSOfhI5sjgnGQ7M3DV1LJGQOaSGiPZU2BGlXIf5TaWcgbS1'\n  b += 'OQXqUkHY1jtJKYQPS3obYsJKR91mJcLAS4WAlwsFKhIOVCAca+ZlU5ZPJyCeSkY8nIx/zEuEAHW'\n  b += 'nlkcPexme2sOA/pvxWdOUgPDAONNvmtwGrDP8MsspSYqQilcCyxbgshzRaS9QqMlyBblavTlaXS'\n  b += 'q36RT2Owi8ByR0KxRCIM48LYaija4YQLdx4vdKRQ8If8n8ojgMNhV1+VxwHOgrX+eviOMxmeI1/'\n  b += 'TRwHbIfX+tcm5WnZpV/oL624BEnW2GR1TdbVZEVN1tJMXTJ+nddXNTAVReDVvsQJAK1fPb/WqTp'\n  b += 'sZ76jGCpkMd5XzMYnOL7OJLIDDDfExxriow3xkWwcrQCHi7AdwJvYyYa2xqEvVb/qd6I/iPA2oi'\n  b += '8d7+godQlRYpXpFP7jELRQyrY43BA/0xAfaogPlpp6OFCCpbyUwmeCRT3qrWTL1xviU+VsfLIhP'\n  b += 'pGJ2/T+CIaSWYHZ83n0AJVxAlRCMN/+UsKQQXkwtxHn5lCH3yG1rvBXSKjdb5fQcn+5hJb5y9Lj'\n  b += 'rju0oONCyjICF83GdXKVv0rKrPZXS2iNv0ZC8E9CgR9IyCLjYgyFfiihq/yrJLTWXyuhq/2rJfQ'\n  b += '2/23pfo07tGLOLLtIak0rp2bg1xxeTWL4W0kzN/5qFG+u8Dq8UqtJz6+HiK8ib4dIu4q8AyLVWn'\n  b += 'qAHu2V2USX9so6ewbDdxSYJrqR8nRV6AZsOI7diFSnqdhNWDiOrUeK0zKN8T51A33KXFWP924Tc'\n  b += 'YV4Hzcex/CibiyO4Q3eaBzDq70RPVO97AoR5ZNx/UhSnTFJLYlJaomQlC6uY5isdNpuKdLSxU0L'\n  b += 'k5dOWyxFYrr45UhYlzdXPfGisRHzmCrPJogNxLGbIdYfx25BjMQxFC29cczxuyS0OV5u3oY5rFp'\n  b += 'MvDot/oqodXEMw8Su0wZCMYEunkCYOa6RUGu8UCEBd8YEvCQm9CUxoS+NCX1pnG+pLMiNRF5fjF'\n  b += 'ro5zsN8/By1EIH3D2hvpaEtSVe49Ju6nRyU0ee38RNHRMjOW5zVUpd+V3zVEqfcptWUCnolM5hH'\n  b += '2o6uZNzVQQdwXkqggpNQUXQbZ3LrtZ0cjjnqQi6iiuoyDBBXKmNIBKZpIgnZWx0wqYGARFLtYNe'\n  b += '4hxV2zg1KhWgyzhPVYDO3grs0k0EADroCd0ZHdzoeV7cdHK31ujhRhfnaFkXN7p4R8v6uNHFO1r'\n  b += 'GyQ3teZDE+d2FInZw1KIXOQ6xgwP04YavBYifN5d4NPbzdmjWsYyaOWMZN/LGMqnnjkXPG0s1Zy'\n  b += 'jo5w77b4Jip6PvobBM4t8CZU2Pnc55MDZ6QeUIvkNhkysKHviAhb5JyLMESg0r6+milRCinPBgv'\n  b += 'ehLzJ2b0yLaa+bMqZk7p2YuHszcOTVyEEFm8OTsbJH45tCV550CewqBjZCunNd57IithXBmobcO'\n  b += 'LIse2RBTHmPKw0T0V1dmZyVIM5Y4nyoq3yM6O7UpiQs9Xfm9sZVblgrjcCTG4fAl+GMjsd6Mw6F'\n  b += 'cWhow8nDYZ+ThsJ6HQ3R/oZMjsqWw0PCIxRGNjBh0Ip390EAC+TfRlWc85fFvMW2LyDOeh/5YEO'\n  b += '3sMMvDKVEs1cKeZXR2hEdEi24CcQ08o6bNFW5LiLeNXCQViHLJpZjC+hmFdfF0s5yxLh7hkEOMS'\n  b += '8H6qJ6D9WE9D+tDuRw8kMvBfXoO1tHRpE7+wNrlzSJducEpsSOYcAXhibDO7pX0xBve4gTr7A2v'\n  b += 'DScCUeIIqVdj6u9VzhmXxNhHJ3hE6OhHEL0/VaiweBqMneyUebMLE4Sz4aZng3gHXfUtEsdOeuL'\n  b += 'ML/YdpbPHu2TCRpSvvqWZCRPHb8hV+qVM2LiWM2HsNK1xwshrWuN8dedNl5/jIA13g2EHIBlJu4'\n  b += '232ofI7444pvNSyB0nx3RlcnykK8eArYlvI51dO7bi1DhphIdlRHOF0VyJJz12nLc4JX6q6BbNF'\n  b += 'cLpVYSzQvmd0tn7Hvr+WsT8aopLrdhZma5c+Kn5O2PkzB+6sEvmb0xPe8kiQrDjTTXkggJ7Q5g+'\n  b += 'h51osS+zCvk50pXbPeVzqY2JFAHKpRs7lSMkDhB+FRLF9WJr4m9JZ1drtMaVGWNlQBGKX0BdCQl'\n  b += 'MqRKw4UsLbnQ1hyS/mFFnilevUgp16K+uGqMu9miXRh06vVsEU8SoE7d4WdTdj5hbLpibUG7fOj'\n  b += 'LeyNhdlPSbhagb4hsEjLJBhbIUZkaF8kYUpzOy7dQa5gDiEMnIqx7LE5wlQ5CYxgY6XkMrdp4Jc'\n  b += 'bxWzWBjgLyLKWyI47UsNrYiSpcKMsTxWoyMFvYu5hHG2ccXoK5Ndh/icc5B32MksGwZ+1h27Etp'\n  b += '7nDsOFCbB7qYPeDxkiSu0WKfW0Qk6BrNiwXcoPIiVkrNUzeiokWQJK7RWtXwSuxGjJYY2SKxWOx'\n  b += 'zadmaUr1cSlsL7JvFfbPEVRzvpwoin8WPmadcr1EnyYVeSdh9U9rlbOw5rFWwIv7jLN5o+C3Q1i'\n  b += 'HoXTnunfIfJhp2g/8wg8zODeU/zBD/YUbD98MNfJfXSPyH6U0v8+p0d44v8xpz8B9mzO4/DN8XD'\n  b += 'owc/2E6HtAvKGYLitmCYragmC0oZguK2YJitqCYLShmC4rZgmK2oJi99RWz7IedchWzzIedFhSz'\n  b += 'BcVsQTFbUMwWFLMFxWxBMVtQzBYUswXFbEExW1DMFhSzy6yYZb+4k6uYZb64c+UVs95OY5l8ccf'\n  b += 'ZEzpZ77Nz+Y891HYmHmpX3l/R2UHtqvth0J3+qkN+5wMVE0IrP+N3vr9isVta8hnsO6g7JJ5Zbe'\n  b += 'WWtnNat7SuOKMFmo7d0lItQaty5+rAxHbiC4Wt6BKpVblzRbcT2NMKee/xyI8jty/uUB10jgREh'\n  b += 'OyYOHN1lDPXIT1x5urQNzOanLlitaDxsefWKntudfiLEmnPrdQ6SARVGJ20Ol3GkE4OHQdt6doQ'\n  b += 'uYAMvaR/lR5jED1EmaEdFXdWNPI914X+7yoB1Vxh51CxK1SgmU5zK1eK7qnl9VlAxWePhJ3b6sf'\n  b += '+8mWzHq5EZMH8cPyZz5DHoEO1UCdasaMfQ+dihXthOqGXgzZ5W1VOomxoJ5r4CyB08nC2HbAfZy'\n  b += 'IXXkgj1mHpD8xw0AmdWpnulLw/vJI6tdLvrIersEMrkXigMyuTznDVQDqlUMewRx6mC3nOahu8O'\n  b += 'Sm0Es3R3AetkNP23aBI7rRs9nkHiyP5vLNrYUsPvY9b3glyzN65n5y6kYstIasislMRe2XHTsU8'\n  b += 'dl3r1KJTdoPrWgcdjA3aKDbxTzmWWxZPNFFqro85m4mGP5QE/VCYC9zEz5zLXhztjDdIW3lKtBN'\n  b += '/nlXsTxVrJL+xhQa/sQ77jYXel2sxqhQdJV7HOg+FnSmvY8hbQDU2ThQ5AexMe40tZb3GOug11i'\n  b += 'tFeiBOFKFP4sXYtyRk301dKmKXqr4lnILeVn17j2/C2IrbkxwOqifINMIrwXJmljFDQOTdj1kMC'\n  b += 'QC9NadytzPr1y0BGdncwpBe7E+Wcg/KPJDP12QSO2KkkdM/L/AS1u6CDgVt+KxbwVIm5mAZ4HVJ'\n  b += 'sIh96Hb6ixBJS8QnqF9gf4zbK8tlpmmCAc+AdZskmYcfkCRvouS6roVc1U1PQ0I4NouqOZNQhJ6'\n  b += 'RmIgMdLRcJj+bJfElCkwSuInfyBaqgvxswkapht586JxgJznb3E/uL4lqeBjAIcBILg6mtL2yGu'\n  b += 'mjDPQRedBkGX1FerALgj81xNZZhojHV69hiAmXsD9R8vyXHmf76zNOfzESy+ISbi/xD4ZJngCr5'\n  b += 'Plv+mGOGZdhmGX2MtiSGuZyqLIlPcxy/jDLcx9mCw/TqOEwW+j1p4pyf9s5nfvbZqH32ofZkvaA'\n  b += 'WxIvvzY6jc2dzXI8zDLPZnlOw/R4mDoN0/QX3YWbPn9RDdLYJywPuMFNtsNuskngopht8mo5V1F'\n  b += 'LLlcXZ91jS6eK/hL67oSGfjwrRF24deBeVLgXFewFyLDT5OISpX2r34pdsJMuyMonXUiWZdWFSq'\n  b += 'oL5Om2UmJBPCTLtY4vMyWLX7useLwMsKTT8ya9kEx6gR2q2hmHqiwLZcbvqui4AdChqhJ0itZp3'\n  b += 'TfvQ5efsDsn/6j7kErwhbZdlSUwScUabUeNoJW74RfpMxa8cSz6rTUYOk53gI/E76qLnnEt30pc'\n  b += 'rhbhP30PRO4Vp61RN/lrFcerxuHoBuxUh3hgBWgRO0wJlLkomaPuEi+LdVyRYEWsqrXxHuz2ffs'\n  b += 'rGrWHXSyqkZSXIuGZUd/fKper6LN8QMWUy8uhyQanmMOTDW4zRycbHGuOxwnienMyTsh4u4y+hY'\n  b += '4yO1OOMt0ZPH4W5uJh9PlmD6NZn6KVDKySgQFeoqG/VW5lMTacii1C37iEOgNjMA/EsDgN/qI97'\n  b += 'BEX9uns77aY8nfr4L0P+rslRwl1rPLrqoF63IB+CQ5Fn+80Vh02yE2oq1ybkOtvOlILndidiVX9'\n  b += 'IBpj4m0FXXD9OL67b4FiJ/FbkQLgP843Tt9iw4q4jEWvpuP5qx2N/9MwfbxrnNIrcb5h+ibjpE4'\n  b += 'OqKiWAUOlqxbxdXEzlZZttZ5qlc7SqVVO5V86AYa8WIZb0QQG/aJxSioOvkjfU+iuST7c/4x/H/'\n  b += 'vOveb+4q9GKRq90ovioC4jrMsIyYPXsB5a0TdPfLv9AOQ8bqDewr4zOHBMBfpU4KgK9KrAERWoq'\n  b += '8AFXQJTKvCqCkyqwCsqMKEC51VgXAVeVoExFTinAqMq8KIKjKjAWQ5Y+/P/heicm9wG7ovWwN56'\n  b += 'n28d6AE8wGLIJwoWyn5QWhBvrlpWYSeFSIbIAR+KuAfYEw+SRdR+F3mOxhku8RChDQ0AaRrFmS/'\n  b += 'hgQRQjCmhOdCJX0rNGIecaOAfszPJpVDeJm1x7Mf5C62gVXL8VnqZ21b8oOVRJqeOp1r4IJUxM6'\n  b += 'XwV8v0iqnQkLTZaqFWyY9hGHfHwSRbuo0+GkyJZxHFDMjdxjJphhpPdUHyGVlUUSspGJfGW2hu4'\n  b += 'dY4D/8OOTU1QSq1+rwemBnMOdHwhYQHJy1VHObqn5EGbCVr2EOFgwRILHwreZs3YJdn7gnpo0uT'\n  b += 'Fg67yxh3DuzzTaCzcQcR1WW8KoDzzgHfYtB5AU0JaCIBTQjogoBeSUCvCKhuM2gyAU0K6IiAXk1'\n  b += 'ArwqoV0BTCWhKQEcFdCEBXRBQn4Dqbgyquww6JqAjCeiIgPoF1JuAegV0XEBHE9BRAQ3LkOtJN+'\n  b += 'rSjbMCOpKAjghoREC9CahXQC8K6GgCOiqgUQH1JaA+AZ0T0LEEdExAYwLqT0D9AnpZQMcT0HEBj'\n  b += 'QtoIAENCOi8gE4koBMCmhDQYAIaFNArAjqVgE45IAOLKAGFwOlEir8EwKRushCE/PYB9nZPHyyV'\n  b += 'zA4793cksx1ndiSzV5tzzcUI1tVi1L6Dv4+WZkrgIJKuoR1zb1oi2CRBxptSP8jcBlh2AvpI3Ji'\n  b += 'DPoxhrhx0YAzT6aD3YphxB10X08dlVhDdOOi1GEjLQZ/FXcZzTkCf1zvjoK9i4F6iRFgniFhBNS'\n  b += 'R6xu9OI8mHZeaKsMKMA+oV8VbYyuwH21ni0HARM3G4mPk8XMKCIHTS6xeeXOPxNa9fNIFDgPYDi'\n  b += 'ONwNfnYc6KLF//pOz++71mfwKcdfwmAlxx49hBIpF//7jMAWP3sIfKrewg9HS+J1hz015yM9E/u'\n  b += 'F3mDNXznp7EGdKyw6oBv7sPSPpVYczJcjCWWcIHzXOD7F3/j79GzIrn5UAXWqAKLsMBiLkCyiTy'\n  b += 'ycDYojLeph/elC1SxwCIuQBILPRV0xAUG/tO3ftfJFGjFAlUuQHKsBf5bERfAq9lsCy1YoJULkH'\n  b += 'RDzxHtcYEjn//TX862UMECLVyAZF4Z/lseF8B7XitToIwFKlyAJCE6WVkWF/g/v/PXY9kCBSxQ5'\n  b += 'gIkH9E/y9K4AF4am5kCHhYocAGSmui2pS0u8Be/fGRUzxQwsYDHBUiWsldzSDQ58ah8lZjYlBe7'\n  b += 'DvY+R1yNBmN29Sd1chJh+raszYrD1EpNfFfd2CGRugAd+khoKhbpEHpG5cIdb7yfMWU3bqd246w'\n  b += 'EQAoeV9NuDY/cQxdPY3jX69ZYJfaULCkcYB+eLsopr8bfgoeMXo0/g1NQGb04I+RqqtFNauTNn4'\n  b += '3SyRbpxN9Fxh7ZLD2lPPZ3mh7ZmR5hxml6ZGd6lNTY1KOMvESM6iwj9Sp9mavaeQCEA97siisQD'\n  b += 'uGQQTsDJNMkUIjcua3VcNfoXMJu2KjRF2BKpbOrjA6+SRtS+ts2baM5prMjwCqyJ5kFcfS/OhL4'\n  b += 'SVsCF21WuignFDWO4F7xwk8Ng8qiAWtgbJQunXT5YOWozqLwnB7aeCgLO809NCFc4Rcc8eFIvv5'\n  b += 'CBy/qVorHM0u2eaGHqavE+RmloodCF1NXUyoOYtxCd0HsWYnyun4CHKC+9Bq8lTtisGZQp0P3sw'\n  b += 'ILrBItC7BNjeyDxGdojYB14PLou+K3xUTLPC+OtMNuUiIGaR7Av0bypSH6/HQGIyM6r0Mv6mErY'\n  b += 'sSLik/A6udF/dYTAX2a3JLvrJFLSAwuYmzRt7kYB4HLjhKDxYxKND9FJ3AwNX9qcW5Org6aPGWC'\n  b += '8FFdPE0y9M/tODMkVv/BkMsO2s5EOn/4dcTCT0YBrS+hb48iUYGMXWfQVA1bMh9tvkBWMr7JeFb'\n  b += 'oSrRwXpDHLMHEsNDGWVB276uYNJIz1FMoWv0flOc5Hb91hNd6Jh542tEkfvsG8Dv19d/DrLDW49'\n  b += 'eMrtfopMlEzc/Gz8D6NrJb2SzxluqEAwuoFX0eKDW6lp2dRucxcuRzw1r131jEmXZ0DGN0JoMNR'\n  b += 'ef/tYqmkXTMynDJryHRD2WmeEgGdloPl+IUm3h2N2E8ETg0xrol6Jf+Vk8ifgapRqBJGHl8c427'\n  b += 'QLSMMvGEGHeLepBML9RT/VXiXdUZfzH1gAyUoRDRMTqM82u8xxnQCRl69Z8t+bw35a1+1WaGC5e'\n  b += 'Jhrc8xYjAniF+MGIM0lcQnyNzGWjTFbbEpG+gJSGx4cqToqRYO+nj4HiPatBQYQNgSe/M6vcd/P'\n  b += 'YZB0xxGhau8lceQj+eZMdK/LvSX/UAbIv8lfil3JVpTQzqFwbr19EIuSLYP05aIOziGVfo9ar3C'\n  b += 'Ez1IPwwenqZcvoIG8f0DM5IGBDgqF494jShCRjXCEiMjBi8+TxrcHvDRtDJHyj3O3fQd7w6dnTS'\n  b += 'd7s+BdKEEJr6YPkqNLeAwanvJdebu4k9gmGRVKIeHcmbuGV+MlntfjJBM0/NfWSrcWlTQ2NYTTP'\n  b += '0GZ6a1TA1q2hqyJhjmulJqPUPDSVZ8Oi6xc8VKIbfJErGs6JkShNRMqFEyae4zUNh4b6KRUw2qS'\n  b += 'kcsSA5iFx0b4XO8mAKooEvGPgtMysa+5WzTA57G+SIRWMvkByxUD5Y0YlYPswsVU6npIoVnY1LU'\n  b += 'bPR2VisOGhwG8gIq3/kCJpovcUArLeoTy/doT7HzLkWVb9kiwD/75ZfxWzFqFiDVaSE9rlBie5W'\n  b += 'YJlp3ZGZAhBa1SkjK9z7iZZOObR30RjtxjoYGs5FnyHCHbYc2RmRgxo1IxNqRgYNmBEluh7jWXk'\n  b += 'itHbyx0Qt+tnVGWg0R3LQZag5egS2sjRHMAN4MWVGk78ok/Nww+QwYTo8PkQGn1eq/pvjunR0KO'\n  b += '7oHybMDInVLzsxXiARxIQ4505o7Xcs/rpO1B1p1W9bPOcP9RjnTA4+iPgaNX3xnh11Sw3dPcaYy'\n  b += 'Z/giTRI/Xsnkeb3M0oe4N2QGXXjX4yQEULIqKkQco8i2hghwwohd+dSq52dcNyqpXkOp3PCnGHC'\n  b += 'x02e8MbpnjQz0711D8/2lJma7a08tDvV0CYM+okHt6nGFcnYNjeN7cwvyNg2zTy27vRa2x2SUF4'\n  b += 'ferS9jLphlYWHfTDQkl0Ti4Su/AX2OvyK4i5mBova76IKamHKiSPdX6QdORpok032cbGcZXeOdU'\n  b += 'sWd2bh/4foBhNAxGZ3WwNmWhryPsuKWN3QGf9Wwy7L12fcY/mNWyyf52Rt6Cq52J7dX63EW0eZB'\n  b += 'RzwMElFPZr4c9letTfMBS6uuu8qqYgGRyd+do5S8WcTqahHZ+NS2Gp0pDfZa42rDVL1i8luB6uJ'\n  b += 'mVR2sDDuX0Y0VLM82pYcs1URkwP4yUveTad4FI/byMhNWBSze4yvMuJLw8Uck6UlRpjFCNN4HcG'\n  b += '3i+7D7z1Hg68IwrTpEKbDbpSHfi419HEzOtGbrAfduBygE35FvrwqjKrlAZFyGgmcbg88xRLIVp'\n  b += 'xRBVDEfUmO8GRlMVIK3E+qAKUMuXxRiD7IoyOfVd3BxetY3FfAU3Q2A3t1jsvhkXji0Q12dD5Vi'\n  b += 'ROdn2Ml59Sa+t8Do3pYRy22uicsJeagdJ91r7U1qkII76Mjr/pnTvTjIMx2dVI4gBX8wu+RJQVe'\n  b += 'fJufDLVozb7Q+CToFeY+aysZZBxGddzHg5bIPAgZTkMJthsU1kRb1VOYGGqgR1KNMI/P+OaP7QP'\n  b += 'mpC+Xovgs8z2shzyCVVV/H98W/LIbmGUbdwKnL1JPkPdsbDoCEj1Y/RsHV7OD+6o/5z4WGg09MJ'\n  b += 'VwaO6BGhj0w4j7oat+6NQPvEb5Ny49ftul413zoG/tCY3qS47qTqihfTCjxjzIrQRu9BxDA8c4n'\n  b += 'KAwwn6s2Qdd3LddIQLa2k/7T/rSMTBUKSBT5B769pKD3SEjQ3xoZGGHVfs2fmEbuyCfalV4igal'\n  b += 'MW07yijECtpynv6+YESvnnBhCMhi1XNOqJFVBUiCL7v4lVma9D1Rmzyr8py6+OO16Mf2RZ+pAYY'\n  b += '1RSfGQfwmD3RgV6dPs0JEJGQj3dhewUNlbI9IDq2AQGB/EnundUT4RdOLFy+6u9BUwopggI+G2h'\n  b += '7A0CeJoiL94J5oS60UOpkhIMJhJ1P9vxzEJeBaE0MjDcaGn2faSTf+OE9oH6L5ZASCNtKQ00QNV'\n  b += '4vahDDRITSelK36ZGTtAw7gBnZ0IqCT7IF0aMHXyBAFl8tAYysURFqAE0qdACpUI96HY7NyMI/J'\n  b += 'JTrq07mnwFH3QdjCb8CZO4GrOtEOCRWqzgCnjqYHRR7MZCkhNyiFt2x4abnnvk4UpZgGBIpysPq'\n  b += 'vDLQklinaSabrQL414CWkL40JGjaNQMGQ7aLOH60H6tUT6rVTNIvex/WDoZ4QLOCSCJZMuWwiWO'\n  b += 'w2EayuCNbmB7IRGyKZ1X/E9pHOzIoJODR5vmSaUKnaGfLAsQVERYyBUjJEe65DtGmIMdbYeDo7z'\n  b += 'HwmpQETk+aMOcWkumJSvYFJ9TwmRfUsHr6enU1oRHXEoFmFTvLg7qPvj9PApR7czXDdGh/y6jiR'\n  b += 'Bo/ZYCFgcOuRplrHmjkUyS5VQ9kq2aE3Z5Le3EvWY3ixb7FU0PbgmwbQmZqIBbVO1Mg3WN2CYPV'\n  b += 'btl+iM1+09CqhgWw5Oou9LOH6X6QwWWBT/0ewJyNxmyQDd3UChJelaJhB0JMXIUSbYa36b13fw1'\n  b += '2vhnsOpAoc57iqJMJTTO2+TpwxTKQP15ei89jSxTXY6BimljE0iiH88jlVTzmjM7giIFlgZBgjp'\n  b += 'yVyOg0ZwchzEnkunW0UI2clcjadbQwjL0rkxXS2cYyck8i5dLYJjLwskZfT2SYxcl4i59PZpjDy'\n  b += 'ikReSWd7NQ2p/zNEXpXIhQupSC9CLkjkSDrShxFMwcjRdKQfI0clciwdGcDIMYkcT0cGMXJcIif'\n  b += 'SkSGMnJDIqXTkDEZOSWQYI6clcjoNGcHIcxJ5Lp1tFCNnJXI2nW0MIy9K5MV0tnGMnJPIuXS2CY'\n  b += 'y8LJGX09kmMXJeIufT2aYw8opEXklnq38fZ0Eir6az9SLkgkQu/HMqWx9CjnxfJiudrR8jRwVyN'\n  b += 'J1tACPHJHIsnW0QI8clcjydbQgjJyRyIp3tVBrCko0Xf1sERWCIpABZie4PUJhQ3Nf2hBotWCR5'\n  b += '6LQXXwAw9vj6HgSaNMsIcnr4E2kRbpJEItmqdmlGScuAckK9vIRAjbUaFnoZhUC9XseO4uKtVX/'\n  b += 'FxV1B9aTrl3dgKNR5uyqCJzTutQ7zuyOoV+3CV1PQEJYMzSzoLNYqMhNaH44lmTb9GHUc4+s7NJ'\n  b += '3lYSIU6dJVI8kKgSJa2rJAFXNYvIOit9tYpOJOMA87OEpclj35hmCMA55T1Wfag4a66q/H3SSLP'\n  b += '0CDSwaBtJmGIUA6jGgPbgzxI0OCQdyaE2pcYnkci2AZlvdQTmk1xhfs/2j1snA391xS/rm4PK13'\n  b += 'p5vL44KZKgyjAVXm/2fvbaDruq5y0bP/z690ZMu2bMvJ3jtOqiROIiCJTZ262Rptmt6mr75vZDB'\n  b += 'y/TreyBujjNF3nAuRbEIelm21iVr5Ei4qBCrA7RU0xaY3poKmYCAUBQLPjKZFhUBNyaOiDeCWtA'\n  b += 'gIvaZN6ze/Oedae+8jyZGT9FK4kcY463evn7n+15rzm5lzm2+3kIHuiypZ055f9ByxwumBTkL3y'\n  b += 'QECG0Nsx5u42tCdD7YrDdzFdFBTOs9gLQePMbaIvxhiA8x5+V0nCLf73LDiocHlw5MeGlzUG4cG'\n  b += '3ohEUpKIDw2FCgMx5euO8aCNpRI/qRU7Bxo9rjERsPLW3tJyG/nSSzsE8PlyWBppZ03b+7P/m1b'\n  b += '40hiAJBh4GaUbx7XOm7emLWQNgYG2bGy454fSbzzT8wPT810zd0jPor5DWXwMPNs8rkKMK2+/nT'\n  b += '7S0A6wXlCoF0/z+QC7yBRFMTHAeHhRissHGJf4fRGTCXqn+uIebIGeFudO1nXYt/NFtxqID+EJ3'\n  b += 'tZkPDhwLIzQqSPsdOkU9ZYW07cF3mU8aNSgbhL0/liETlOxHfQV6DQ16TQ19JaadJoadxqWJqM8'\n  b += 'aeOOLWFpl9iSoanbVUPyfAKVE7PZo+qQLW9Tdd/5MpKA/qF2Zztt/xtTG93W0RBXHPOfoVk22F7'\n  b += 'J4gQPpAGj77CQbJSNj4KpMsJtE46hB8dSXzggJM4RXGFIHK87jieiCDNRh3reu8789Bd+hCjy7j'\n  b += 'NhUoVoIs5Bx6O0Tr2VbDNR2sM3qMyj4sbuqdg7Ffun4uqpw2lfSSX6AdYifiKtjcaNAyxH3Me+4'\n  b += 'oboGh2+wFLvjI5lzoGE14v7aDpmzpekyoKIVLOYeSUCZOWfGrnw61/6wIZxyeiwKizlpJAGEe3y'\n  b += 'Hxoj+tZPUXQqD9XiCKswj/tGULP6ESiIJ2fPqdgqig9uch+O8DsdxX22FlT6b3H4g0Ul6OuMTbN'\n  b += 'O3f03E3lAKCWZISD1v/2pD8/RU5SW5DUOrgDwXxk363AfT/tOgLzg6KDZg0ryUJT0U5ohK7WP14'\n  b += '2foO844dEOtYSlvw/Ke6gr079QTKb0ugL90b/aBfq7l0x/H/lcEv3bQn8meNvSf4M0hxLfaqi3a'\n  b += 'uz743beCOvW3Agzr1QjTEV4NKNGmHr5jdAqNELLNkKLG6FlG6H1yjZC61+vER5+hRrhJvfBV4l/'\n  b += 'qcSfBvFpOyYEd7vI27cHzIe46O1uiD4h/B7wGgY5vV1Db+Y35IWk/de0vOMnYMwpKG70IB3Amvw'\n  b += 'yHDNEnMJVdkE6dvzLPGttd8G7xgyKop+QYzALIzbyQTY78QRrXpd4S47RZSzxmPNYMkxwgQ6uFG'\n  b += 'FMdEW7YWxygJhPHuKx1kjw0ZmUIXhUDAezf6Apo/nB91KHkBqH40uTMrTsir5FLVPAMW3KYE4TX'\n  b += 'YGu1bPoWn2MsOXpFtLBbnoJXJoNZtL1cLF2HmYP8+B6OEu9ALOXWWwhLEcNwRzAHq7eng95KEDh'\n  b += 'q59NrLunY1uGX3uAzNP+fpFqwNMmZXqVqvoEOuH3G33UZL9KlFGb+C2g/DkSu5fs5MuyNH7m3/Z'\n  b += 'GvlkFeCAEcTp8VgRTIa4ruSjedZX3Rll0H0QEnfva35vNY1o4mlAKtC91WGCU5VGDLBpNqnzQoJ'\n  b += 'alXWIHNhnes39U6Wh6rlTNU35xyRPnL5ZtrB7EJS2sY3H1vpiGQ5j594FRF9IdXIQ0HM1wLGMIj'\n  b += 'NGx9vcyT6XkQdvnzSzNSCTzhVWUtobfv/w3uzwBWoObeWCJgTApi9OWSko1n8DNenbZKO1TqRQu'\n  b += 'WMEdFMFBERx+LV+xCHk6mzmdqZedzrWczvTLTud1nM7MS06nwpzSbD6o5pSaD6k5rebDas6oeRw'\n  b += 'mbXwB/vLN9e46YVmdhiTOduxiF90Og2hZHeQ+2GgY8mwg91pyoSPayfWZ+wBCAtZSrvXcj/ms4y'\n  b += '1gq+oYPeZnwcgpfCOFLE6zRyEDYSUpJH+GPQoq1Tk9SDDA2IQraEi0ifmkmmfUfErNBTWfVvOsm'\n  b += 's+ouajms2qeU/M5NZfUfF7N82q+oCbzt6JR1JxS8yE1p9V8WM0ZkGbTTm8W5sad3kn1P67m3WK8'\n  b += 'Q4x3inGPGPeKcVCM+8UY13JoeR5Uc0rNh9ScVvNhNWfUPK7mrJqPqHlSzUfVnFPzMTVPs6hzTv/'\n  b += 'HYT7kAcfCBxhY0o/J1GN2kQ00F/lD7iNu0sguS1qwL7g4zoD5j1YvMl9w03AsdWRAqMyHg4DzLh'\n  b += 'ixReoDbAc+GAXxVH8AjONpDVg59FHVfFSNNdbzdJQ7AKbtNDJfc05P0t7oAE1w9As4qQNgVEcy3'\n  b += 'XkjeoQPltyuZHBfGSBkHiFdyaxUGk7mOXdZaRxJ5vEVklm1NOdWLc3pSynNs6uW5rFLKc3iqqWZ'\n  b += 'u5TSPFNOpp6X5lFNxjHJBGO0Mh3FoqTJQFmtluZsIZk65YhXN/g/Lf5A8+WUffDVkZdzAGjCkkG'\n  b += 'EWmIOHqNEBY8C8E1v2Urra3tUPdq0MrIoAH1JwQ6HVmnnK8HVUnAvh/o21C+FSsru6BjgEPIQWg'\n  b += 'w6+8FfHLQveEkdRZ115TWRit7gTh9zGG2OkpCPCpWEtnlJDfsB2TPHqInLIlKNUdrSb9J9MCUwe'\n  b += 'oq2vgNAxdp4gvHqiKxEL7YQwRqj+/kulvYCB+ImbQIOsBXgcBSCItThT4VIQEiXHbTtd7AbO5jU'\n  b += 'sOE8SLuQjchuY7xJN8iT41yGE+Q1MHkCmwQ6I0AelI4fm1gei2aDFjYzLewGfFw3PcQ8ajSRwYx'\n  b += 'oYmMGRZromIOWEWt9kXflve2G9jVqk7B+da0n/3Vkt4qF+8hhFQsDYMHypPUCbaFT1LpclcVLFT'\n  b += 'DzquaLGPsQl0OAM4eobO0DxmXCpwrhD0k4h5Af80z1YLfUk21mkI52eVZ82k0C2/Qyc6K5a5Drw'\n  b += '4mO7EAxqcfBpTZ3nZq7foAtgMqjRq3zsKhxc9MvrDSmEAKs4+oqza2cDzizUbdYS3MHqzZ3RUkT'\n  b += 'KsEiIhbtf25yh3Gn/Hb6nCcdD+wTp8bTjXsQACftMegURhFvpBLQAYzDbpSwqgnbVQjbJWFNE3Z'\n  b += 'LIewWCWubsFsLYbdKWL8Je0Mh7A0SNmDCbi+E3S5hgybsjkLYHRIWm7C9hbC9ErbdhN1ZCLtTwo'\n  b += 'ZM2F2FsLsobCNT3kWcHRQHF9VvJ8JOe9j+/cU6Z+Aobf6WWvtTD1ejdDy5KXYFw5BsOHFWsrkvz'\n  b += 'Ffa12NXTkcYsJ+YU6YFpHAgAZdNt4CEgrOjuBebOBkGLHEF91wTRyTfuieaOP9BsEjcCw2c/0Lr'\n  b += 'ngUED0/a4oaG+yaL+okbuuw3YapS93S9w6i/xr1Y66SbyVU3+dOxrG5dE+xqmLyrACowrll2Nc1'\n  b += '3dLTbEm/MZp/lk7iI55lUQpb9EHRukxaQ4wxAgEkxwKaapT/y+vjYVQuztykzDpV9KlJkSooT9j'\n  b += 'oVyzMlpDJATpZBkG05PYgJCd/3JlM+8tvATL3QPC7Fwz4aWsmlYK7IHDL/be7Dv1vIZ1/Jx1sWp'\n  b += '7WGOD1riNO7hjjtNcTpW0OcdWuIs34NcfrXEGfDGuJImyBei7rZ4jnpZnO2m5nOJB3MdCPpWqYD'\n  b += 'SacyXUe6k+k00pFMd5EuZDqKdB7tIptKXcR0GCTo2YZml/oVwvm3Zw1xetcQp72GOH1riLNuDXH'\n  b += 'WryFO/xribFhDnLyhi77cyFlv4jIH+VG0/fA9WOEQmw78Ka2HzwFng7+YZTgsHKEx9QIIQG5M5j'\n  b += 'kUT3nT/8iRS3OzhMrvUoR5mUqR9XCe5VAVnu3+iLuEKZzUoZSx/A7jNgspXLxCUTb/j90VirorN'\n  b += 'M0kFDyZQlnZW38LZS16r1ZWLE1VLV7pExlmVdsq8HNEqlsHaMEHZway+cwwITZfv8xd8+oCs+3T'\n  b += 'jtzftDO+9BKn9c1obV3uv7bgtRuvWELf8ca/Xk01Z+oKLWyu/rTPuQWbq/nI3KxxpzDy6QH1Sl9'\n  b += '6DaN74ZjFXqzmxbrQ/cR1CNs2h+/m2L2bsSF6NR62ZG39Wr4KeHVok7lH4+2JFd2fr9nlu2G5sx'\n  b += 'OgA8nUNZBYroHEcg0klmsgsVwDieUaSCzXQGK5BhLLNZBYroHEcg0klmCLVcX6nPE7ZyzPGsuis'\n  b += 'TxjLGeN5WljWTCWp4zljLEoKBYLQytVeEWkbWRV6w8NO+ICfZf4MUPcgttQbBVzoMQ3CPd5+7dR'\n  b += 'tFnQVrbJqA2Oki8ZEuR3WK8mq5AwuUbUiMB6LVmFjMkOAVqH9TqyCimT60W5CKw3kFXImQyLTgt'\n  b += 'Yv4usQtLku0UBTtqC43vIIWRNbhRFELDeRFYhbXKzaCiBdSdZhbzJLtFFAOv3QpBGrK8VHR6w7i'\n  b += 'arkDm5RfD5YX0d5I3Eugd8cPNO8nolE/hRtIOGxnVIzuTAfGD3bp5Jq4UOL9/6Bl3jxTHN4qH46'\n  b += 'via+Np4R3xdfH18Qzwcf1f83fH3xDfGN8U3xzvjXfH3xq+Nd8e3xK+L98Svf/EU6TTrMaeVlASl'\n  b += 'qhYHLkNwibepUoCjQO63m5FVTPVn+VDQVTEGa/G412Ck9nBcjFX+Ck//SR8tjGT0axIB3sekHB5'\n  b += '9xahm3Dfh4gsQPPnxzq7GfgBrkTIZF5jdUV4cF1A+Xw8s4iv9XOYgSVMahMeO+izyocKESO48ln'\n  b += 'zWl6Wu/DsT5xA3M8IPAWsafELerQI2HUlUIHmwtEVcF/EKMptqVgXgTna7mT8m3iwRJq2XeJQWD'\n  b += 'chaNixgIEXIIMkONyYG6imScuGMyezo4MeLBN2DGToEudtHuEZcLxLVtGOMGzbieo1Y7awpRYUr'\n  b += 'OVNBEXlDQ0Wpm9pbrBEwTZoPDc6J38nJZHPwV8ih2llTih6K4mlR4o30z9/kvavU+bVVi/0eLbq'\n  b += 'u4NrNsEnrJGapr3u8FvmFnsgrUyx92C/2Yeh8iPPcm9RD85zFdYifn1ucqszRXmGOLuda7NG+fh'\n  b += 'tyGQ+VRs8hHouh9W/GZny1bWhvV8/ltgtMo1sQMMcAgPUZADDgBeNtVSJWGcImZWEQG1FRb9B2a'\n  b += '0mx1HYsJ1QT8F4zeEWijdFu+ct+QToT9jh/bC0xKUUMJu0fFJv1RXxxnesd3Ygnw4nAoJSqZrpK'\n  b += 'l2ahoEuzkMuK6YKyZiGR5g26NAvJhUTQpVpIwD2CLt1CIj8dlJULKe4p9M+JLpUq1K64Rg1dyLA'\n  b += 'NfhqMi3YPKmux5OGykkMNXdhdcqihC5eVHHu6cHnJ2be75G14dhV8Xgq+4OEWCVrlRLlRW9TNQT'\n  b += 'WRa5TLNay6mHGe988ZzV0uq5dbc+3mVqrdrLdS7aa9FWvnrVS7JXeF6vHpjJXLNWBO+6KsZQDac'\n  b += 'CJWNuca1XA1o5iozhVyhQJNjqKq4Zqs/EwoABiVMwUKzK9KgeoyCuC5udpNgTn27KYAT3fLKDDN'\n  b += 'vt0UmGDf7p7pdAQ1RBp4Qhs4hpoe1lkksvKiUic0OsNc0RWXE0m1ydVyxUOuaHKriSYpdBOhxoB'\n  b += 'RzBPKIDjr5kRacFcjUrR8EOCc3k0kRgtbRiTWeLKMSLPs202kafbtIhIjjLAmt81cdU+G8RBUIj'\n  b += 'VZr5Jr9La1TTfpY3I6UPlk6HjeKeteW899zoOerNB0Nq9Mxw3cPamzbbTD7YxR3Ndj6bhJDiz5c'\n  b += 'HPW3tmwPVvW2RYqK3W2W/ev0NeGV+pq8Qo9TRRoAUhH1W0B4FGVczEEFr92JdK53KTFxHET7klz'\n  b += 'TlKDuZdhs0T7VNIj+B93U4/tY9VOrtGj1ms0DCK8jVZaz5qpXKNGbZ1RJyitxGrUNkCfFnq7pNE'\n  b += 'vSqm0laBGrV80WKErSxNsNDruuJWgRg2ttEmmBMlok9HXpq10vpK30r2FRtrpLfiMNYwngpbWp5'\n  b += 'lXJK9DOy/8ZowzKfZAXl6em6WkW/IiNjFaTeFUU9km01cp+7M+X8QrGd3lZIQWsZByrwuRXFVht'\n  b += 'bk43lkRV1O7smoRq4maQhTKZS1iDVGhyZoXmjb/ReRfZ51RrlHzFRbzh5avUHVsuUbLV9WME568'\n  b += 'hpG9HSYVHSY1m8c5nzEpJQ/V0lXKIx7nRyLJYldBoah8D9wkPDpz8FDx853eeT8bguYA1vp0vwD'\n  b += 'uLPCWBnsRaIko60V2oH4Lj+eBgYXq1osMcAoFqtgvAsBQXQv1W76o3wokC6OfQfIJBLspoJowcp'\n  b += 'Oo9RMNYYzcFDDGHcToYeAq4mgn9VlYuSIJWuSMiYCVcq1zNx/dwHxZjmyynJvcHUkKYyi5Asb2Z'\n  b += 'DuMOLkSxmByFYyB5DUw+nH3cJPbxr3DTW4Tdw43uVXcN9zk+rhruInvGWQXS6c68qWTM15UUz/7'\n  b += '5oUD95xKtx4Bc+7W+Loj4/KeOLjHvVviVsn72iNQ1qT+7xD/JvlfU/R/p/i3yf/qov894t9P/kP'\n  b += 'Wf9se917xHyD/1xyJt4n/ZXvcg+IPbVBXHYkvE//L97j3i39M/lceEbDP8TTe446L/3by335E0F'\n  b += 'vH02QPw3whYIgCrjgSJxJw/R5wSXHADgpIj8TXc8BOD0BlDHHpKSJI1hRU3ti9iYgBKh5Ot55gK'\n  b += 'SLxfAdTmLVjCFvx1j0sh0JB7+Q2KAdB7G3Q8Cg7TMFiMETDthWC2+Vgmr+JGHlwfzm4n2FO8+CB'\n  b += 'cvBAJr1ZUHydNDrFfUwA2tIqu4YEFi2tsWs7USxPLibC5q7BYuLWNmht26ztMmu73LBa+/sFF+b'\n  b += 'uUX70x9gYHVOaDhFNvVGGhonZV0Fo3qm+VfGtiu896tsU36b43qu+bfFti+9B9e0X337xvV99B8'\n  b += 'R3QHzH4UvtegJ+gwIZB2Cx2IsjBFzOATvYowqPy9hjiD1q8NjGHtvZI4THIHvErN4AMwPG93YZ3'\n  b += '1fK+L5KxvdrZHwPyfi+Wsb3NTKwr5WBvUMG9nUysK/HHVz7lIGfQ4e8TgZ3JR/cFQzu683g3lYa'\n  b += '3Dvs4NtWGtzXFv0Lg3uwOFgLg/ua4mAtDO6ri4O1MLiHioO1MLhfY8dqWhrcNBmk4n9FeXDTbHC'\n  b += 'FBNxQHtw0Hdzw4oObemLqncrHd/1md5gi3wj2hlUGeYUXLzq6F8drdXmcW3Cqv2z1IV/hLR+tKX'\n  b += 'bkanA8mEd4ktkv4tWHfkXWYlr+k9UngApjE5rh3ygN/2Zp+Ld0+F9RGv7pKzX8e/anlVHah/Swc'\n  b += 'srRMaG3L2OfQny+4xs18ncy+sk/MP6BCEfz+Cf/0PiHiqWJGYD8I+MfiYwzzwHkXzX+LLNck1mA'\n  b += '/GvGv3azvC9UOjIXUJjHc4EoCJTZAM/yz7B6iAaCMSOIAineO5N3E96YF9KmeD/N3i14Y3ZIW+K'\n  b += '9wN698MYcYQAcnfZjDqNWDXfEzpiVlYTR1P2EwdSrCWOpNxOGUm8njKTeL6DvA4L5PiiQ77Egvm'\n  b += '8XwPchwXvfwQcFOo1hv0Eb2c20xd2E7Sw2utgC0+60XbwuZ451V25Y70vdUTBTxvWxOBiLw7E4G'\n  b += 'ourY3FtLO4Zi72xuDUWN8fiRhHKHbjc95FrlB/PLrtvdIxZIJl9rTMKIaLGl9tucHQddkKLvrlu'\n  b += 'mnI7ZuvFilCrctiZEW9ohFSfk+LTBgup+JwWnwHaEasP2Mor+KoaR+Jznq8za5qEB0ddHGfZ0VC'\n  b += 'HfNjOP5zyCh+eLn54rvjhOflwIP9wpvjhmeKH54sfnpd7gyk3rfPY+0Gc0aGa9F5NmM/R3/r1f7'\n  b += 'nw0Ykv/eWf6Llwhn0n5977qYl3fe3492gmYKwbOfP1f37qV7/8pa/9k0Y9KxmcceW6Ycbl24JpP'\n  b += 'hnQWQZbffI+5/DBAncbch4hv/O0gRjXbf3KhTuzYuFOr1S4k85KhZtiThY55yw5xfshcFZRabVY'\n  b += 's25BGTEYrK72Trrjctl03h1ndq0FVw8aoiCcq3UWWrv1ouUMq+fmmxrEQyhVMK5fvIrnKytV8Vx'\n  b += 'lhSqeXZH+u1DDHq7hglF93VSV9FSG01wqc9abNTToVSXWFON2IcGcua5gRcn9/K2rVTvpgV5VvR'\n  b += '6Z8Mqam5lKU55QadFo6K7mVDpH6WxgDeVM2fv5OI85Q+k0tQY6Da1EpoEVqFRdTiTOZIjO9W0l1'\n  b += 'LwhFKtxxx0g1dHhwyUu9eSOsN/S4awHGjb00D1n7i6ahVu20yUKTa9EoRml0JKrmtANhTZq4yxU'\n  b += 'tHHMhYaexd8pd1N9Qnyj81tP631MVFr/7bDaRbSW2wRoNsfl/XpkRY3d1Oovelp9o/0dbeThcsD'\n  b += 'UcX6lOp5hMpg6znbVsXecH2cjoZGjCq8HjGZy+v4uEKJPL3iWKnrBUyvcOvB97ga9qBvWe7pNel'\n  b += '0iWtqroA4lrKrLm3rPseTpvNKfd/3zHorUawaHVxwcfNECvmW5hFisdF2N43u+/W9rdWOtrSmuK'\n  b += 'FKXVon4dgMsANJEvk4U3LvGbSbtUh5QZi7wphVGl0wNQOhxX5bpGT9RJsvs5E/NV7IzP2XBsgUT'\n  b += 'dZq3Ow/Ld/IkFfOXUxzwkC9g2QJ8Om8wxR/1O4K3AmhgP+Gt0SOa5ayfhArdEr6JMeACxsvGJUi'\n  b += 'qq2eOnV3F/Qi1hLkY6SrlPFfNFwBO7DcEKburOAKXOufL9YsIaZ0V7QO+hQ/GCwxr2ZA7fouhPe'\n  b += 'szDmt0InVEj5BgaEd8iHEYQ3vBN29NgM4WduVvAY1DFaJXZVdAHZda/bBoKcBwZM3tchMTqfoiz'\n  b += 'cNgaC/6uHV5da/x6l7j1b3Gq3uNV/car+41/l3sNSZmaBWfnfkO32t0lfLVvcare41X9xqv7jVe'\n  b += '3Wu8utd4da/xb2avsfhBWsUn/tt3+F6jq5T/a+w1Xmi7kaD8LDos6A3gdJbNi6EaB5y/PCklVNz'\n  b += 'KXmGdp4l8RHUwLlgrjNvJcHYy9/N5FjO0gAke8+wVlPh4vEYUlPh4qsTnbiiqcjrZufknKjYuNM'\n  b += 'ktFj1oYczOFj0WjGMCsoS0xGZnisHQEjhf9KD1NjtdimEcs0iAdgW2irn1jFOs7bzD6gMWGbXp1'\n  b += 'v1Z3P7JAOjOHpZQyIhguWL+HpqvE0gQ0uSXCILYhFP6yAHi090ZKwqgDlCLQxWQvB9wbzy3UBuP'\n  b += 'OFMPIvfayOvfQ3Eka/dNUJeD72edPIFsQEUiWUEhwMhq2lG6EpEssvtZq5CD1t3VYWJmS/PC9+Q'\n  b += 'NubfgZ1fqK98TJMX8N2+FLgQurFSUCywlpYkJM6LPW6jGTsNAqcxf9AV0LSW+dizAxVAJ0S1fct'\n  b += 'EbhmqWkNzLgQ9WoEocrImsaJycrPMrkXX+ksk6vJysN+Jn+CJknf92kHX+kskaCFmFkvBFWnaeY'\n  b += 'OY6JVpH5iLtmeyq38m6z+5Hiai4MtmyJleJFSox+hlS4yLEmOgmButGbDBNDgsxsE7xdlkmvtUJ'\n  b += 'IhWQ4mOaM53NFH/eKRTfKRWfZ8Dq8sZsMpTI8vILb+BLaU0ttdYhL7yIHkNhs2btK3ve8qyd1bJ'\n  b += 'eA+1WyV5681BHmzzQMjCL4NBFmg/sNN++5psvNd/sizRfvLz5tjPCysWab/YVaz7s+6XIkeY+yL'\n  b += 'gwl5T7S2/BRveitZIfdhhYy0V2WST4QVZnayrrdJV3fcU1voJ6FZb4CgZ5vsIziD0vnw1ZImn38'\n  b += 'fV1TgA56Dl/f1qjJbO2HRVxsvAgubdD13YlDramIZ27ocImUri6KHsIWn9FuG46tz6cW2dy6/Hc'\n  b += 'OptbH8mtJ3Pro7l1Lrc+lltP59bHc+t8bn3SWkdkNxKN/PeP/fgL7/vQx5b+gjzuh5DEI78x9fv'\n  b += 'v+9y7f+7oTu9ecv/j3/zWFz904psnPkzud5L7b586sfBnC3/3sd86iu1QpFiFERoomz9Pm9S+9v'\n  b += '8hTnA/sx0SUezTvi+Lk1B8koA26yyYEWZfrnTSRnYr8HyzWztpVcrIhi9GVYymGG0x+sUYEGNQj'\n  b += 'FiM7WIMibFDjGExbhRjlxi3UDH+gfdAIdRuc6k/FWwBgA/LtIVQ2QdOu5EJZ2cFYopHUGbvIO5h'\n  b += 'gJt232vZFwK4sP0b6wfzpiN8+Z++8dkf/a0v/9yA9IP3/dL7//b0mZkv3Srd4Gc++qn3/eKf//0'\n  b += 'f/Y+KdINP/Mrn/vgDP/aVZzYt6wVgzbVdAErlYF9iSNWK0OfvGTsgPCiurzo4fgA9TtzyWZjRIa'\n  b += 'ar85B5lgE3ZuxJJWKZpAgHH+vDt27l0wygYZ0Op/9yOzwUvk/T0WjBVFc6cSML76NT5g/ilA42T'\n  b += 'DcbOIg57mA2MfFCNDoG+33ZxLfApJsN3Dc2Jix7EbTbriGuL3HfuZa4VYl7z1riNiXuvWuJ25a4'\n  b += 'B9cSt1/i3r+WuAMSd3wtcQdx8jyYfevChdeP0oijA0yNV56X36x8ko5w8D/AaKuRsG5HuAQ4wLi'\n  b += 'rkbBtR7g9OMAIrJGwbEe4VzjAWKyRsGtHOO4fYFTWSFi1I1wEHGB81kjYtCNcERxgpFb2GYTPo/'\n  b += 'B5Dj7RdZUlhzvtUrmnoZO50sk8EMwrEMyzBPOEYJVY4r5jLXG3S9x3riXukMS9Zy1xd0jce9cSd'\n  b += '1jiHlxL3Bsl7v1ribtL4o6vJe4tfCXFGgCAS41tWWRmTl6SIlmSIlmSIlmSIlmSIlmSIlmSIlmS'\n  b += 'IlmSIlmSIlmSIlmSIlmSIlmSIrMkkaF7ijeIcbsYd4ixV4w7xbhLjLfHtKX1bmUkzXno2avxiT5'\n  b += 'iUCHW+RFex4sZFH54ymRMy5kJcpgwhaDDNsjtDhqnCZ1DPA0RZmaatiFfIHiIAo3Ufhvfwk1jc6'\n  b += 'AYRiw7AEHtWwHPWNj8Rbitor3XJ3qd7QUMGtVHT90CS7IiLQSKtBAo0oIqYqWYVYOywJzWoaIsA'\n  b += 'NQ9hPD5sJELx04cF2SCG2BgbXA7Csz5gnC+a10CJ2GgKIA+01K3gc3wLKxNTwl+xTOwGe09Gg+w'\n  b += 'Nq6FtfEMrE2v3N/bIhhcFovKYjFZLCKLxWOxaCwWi8UisVgcFovCYjFYFIGlKtbnjN85Y3nWWBa'\n  b += 'N5RljOWssTxvLgrE8ZSxnjEVhbRyFteGbQ4agiSxMA0AQIoVoELSVQN27GdQgKIF05MAJApkAGJ'\n  b += 'GqgdpgIAQAd9StzZHdhYURAeiDI3ha7LcyZMhVFs4ohwsJBP2ovgwzxLFIDHVNdMIiT3CRVoNwy'\n  b += 'bnL4xIycNKnACChQW6oWYwMHQmRjoRIR0JUwhypmdEQXWQ0lLM02YVFvBEDCoLnBAPe4QHMWAFH'\n  b += 'xtYWMwQ6QyjZIq86qxZiMjEQMACAQ0GFaLAeBSTUpKHSsAk1JSHadPkUA/hRbUQCUEfTRmrbSDR'\n  b += 'nXDylGkApatmAYlJEyDs0RK6xPIUAfi6rit/JW6MAbVKzERsasdpZU4oRShLl0BU5jklQnKZyMB'\n  b += 'OZiXoLLgOvtTKYSU8JzATzkeDzhOwOl0GaXFWANKkaiBROrapgJAI+Fai7PErXBmyC+L0W4iQHN'\n  b += 'hGAH+CmBja0quUMYwH+QWhL4U0YRtq0n2fASAJeBaDXOvaE2nUgZQsYiV9ALbHwJq5BLakbeBNc'\n  b += 'qq0pRW0/s8KgT8vFCI8kz35bzRYZkqmQgOTkSqGqBQAcIq2NFNlIKFChzN6yMocoSiidGqoqGGz'\n  b += 'FlWIYIncMTIvXBdPCtBlbS0wXw9ntBlv5jbZbPboZLzfD+9OQH26OGoXsVjE73/A290KFCLOJtP'\n  b += 'a2HGEPaextQb69iUfC5p0tD6g5h2l8N7+vRaN3ZEL/4n2tAHCiNzgDabDbAURTeydLzAfZ3RgNE'\n  b += 'rV9Z+ptTZ3sXkxMjZH4PZQ0eZh05isafr+Et7vCJyYcjTAuEarLIpgcjkgEf1kE5OFspSAXQc7W'\n  b += 'tH/k9e89QdNtBwLb7YNZ+4eATn9Hi3r2yNHYOTXy+gfSnim8kT6A19B23Pi+FjCGtZpNEdcm6nB'\n  b += 'wk4Oz2aOxSS1bqNyTzZ0IOtmn2/+Zkv5M5W0tCJb7B8mx8A8qXd5SUbh0A96v30MFjqfSbUfSJs'\n  b += 'wtcQvGQLztyDiQOEzc1hGJt3k86YubRpiuFW84AglFG2+cK1+FoGZy2QiD0mdnkfENDvWuzv7s9'\n  b += 'aOn0t73pBtHjo4nQFRo2xJcfsSWjPxtxg3NIB5ACZbnElMpLz+S9KCNp5KEiw/R8+xzmm3iMfZB'\n  b += '/8jRyZHXT2lmW4+k/ZTLVq31FSvWdf342mqatsdHHKA39E6dSP3sxz9dEbWXz1bezGbtLUBAz4B'\n  b += 'yVX/z1majkbkZ5pVz0Zupf1DYsxWyUwdp1nkwPfi6N7ewobnwxGdvgNLqMOOl8tQXfI1PMdgpn2'\n  b += 'TVDMvRxMN/94ynESZ+97M3iAei1BrZ+7/yRCUbzGZfeKLSPhXQ3PAkPLZlc9bjeYkxbz1mv0oeN'\n  b += '2cL1uMcPHZmi9Zj4pvkcV02903j8Vdf4kRnv6weMbpgNo0PftuncD/DvDv7Y6EWc/rTFbiojA3a'\n  b += 'DfTFl6FzrYs3PZAA1JB6tdOhk8ImmvXT8TgZj+PxwyD0YLzugaQFJfXdswtfwdNR7QcSbNX6zHt'\n  b += 'xCqlZbNxwGTQIaP44uofOGKdi6oobeMb5Pn6U59dR+vBtNOMMxo3DtJuPOFLvvsShgvQdpj7qjC'\n  b += 'coUu+d1NeOgjOicdcYtdf6mHpRG/wW/eMUkcbWhvHDVJ9WDCniyw/TeEoOx+nhOEZYLzNmUH3c8'\n  b += 'aSf4mwZjzePEwEo8rZ4KyJfcThefzhuH6ZYyfqRStKkqjXku3V3Ugp94/H6fWNQgekkDnqOx/eR'\n  b += 'UskmFYIKz8Wm+PtoGumN11NCyPowkbeVNFCHfXg/qQH6rQr9r31MA1DgzVsZXjDxRpwE26MGSkm'\n  b += 'jjNaC24g4/SP1IwnrhO3ggyY5aZNF/R9kjlACJqYT9yAEUH7rHkib/NjBAZ5QOQDCx+F0c7xxX0'\n  b += 'JzPFP4SNoXN8aTdky+d9LU2Id2WBfTxyHnp4lSkhuJvgAwWXc42UzdpknUJjqtp9IijKZRolNfj'\n  b += 'FFMtDWk8ptVRrpjtZko6HqiPZFKS0CkQlNuPEykahCdEAAaRQ1To4gGMX5+IInw9JgtYBRszubt'\n  b += 'KOij/+e+qX2eOl5f9tC3iq4XEPYJnx8d+rLj3zKuZtJo0ALpvxETP3UpcLZsBKdQe18Gtp0G+k3'\n  b += '78J1bobmYryaaXoNaov8ILQQxbHcdiVvj34eKYi3HpUUFWk8rrOQ3ru12+Av91qWta9JCjs4bif'\n  b += 'AtzrGFDkbtgBzJ7zDapJSj06Be71LXjwdHxm1ewYp5OSYvnDSGaYfQCwvflISMJUbGQKf9h1T5T'\n  b += '/c61/CziyfY/u6Q+3b83IWfO/GzFz934Od2/LwBP7fi5xb87MLPjfgZZtlglhNmmWGWH5arNr6B'\n  b += '44s5vq+z8Cly6cd3gfpObO4Hagx+PcwwldAnSztZgFLW6BTvyZUBDvU1Pq8/ZA68U8byoLFMGMs'\n  b += 'LFXMWN5bnjWXJWJ4zlnPG8ixbEtbafbeBd+YrBGz5awb9OjU41OIHBQEta8PBlRyHSkjSrn7MSK'\n  b += 'wm4Vgqncdy9DugphUzCIoHWQBhAA3jwGhSX+2wm8fBEbAHL4zPsWqMc/z7LP8u8u8z/HuWf5/m3'\n  b += 'wX+fYp/z/Dvk/w7z7+P8+9p/n2Mf+f491H+Pcm/j/DvLP8e598Z/p12sJUech921lbwqHhODgR0'\n  b += 'u2NQD1M/P0kAbMMgKo6tLaaekwcUEvRBDygOvsTGu3ohqgdO51JotRT6UFdosxQ63RXaLoU+3BX'\n  b += 'aXwyFx4SX6ht/YIMmcCk40/XlQCnd412hg6XQ2a7QuBT6SFfo9lLoya7QoVLoo12hO0r1YU0xkR'\n  b += 'yhph1aRamRoaamSo1cNY1M/b6YxrKWq4pyxO23gfekOH4MDi+mDhMQ6EQiqix9wWe2AO6BQrcL3'\n  b += 'LD4YQwH3ZoYBMuXIdzlO3E1ND2fMZ5xSLY1qWsnzGviGqTV0NSkLgfk5RGDZRGra4tYxam0anq1'\n  b += '9h83++aFBkdytfMg4EEETEw8MhfZoAc1aApB756Ymx23QVMa9BCCfnRi4fNHbNBDGjSNoN/8lQ9'\n  b += '8MLBB0xr0MII+O/cLX8+DHtagGQT9/i//4bvzYsxo0HEE/cncb3wiDzquQbMI+srZv/iJH7FBsx'\n  b += 'r0CILe//Hji3lej2jQSQT95B8+cKcNOakhjyLk9377zz/q2KBHcUsX8LE+QIP6pjMwb2fqAtRCq'\n  b += 'N8jH1RYRRHNP2uIGWT8uL1dZ585qN0JWMfnGocA7c6gW73R+Mce1xOBkWmoQN+ut9aGp5E+ZyMA'\n  b += 'M7nDOL7K+gh4NfGccy2DJOsqZc9517JRAslNPBeM8AiVVXwmPGFEkITYEYlD1OFU1WGER+yH08U'\n  b += 'P54sfLhU/XDLCI/bD2eKHC8UPGQTWfDghki/TbhoZpnw/Z8rnG/nY7+LKd5jNxS+z5TuMvOJ38e'\n  b += 'XzZT0yWHBTZqabhYpCR8H4xtP6OBTCCjRnKM8GwlXuAL4v9cdjX7DuVizcwoqFm1+pcHPOSoVj6'\n  b += 'ExGx3MM1GWo+IZNLq0W66SRaWGe9BaCgHDJnMUTzFbv5KigNcFHRBgwV3vGpeYLDjayjkG9dBjz'\n  b += 'ko6GF6/ixIpVXKqsUMXFFel/636qYYNrqACPii8ITQgCAQkIR6HBSUMDES9pI8ZeIcFpIxvTErZ'\n  b += '8fOtq1eY80Ctg5i5H8TGVWONKpWmlkqKu9hgUSW58SmcdC0MwZSdYnsUxcIf4eA2EGl6JTvEKZG'\n  b += 'ovpxJnMpz2i6iDvBUJpUSIZgNXkoqF788Y3Ng+S4hFD0RksSFQykDrWrkH0KpEopmVSDSrJFIoy'\n  b += '3WWROu1dQREFNeLFjaTsX/vRVtGLAThGLjQHm6nce5+UKqg2JI8sG4laqtczDphX2sjr7StHHKO'\n  b += 'AUJuCGynVHLJG+cXMqnkmZUqueAJVqZU8mRXJZuoS4hGBJGkmL4B+4SyW+9uUKKHBVQcgzvaayB'\n  b += '8QwX5rRNlWhxjlwps9EuEloiPBCxc4jP1qB+JvIpjcFYjrRJ3/gkfRWqa4eGV4TdrqG/IEh+OwR'\n  b += '+tSh/U8rZR3pZWd0hra4or4iPSLD6LGlBZAmkjX6eKXhEfMZkMlPLY6Q0UuTjfJHrlOrJaucyem'\n  b += 'YNzKgOnb8A5nWUMuA6r6gMDrss8lF6GbRp4KD3hofR5EZdlUFgoqbGopodFgyP6YMBFY95Jy3OK'\n  b += '4zWkLhh+jJ/PHbxNbq805nqdQZyhF0Mjooll0JE3y578JQkrv7yjiGKTprplS9rkVxwBSpYUXA7'\n  b += 'T1Pi1tVdW1bStcWcDnAnbmibUKqlTdqG+RDPJcXRJEg+tNAb14YpFc6gT9MTFhF3zvRbG12zOcl'\n  b += 'pngk66xfB88cJLRSe/rdbvDPudJr9B68eg5dkc+W2zfqcFyPxkkAvDkHXOs8WWX2Y85eKAApvjz'\n  b += 'ZZiKGydn3v3qYSMuPBeJbbd/HIlMeqmevrytZu1/Zn05Y2ryTb2t36m+qyeh1W898kWKF1XKEef'\n  b += 'eadTW3dDSOvmDSGp4RJhvfIF9BfqsT7u11wXWKuHuIuvfrYuTrFGooIeImrrNZZoUlkXF1OXb4N'\n  b += 'SvzM+h1Si2M3O5ax9jF7O4kLWZ4p9zhZ8JthnoeCjgrtnfNvA82RdcvJiO9LZ94kekkIRG8qq4E'\n  b += 'K9orqgH6ShTAqiEgYxGrZSc/r0iZOba/WJSPOxn5Jf/LWyeq+zQZUcbSyUYUO8UR9OxbYC+Yukl'\n  b += '71uukmmh3SgUP5N8YAZ/j4ufsRdZGXROhRqISwrNcp7kxmrrIRpY1xMWb5r5d1MXYdU2JZ+w7xB'\n  b += 'FthnoeBzhn3OFHxoP0XJFDx2cSOeDm0jzpF1mK/nDEX5CdxSZo5V+YRmDrEuPC2LraiXo2ZrMqE'\n  b += '1r7GfaSvWscQ28TfP1vCXmuYTL7swHTo0S/RooChX24d5WXlLKvYT479Z/Jnkpntu0OSESaipnS'\n  b += 'FPJe8M/OZh5ymjHgTpYXwDX3S9prXEafk6uldNy/r5hc5WswQz5BQ58nwyxhkgn4YhTp5PwDjR5'\n  b += 'FPvjFOYekMz9eIqeVblgvq0BnJdEipPQl7ifHaDT836hfodVi0nrutCU+G5m3YJutCslk7d+kWm'\n  b += 'RTidhg6CCg8tbCEGVmjTvJ0b1s9MI4shVuwP9Dh7sGLPVuXW+38a01f9fyrTFyuU1eWlEddlJ+L'\n  b += 'zLTOO4+RFp+hDqmO2qW6zG5F483J7EXT0G1/0yoZy/yRTtK8qcERjAVxGN1xytdUOl1xj9cMl11'\n  b += 'oNcckOqyMuuc5qiUuut3rikhusprhk2OqKS77LaotLvtvqi0u+RzdWLdFoZnTGJTdZrXHJzVZvX'\n  b += 'LLTao5Ldlndccn3Wu1xyWut/rhkt9Ugl9xidcglr7Na5JI9Vo9c8nrRJJfcqlf3oksOmPq+1fEq'\n  b += 'rkOqtrdX3YaZKG8ic/nP10eFW0iE9TCpi/eSjm0Ankb0K84lEsV9cu/ZZl+ZbJCXzMKSq86g2tg'\n  b += 'tI1CljZ37mF/WOCudyBH2IU/UHLOfCBLl8X3zxAH0D2yq4NZ4VQ1dijoFn0OscNO4zIqvFGLhBf'\n  b += 'nCV0WckpehQ/nWVnygja9qKZvHRCqBpcO8dR1SZc2Rus1mUlsz6Ngyz0e2lQI7bDgFocuwIUseX'\n  b += 'C0EQ4N07SIxakqOqob4uhhG1j/gqmgMN4/RLn65zD+AxhLtCHXbTVcnR2gJkXecYBkRpAtKp5Fl'\n  b += 'umm7nele4t9b8JdO0nrxB6FL0+QX37q2JyZfL3kDYUpkOheYw6wqLt8wh4Wib00jWl5Dq9HNz7k'\n  b += 'XmSnxxVMMcGcfKIsXyhSA4YLPrE5+8RyY62TAy+t1cpDzkxUuni8a08HFs2P4yVjLLi2P070GCW'\n  b += 'DOLSMBDK+KBEA7yKySDbV/NNySi/6LpL8orWChQdGjYTwWIHlf9KCJPoOLEnHN9yyHOGwF6udcE'\n  b += 'ahfUIH6CVcE6metQP2sU/qIBervvWSB+qWSQP1CUfJ7SMWnF16KQH1JkchygXqjSCSXll14JSW/'\n  b += 'X0rRSwL19xYF6mcvXaB+tiRQP+GuQFY+QF6qQH03WbsE6peTFf3mFSfrpRS9JFA/mwvUDy0XqC9'\n  b += 'LpC+tSaB+aXWB+uXEmH0lBeqHuiWyF0rFFxpdVKC+uzG7BOpt+XOZ6EttzYsK1C+sLlBfyNpZLe'\n  b += 'tXRKB+dnWB+uXNt1T5djZf3mC1UmOuKlDf3XxdAvUrNN/CKyxQjyKvIlC/ltxfnkB9adES7U3gz'\n  b += 'JJSCQG7Im3VBVDE7MvS8bTe0Yo82euGsiLPuuaSGTvXitUIpS7aOrTrqiwvDzzL8uF8r6HQTMLk'\n  b += 'tVx/FWvHmnZKqquqjCjE2qsYLqoioFXy5DCeREZflWqvytVWLde7xWxNVu/W3O/q1X61pHfLwjA'\n  b += 't0J4CcbLF37WKt4QnbTXFW9FKpfdeHBZptRrofU5gKbkEHkrhgOV68YZIr3E7mozZFHFsqYD5XO'\n  b += '7Z5IpI6iOcdSs1hFZn6ZWvjhRsWATv+aqvwn1HiyQsfhcp0vy3rX/MX1L/2LW8ewhT4sW6x/y3g'\n  b += '57U58ywS8JitaR7YHCaahUrWcUUWqwX95rh5dUSDstLqtZLbBMBKHRzQB7L1XkpHeLl0FQvkuyY'\n  b += 'ibuLI6ylK85dLOrqKHDaWkmxmtY9mjZtQw7Js2TeNydepG8OLG9EYYRdsRFXKfgayLiqykDWGlw'\n  b += 'mnPDf/hsY2NXlxLu4wsVXvBNWJEHbCWd5Gf5o22ni3niiZnircJuCdZWjySOtJwstHWQnvjBfYW'\n  b += '1gfPNKO//2bmXGEdYr+xm4jzzIJ3MEucqj3/bTfLGti3mlfb08KaO30KzSPiL33pyUBC7gupe/4'\n  b += 'ssY9dBAiAQW/IufaFjuO+epryQmssPiWYxAvxJhjU5JU5OQalKeEqlc61fGKUUv5fcSkiCSvdwk'\n  b += 'Xs7n3/by/bt3Suf7TqHRK1Ca0lj9V6lB9zD+do3b7OqkwutIKWoFE3VFhJr+/bby/xqlweMYr2g'\n  b += 'CV3KkKyJjeXHEB1kYOuHHzQmPLy2mPEUAdiB1AavyEqvYDuQpYA2FFxFWrPnHxVoV9mFYAYvyiF'\n  b += 'jrwtIHK7rXo5554q1B4SHeSGvYQ/ArCJixaadQfE9A10T/ZGWHjT9uuQNHq0f4Fgf5wajxdQ7yg'\n  b += 'dHgG5KEWda2Jy2+KoG4H4xevr9I2nANJn18kZGsg2sgWc8Xe0k/XP3JBr7hSzayTtdkE1+aJQPM'\n  b += 'C5ds5tuzZAszxSVbYxbyqqRBdvkPpcwuVzlwKg4zZ/TUeGp1jgZxeCAO96eDpyChbNWMMgt6hC8'\n  b += 'DvhijLwP5Ms6/jA7Ewf40OpVecSQ1mkXHU+hgRW4+pXxKNL7m2W1TXa82p3G5fAsoKit7zdM3Kp'\n  b += 'kLSW8/keJpJE5PZJfdNyYvIGG8dQ3ZxNtZtjiIt6wpo/RECkwQ6g2cj8/5bF5LPqnmM7DWfLhCn'\n  b += 'uRT5Xw2XUo+G19KfZqcz4ZLyaf/pdSnzfmsv5R81r2U+vRzPn2Xkk/7pdRngPPpvZR8el5KfQY5'\n  b += 'n9al5NN8KfWJOZ/GpeRTfyn12U75IIcT4Ag70DmVp7+tnH7MkSAuRpFsulfYdC8rl3/IprtNUx8'\n  b += 'c3d9hZc9IJSJHqRyskRuTmijLPRA7+zGJiMRN7Bg3/YsbPMw86W3bY7x99t4mhd/DM0MFEq4l36'\n  b += 'r4Nsu+TfFtl33b4ttf9u0X34Gy74D4DpZ9B8U3LvvG4ru97LtdfIfKvqCjULCCSyDnQIdo1fhEz'\n  b += 'ekx7M7V7RX3aOYzYVKsIa3KlpilKUVRMZ756IRu8JQELKYO+B/BUqopllJNsZRqiqUEkXrFUaqV'\n  b += 'cZQi4Cgp5gtjGRWwlCq3t5jTi/YUdLBmrKNCto21ZNtYQ7Zd8E01Lkad7x9YYl8hjRAFuDMdAUL'\n  b += 'yzEt/zQAhISF/bA0RI7zSRyrGVwFvLWXYytqjAMJlFrmEHw3gNyaQcXXaPvH9LpBAqAW2ZLzUvx'\n  b += '0/d+HnTvzsxc8d+LkdP2/Az634uQU/u/BzI36Geeciu4UhsDdQB4K4Ba7heB8zCJEfXG7xPqY/5'\n  b += 'Q1MG/zq1N3TtvDj9/Hyn/IGppKuf3FoLrKiSbfwUEoiiJ0zaKwjNyepC9lvjNz7Uk/bQ4T2BCpn'\n  b += 'im9VauzPYn7i/SB7t9hbBAPFn4H4AeVA/iJLKP4vMJdRg/1F/FD8z7N/k/1FYlH8n2f/HvYXIUf'\n  b += 'x5yefuHdUhCLHxPM59mxzZJGjFP9z7N83KnKXGvlZ9lw3KnKaYwpOFK/nryHUebN7d+y2r35jix'\n  b += 'EAlqBUhjrPNbdthfwC9oIe0bACfNb5CjpPNfOzucfmK8y1C3ZT4PnisgcIwHgsugH9qpq5q8Sin'\n  b += 'fkNDeuAJoz/jHxDsABgUkwxFO/RMBmVWxBhHW7FwHt1T8c05hZGQQKfbFa9zT9qyhlzMWN+aWu/'\n  b += 'lYGkU+bnbB8UmIN2Jw/kaSiLQRjq97T/b9AeLcODWuahmML8+ZGWG+R6LuQtbaH0lgaXw/f5E45'\n  b += '5VbOBE3x9R14ex5hzchYXed/xhA/vRd935ONv033r3CXdt966f9l962qPQPl969wr+5Cyq6OvUK'\n  b += 'mz0luOnwGsrHBd/a99wX9przTfhgv+QNqAemEFD7zQf4M5iVXtsHqRwjPlXuHb8kzt4uAi709Dy'\n  b += '2u22gvQ6jV7iU1i3nsWXs57z8uhak7Lk47Qcu7l0PIVeQZ66bTkJyDMWC/+BPTtoKW+4WN2TILl'\n  b += 'z6ITxUnqomR8CQ9CwSv0HNpFQMGrSR3ONqBsA87Ws5PSpWhjUplCm7kVLXRVK8KHm+6Wo02sVfN'\n  b += '2rRoW2UJm5g9V4gjLETaOLDA03NEfcu/L3e3fdLawDCL7hCoymLv38UBP+nioJ+t45CXreewl3G'\n  b += '0Gkw3cdZON3JOSTdyXEob2wTWTK9dMblaRedDX0xTYTdJIGE5YSdedaVW4OGq8QtIWktfIBq87a'\n  b += 'VNWnhYvAdBDiEWgl+dXcK6vvFXE6c0DHkK6lU4h+2m5uHDhG390aPRUzHhDvoKUnhqntv3vf3qE'\n  b += '/LfS+W1QTjon0nZ2+cF48ETm4DgIoSaw4W/BR3QeQlp/9F8orXE9Gg2eSHvxQVviAxkb2J6bbfx'\n  b += 'vXfjoP+OAGA+a+D2I3yvxgY4Nga8BG/+R537v40dL8VuI3yPxaR1kiYxNNv7sh3/vN8JS/Cbity'\n  b += 'Q+OJkg6LbRxv+dDz98vJx+A/GbEv8NwCKh/w02/oPv//8+VE6/jvgNiX878Ivov9/G/+yf//LP+'\n  b += 'qX4NcSvS/w7ABINdXc2/q/90VfPluNXEb8m8fcyxjPufEz8n/3UhU96pfgB4lcl/p3AvYXEs43/'\n  b += '5Q89uFCmv4f4gcS/i+Ij4AT8PPF7uz6V80D5hINH2WcqnZvcSjIoEumwboMQjlgvEyAIWC+HII5'\n  b += 'YY5FAhzWBMI5YU4YngO0Kst3CftshDcNbx11wZ3yrTUOGO6+XdzgnuxHhsWf68zhZpQP71IGv5P'\n  b += 'pdxb+vAQYi1eiqE3RWdO7TMwNEvLbTN7ZLvoYjb1cS+nnM4xTzCuD9mM64XW5ZNNkgjwnmxBRMi'\n  b += 'qYbXsEx0+VpPkIxE4ppO2AqN0LL04SYWgzkJdP15I4nXp7moxTzcoppO53cO12+PE1sgi+jmLa7'\n  b += 'yeXSZcvTfAxicRTTdrTLzMzQnSZE7QYppu1i20pdrJDm44jZ1c1wYIvgvlLnmmlHJTo9BjYTbo3'\n  b += 'dtjOaLsmelZK3094pPAq0THy14VxuUNz87RVBRM9XicCAnYfMMRCo5EbAmOi8eAjKERYLRVNzDZ'\n  b += 'qaa9DUXIOm5ho0NdegqbkGTc01aGquQVNzDZqaq2hqmI3vNrDfLGjJgisWULytkriR+hp8t2STR'\n  b += 'XjDw4aWilYdg/KGBw4tWbLVIr3x8JXS8fCV8vHwlRLy8JUy8vBVzLeEMd9o6PoKngIknN3FtSdg'\n  b += 'HTQsigI53s3xlngr9Yxt1OMup56cxOnKsfH+w+ikArcu6fs5YFXTyM7ETdNOZNvHoiBNmiLJaOn'\n  b += 'XHuSgc5grdCHfAlkx4j4WWnQfLr1ITlkcLBYHEuyqEqK6fGxLhcmYfSDf1WtDJJt9pZh+jobFCH'\n  b += 'M+I8z5jDDnM8KczwhzPiPM+Yww5zPCnM8Icz4jzPmMMOcLbD0jzPmMMOczwpzPCHM+I8z5jDDnM'\n  b += '8KczwhzPiPM+Yww5zPCXA3m6ghzebuAsI0ipnVgEMRpbcSWr24A5A7EjdG4bgDmEK4RaROAiADr'\n  b += 'rNuIPRqx2llTioppLVBQUETjm/Aao6RlTi6gFAndSxjnUacYX3QpIT3AowHZ2C9Do/mlBpSZwS+'\n  b += '5Qu4ku5k/qdC7YkBNSMeYZY3h1YJLf7krFHuluKoWaC1UmLSgG0ucqUR5d+FgN43cEsN2W4h3i8'\n  b += 'ttpamay7DEXyzFIt1zlC/bqXmKSVkrrXzYGo09FbZycIu7hpgllC/foHxFa29Jlw6mjPL10025g'\n  b += 'p+vi/wyVMGu58tRml/JBtpWstmvz1famxtWilfmAxHUrGcVZUpzrLApdDc4Ii5aF4x5uA3cgcar'\n  b += '4W7PpIivHIHBVL0deWriQmpzNcHxDDiuSBdLvImagGd2pzZb7fAe1hFx0wjLQS1bfNcTFYA0ikC'\n  b += 'qhIkkcsjrnYkPAIFQU9EUfNFyxe2T+/BvpGVZ8o2I7FKEoewU5J9VI3HXl1Jb+QYCtq01fCOly7'\n  b += '+DzGfI7gA1fBA19BULNa+Nb+vGQsGWzhAe9gUotR23CsQ3EQsfGXlizV6E9Lu/kExB7Nn3SFFyY'\n  b += 'ge6rWiUClYkM0vUmmGQ+/CvIbMAAPixIXAew1v2TWBL2lpD7JXrVgxfZG5MW8NjqGFvqYa9y2rY'\n  b += 'W6qhyBGbumANBpSBqUtR1tjpkj6WuogChRePndclYlYTR3A98PbRFVNKXrWtaGmfC+/nPvb7hcA'\n  b += 'M931WzNgOfmiPs4Of8T2UqvKdogroImCGbUtdE+oCCMP3y30urlBo39k+wkgMtWz+X+Z5g8fRVB'\n  b += 'i8amJYDT3UQBNP2AYTzIwajogcr5xmpEQwqeB7+S7/QprR03cxHJA1oIlzsEZh7BFENNEAlVwOx'\n  b += 'K/k18KBm8MEo8MRHR+FcklSNAmrayIUl5al/biTF4t/C4H6m39iy4bPutObr+Mc8OmmE2JdWJLL'\n  b += 'omwYTFCJx9JcoGvISrZYy5QH3VQ+65LyRXVLYHRTedBN1RV02Aa53UHjNANziFcMwQqd0EyFZ1o'\n  b += 'uBm4X9YjDSL6+CBR3Vi+Shq5SKg1dpWBSLI500bLJaYM3IHRC4gLOqyRxyBdynHqwjFieKVawjF'\n  b += 'ieKVOwjFgeSuVxiFcurc/SzFKgaUcuoOf14tkULBdsWrVgzuoFc1YvmLOmgvHZMHX49TYD54Uza'\n  b += 'g60tN/Jpv9inmXaeFfR3kf7VDw2Fo99/gE5/PGt4FjhaAgE5bHCmRGYyWOFwyRQkscKp0zgIo8V'\n  b += 'jp9AOx4rnEuBbzxWOLAC0XiscJIFhvFY4YgL1OIxrhdfgR4Yg3YQ3M3gWHD0P7QY8AgPPhUKkHo'\n  b += '6pp723UdqN2xrp9joVbHfYmul6Oltsb/B1kbx1QfEfoethSKwx2K/05ZeMdqHxP721UserlxsAx'\n  b += 'Vjiz7v5C1zxim3zFNOuWUWnHLLPO2UW+asU26ZZ5xyyyx2tcyzXS1zrtQyBsjlYq3D8Eyr1PThr'\n  b += 'ppOF2o601XT4101ne2q6SNdNT3ZVdNHu2o611XTx7pqerqrpo9fvKbmMp+H3OzneQNvBl1qgO4c'\n  b += 'i1LmWJQtR9HEhjvt33OgkcFNPGEa4eTkbR66z1RuEaeKxmMtt+eow88PgXl+qOZP9qpZyN1RqVJ'\n  b += 'JK/8bzh+MVTosYqyid0h5DfBM8frR11aqCmeBRG5j+fWqyk5ieqP57I3M5cLpzLO2aBSJgi/Hxz'\n  b += 'JrGJAIab+Ca7Fys/usH0uqN7uLvrJSMGhd++fctI17Opq5Mv9NLc8gYK0U6Iu35mDe92c8E/2vX'\n  b += 'fcoWmnGo27n3MaP7ot8pyV8xDI1ule7x72d3lk3++lfe4LOuFkfaG5izuUxAbOH1vc6V7sKzrXE'\n  b += 'Pk8WfM6zz1PF9BV9FFmw8zGNzjWfNSzPplANXkcEy4sLYbOfW4b1d5p9lgo+8+xz3i9Wj/Ld6Z1'\n  b += 'xxb7o7/RO0jkPoBvSgLHV/g0AQHcnq6lodmLPKqyIxDbQ4YsO1Y/hQqFwsZHBLY5OJ87z5JzIxW'\n  b += 'o5HYlkWUwqkizNY5nz2kpFqc70O1d5kfasmvac9lZpzykvO4H29E17SsxXsj2nvFXb0y+0ZyAId'\n  b += 'gB3Ub53yZ7aFq9rpRY952JnLeCDTeu7xEiRy9p1iqp5vtCu1L+qb2SqsPJKvkiRrBYYj7BmEzzL'\n  b += 'G/W6dS/iuoG19enrgWa4UOh+UO7dki5m/aZcHMNdRWS24JKssXPOLeibvpoKutM75xQ6pNqpx3k'\n  b += 'zWomTZD/vAAXX5vAC0b8X6cg9N+1ie6zrIXK1bMyHAYup/FY6w0QyvSDpGWSv9vPOTvd52Gn/NI'\n  b += '3WmQm4859zFIAPZy2b7uOALrWuxwDvZ0vwKLlC4+LaUNKPYKfqFXsu4J9Hs8qb2j/uYC6+rnLWz'\n  b += '9zb+D0f6nOxDxNOKTtIzjgi+c2qahRuYNlgPZ8P1sAOVt8OVm3+hqC+soYZIs1rKzPotu2RXVO3'\n  b += 'VP6bWIemXlf5gFirU3sqP+Nlf/8YDd1rtTDHP06O0zSY2u+DLp6XkcgZk8hfNWnVqmLVmgj0fox'\n  b += 'h4sGNobT2lH5tMxg9HcJV68ELkioLcNkTSg8EXGXK67Q/DHIztAQtrm9lejuqfMdh5TwM+kDbBl'\n  b += 'r5aXdi5iWdjDxe9dpfR5Ksppj1DjTTGriiPcE7ccGJLchKp2fmK9rhGTViruje1clOFt2zxjEc1'\n  b += '97IADIxzYLtJ0MRPBEVHwmmWdrqBweBSDObf888K6eL7nanmB8zYxTzw5tXB1UIs6F7AGcDBpMa'\n  b += '31K7rNzrqDA34LjW3qbqRqpSMVvmGQYkRt2sFzSlCGiSzcm72huWdmBAFBaduW2FGkLf0xAfXMD'\n  b += '/LJVk7g/MaqKxNW5YFfbUpHXroL5dXVYzN7uLUVIUYOdltAhvicLMAbcZ6MUJM3YQM2zUOqAQ16'\n  b += 'f9twJAw6fYu9BIQz+QOm9tMYFx6UyV4s/oC1ehRxZowzsTWi0zwJIxHR61jw3tHvKSpmj2SKDmk'\n  b += 'KV68DIYvmVr2mLIrOxvFGfrgz7wtbhpQ76p14onfabKyTpT2WS9qWnSz3UC8m+d2gL0V9jvdIOQ'\n  b += 'ZIm3fG322ihe5xRBA16bdAzCPkDLH4o0wwuCfj/NK4F+OcWghvoNRZ/AFTU2MH0Sjt3NOrGeJOt'\n  b += '6idi/05sFJwP1lXs6SSMOqZuygnujMZN3rY32QxGRBLtQHvhyo9a+XLrTiPO/E7mqsX+1U9npQB'\n  b += 'UHdjKoqnEDhx/1NG5Mo6ikuD3eClLdaL9zlaKgnQF6jUbhMi+wRzv3OMseA9Yjjtg271qUGVpIe'\n  b += 'azNAKGTBkH7w+gW511d4qQJXF3+hPrkahdH2gStaouurfSM3NFTup/1pKvpRBjKG1MQt2jX3Awb'\n  b += 'hdm2OLxltvW6Z1uToWt2PZJfo/3/2GtOZLJN1rB3ubtBtLipembqooqGo1wImoGwL7JsIA0sp1l'\n  b += 'p4B/PbNm5n5lXXXCrfW5wesCyVpqwBVSr/S3Gm8NqV1xiqmaJmfO7lpiTftcSM+uvuMQ85tslZs'\n  b += 'Y3SwyRu/2Ll7LE6IXlq0vMNmmLZUvMSX/ZEkMNsvISM+O/5CVmxv93v8R8MlDarbjECO2O+7LEz'\n  b += 'PirLjFf82SJ+UT4MpYYTBarLDGiN6G0xJx3V11illzVZmaXmFmvsMTMeOUlBrqsWMWBLjHQbKBL'\n  b += 'DBQa5EvMnHdpS4zMs8DOuFy608tfYpZ4Aj8d5ksMdDiUlphFr2uJOeetuMQseDp5e9D5wGPtdKh'\n  b += 'LzCNYYqb84hIz4ReXGDq3l5eYadqOLXm20qf5hYNK2/6zfInBRPh9y5cYM9sWh3d5ibGzbXmJ4S'\n  b += 'mWl0VeYubM4rbCEnPclzXCfHKJS8wKnxeXmNKEXVpiGIT1zxpO22DNyM2bPOS9gy/D+BANO+Ptu'\n  b += 'pbXB4fzMFc5AraMsKzOIVqmziFaps4hWqbOIVquziGyoPHzkZ5tOa6wg6jaCuZxCmwZ5KoiVL0M'\n  b += 'ospD8PyHO+oFpHdcYsqLVVN9p315FRQIOY0ZmuyCgpKB3IcVLURy12X8Svo4lHaLJbUDckQPWay'\n  b += 'ulefCWjZEC0dR70ZRX8b5QC4xpgrEWgrkEmOi4HcukEuM8wXtCosBphcXslP5RUoAHSO4O8iVLi'\n  b += 'ySdSHImz3qFHQkGO0Lh7Q6kQLpu8roUDfEjASEv76MIDkpispExL0o7/2FeMaHVRBwSU4Wij8nZ'\n  b += 'Sv4nGSfmYLPLPtMF3xmIu5dU3mVJ8g6HeUUd5m7o9A2eQt1EwFVCFUrAbVe1bgOibIJ1mhQW0aE'\n  b += 'vPryTd4rJHfTMyYKxFopd/liMcy/kDSVP4V98l5kCL5PsfSFHyUveVlbS3fvQ1rn7VyHHrdkXeh'\n  b += 'r56wLvWzRurh/na1aYi9UTf/yC/0L2/CLFnd5QYtKbvCSHejwM3E0ZtUo9Zk1vu2vOiX9NCbSbu'\n  b += 'aELLrwMu8pL4AOB18K2rS9wvhUu7o1GBSAofV/Wl0XDXaBZ1ZSFZ0XRbfossjdc13uxS636Kiom'\n  b += 'FIKgkjjl5qiLSoH8uSjMECi9BknYDKpHtMvzlcUsDEOrMYgCXUtl15JkY767jMYZljdka768YYA'\n  b += 'qabr4zwnRQxln4qy5dJ3X5i3gJUSgidg38CA/PLxs1CMS95TUFwkrHUVPLOmG4SLrYI32HSjMDt'\n  b += 'W8ECbboIDC+15cgyIyHMFT7vpZjiY1YMcW4STsoJH4XQrHL3kOEeOQTja5HiWHNvg6IPg593pul'\n  b += 'Vx3VOLrt7P/eapP378vx4G5jr7bWAuka//1oc+5li/jeAhyX7tKx/9Fd/6bWKmkZ/+8Jf/ybV+A'\n  b += '8w+8vNf+eqP5fE2M2fIz/7dz3wu99vCnCFf+/rP/7+e9dsKKZPshR/96/cesn6DYNLM/vr5L34g'\n  b += 'L8s2GqV92ewHPvCNyPpBb9667Pwv/P6TP6J+d2s7GU5MXlKrhcYznWGuq1EVO1Ybv8x5Pq9dqeh'\n  b += 'bKaS2XtkwVv2QGYCiglBSsbta7vZAHy7zQpGr/Qkn8bu8XVaUMP9F6c7KnZQPDhZvko5aif39Io'\n  b += 'E07QCSD++9OcumC55g8eY24gBfAmY0oGoDqhJwXAOaNqApAbMa0LYBbQl4RAP6bUC/BJzUgAEbM'\n  b += 'CABj2rAoA0YlIA5DYhtQCwBj2nAdhuwXQJOa8CQDRiSgMc1YIcN2GFAgdh/2PoPEyFvBP8sns7T'\n  b += 'UCB/EKh6BugUKoHVlQJv0cDmSoG37pfA9kqBT1b00/6VQs+Y0IGVQp8yoYMrhS6Y0Hil0KdN6Pa'\n  b += 'VQs+a0KGVQp/hUO5xO1RH9wGjoFce5YP2HcyIf8eBzBkl84hqJsp7vx0fAjc503QiLBULslS4R8'\n  b += 'Fadl0FSBsTDBe/heYyeV3n13Mwwr5+VIRV6XBMOxHgnPgdMAl5maemq6YjJn6EPZ6FNwMwfX5el'\n  b += 'E9gUcJzuKBddJgHwSm8rlZ4zMCoitEUoy1GvxgDYgyKEYuxXYwhMXaIMSzGjWLsEuMWMfQ96w1i'\n  b += '3C7GHWLsFeNOMe4S4+1i3C3GO8R4pxj3iHGvGAfFuF+McTEmHDEfVHNKzYfUnFbzYTVn1Dyu5qy'\n  b += 'aj6h5Us1H1ZxT8zE1T6v5uJPpazWwLUIidHYDv/gy31wcKkffUWh9KTDO4fgJrq1Auptf4Jpzu4'\n  b += 'MOQye4BnrFwKp/lILH0QPGR2MGKOVIfjGSMM81nYC50pitz9cOJ6c4UyqfexZ/6FiGPcue5qPMy'\n  b += '0MP21C3GCr8acrO56PYhUAfJfJfhElNjpNeBuAz4RAKLKva0cQXRpZXmdX+lZnVCuxNvrI3ge3c'\n  b += 'SCqI1IjIEZjrhmHhn96n+wDrobo6lQmUvYqiDEbqziTDm3DNQOSilWXazxbPzysfsmrjk2DWXNW'\n  b += '+DrxURxK/m5cqFRBgxjTcSpXx39xyGrwrwTWfUTHo0MQa3IflAIKDB1LHXN0cUc5oli/B+SGrNB'\n  b += 'rKNUErw4cazhXmECECf8LFzkpgm4WTBNi2IT0sYl7TrKJL3EaNlQhxsRos0b5k5HtUvZZ8iWRVh'\n  b += 'xXrf2cRr7cnPTDuSnph3Jm0YexN+mDckayDcXuyHsYbkn4YtyYbYNySbISxK9kE48ZkAMZwshnG'\n  b += 'jmQLjKFkK4ztySCMONkGYzC5DMZAcjmM/iSG0U4SGE3I6kEA/QoYfrKdDynJlVorRVgyWDPF6kH'\n  b += 'rqEgb7uNKcZW4QlwdrgxXhSvC1eBKcBW4Alx8LjwXnQvOxeZCc5G5wFxcLiwXlQvKxVxNOs3F+H'\n  b += 'AZCukqowpKtOyweiqumpUma2TzF+ZxzgqtkqdGrqOqYWJbCaN63LARSzqqNGKDOWXICI00m03Rh'\n  b += 'bCUq4BUhpYqiehS3+CuQufp72SCNl6UoCKBUCJoLSdozcRuMZ9QClmDnE6tFQhqKV8kaG0NBN1n'\n  b += 'CXroO5igTRDUKxI0MDVXdWfVbOJdTwDsQ4UePSOlx2KUVRPbSunRqLQRw7IYJUe0cn+BEZazKZY'\n  b += 'IiimUP5HpuCUiSjRtXgUt7HTihq5m6FaGgt9VhHnjK+Lt8ZWrkSFHfR2LG2Nxcwzgr79MawJv32'\n  b += 'v6RDxS2UkNxW95NK+3/zmU591b5bjwhrT+NlpLnn9gvsLwtVhR/AzCpfW3bE3Qi4bv4feyibCT1'\n  b += 'PJ48pgEkac3sVyxezA78z/+wFEEW870UcCE0e7tpCsvh+CcFO04u2iFgRaytPm2lstyjxF2h4se'\n  b += 'OXF1BXiSaraE9Gg7B01rdBR1U8apfdS9jTaMzFKROe0/CCUsiFuMaQtGi+prKxV5ap5z+Z1zjhK'\n  b += 'Nm6y5ywX8XT17fsq8mSDX7OFjxlkTvo3i4yKz8LGWwBr2iueDTptfj3jnSH78nglvVv7FasDan+'\n  b += 'TszwfyHuqxKpyaed4XJhH2zL34e0byakiE9hQQBIflsRLZfCbkZ1tqtvptLbfpiN6oIfcFIvFpN'\n  b += '3s/tUx2rXybPQvHw9Pzyt/GzfGcI81xzoF0B7+hAgCCO0T+Ly/Q3Dw70ujN/N4/4/MP9QfVCHgb'\n  b += 'N9PSzz8p7cNtAMlraZlzTt4ySw6NG24Z8NmEtmWWHK7KzWThBk/DBM860Zv0wVfEjpacUkuAm5F'\n  b += 'b4rxTaom4I36lloj5Eb39ja6WmGbSPxgWEyYS7vSmXCHTce21M66SaQBkcrXnDghpBlNXSUM9R4'\n  b += '0ieXAhOfORdwt5+LWeklXyzBQ67qxryIN3ssCSZ9ZV8szKeEiDBDvsoECetCKsKkUCzZiuetItE'\n  b += 'Yh5O8ivRKA2Yzm3FyyB0KrSNyvZvGfR8abLeUwtHw6ftqmqJwPScSf+GVY0J6l7VjWrkF/FokwD'\n  b += '3CVq2GhbqbSuCq2bhtYTU0xrGEprT0aR5SigfvrWViRNgMuBmV/43UpH2AoqaArQl8npMzl90T8'\n  b += 'JyAU0Aif1mVCH2y+jjucC9QHx2IJuxhaqY/vjLJ3IEN1+74sNx0fscHRoMGXPvyd/tr3YZ4/lox'\n  b += 'ik/BfqJHfl0TCHPAnHk8XUqTdmz0+a9LFRf3rauBwmYPakCf583YmO0srVO5rUZCqmuZylWswaa'\n  b += 'WxVa2taW9va+q1twNoGrS1WW5TVIPCuqj9rmXMAB3dawiPVgaoi8KG98Pdz+frI3GzpZshnABMj'\n  b += '+O7bSJ6NhI3QRVMq6T2l8ril8siTN8vlabmKWfqF1LxcBSpE2vJNgleIVLWRqp0XSam7XF53ueb'\n  b += '974hy+d3lWgy/I8oVdJdrovYdUa5wWf9qfEeUK1rWv1rfEeWqmnLVTP/q7egyK2AkJXiNyEIYG5'\n  b += 'XEEUN2rDQF1PLJBDxJL5JSuVz5RYqb+bhIMVcobtcVCrkbT9SEpWYhWIZc7VrkamcsrefI1aDP2'\n  b += '/FzF37uxM9e/NyBn9t5285b+FyVb659VnZuou4hFT0PaVN0YbZk69IjGxnW89CftoWvsU+W2nWy'\n  b += '8K6X9bRfGmrDageQHJKa5nSLgy0wySFfJUeASY4UDjmHSQ4ZJjlSfGMLkxwyTHKk8MY5THLIYIi'\n  b += 'RwifnMMkhwyRHCnucwySHDJMcxb1dMMkhwyRHinycwySHDJMcAfk4h0kOGSY5itd1wSSHLNsXxe'\n  b += 'uLMMkhwyRHcX8RJhlnyQ0lmGQDo10vwmhfIbd4dQujHeqxwMJoK6xyhaEnicLAVmaccYjlsGx2i'\n  b += 'MHAS6tgjUeKNR4p1nikWOMO5mzBGo8Ye1yxxoFTAlAQhTgXKXQFOWQ07AIMtuCcRyvm72r+rubv'\n  b += 'av7u8vzd1fOPSxCLfLwHGDpE07FHqUl2wkdmIMwbOfaNZ26MwOLlj60hYgiQnFAP7lF71hEwa1z'\n  b += 'wud3g1QVY6joN8CJ49XCnPSDY1c4qkbJKe6CMXf1eZ0XwaqcMXO0Y4GoBtS6DV3srg1c7FwOvdl'\n  b += 'YGr/a6wKsXmPH8sdCNjvpgPL+V8ehZog+Ags2syatExDcAQGQAthSgA5tH4sZ42tjDHTpAK3QFM'\n  b += 'oAdh8Oa4NbBxYNKmB2hpuB2ELHDxgk+JpDjVNKDvJBCD0X/5oUD95xKm0fG+fvMSfyszntILU3I'\n  b += 'L05EMoYypHnflksz5lVKFohiqTBu4bFi8YAMkTKGg+biY12gXALJxV+WC9MLD1yxf5MmF7fGi4k'\n  b += '3qelqaMha1mQZOq3jYY4D7C2Od4IWGhpy9eL6x1gsXFpwN7IZnhqXD/llgIq3QhwkN+I8YCLmqS'\n  b += 'veE3WPI6JbuIBJ5WgizrKMmidsEvvxvHIgcfk1ERvqg4w82RqpMM6Z391hsGOQRKVrtIqUMx1np'\n  b += 'UhoqbV1oHrciJvFqC1cnlBBAgUEqUhhmEvUk6U/dkZ5MxC7o6rax0NRLhalu4M0fr/m9DIvbWiE'\n  b += 'NQSvyhVod94w+BYuCEhVvkDhMNepuHczqkw99guQSYroRHY/R8HiHUlLH5h6ND7eIIAOI+nO8f5'\n  b += 'M3ALEV439AlyRxesy6RruLuYbBY9v25Sj0uEbTEmXJXvVbZC2/CImlaMwSIV0Jc9qIb3c55CCHN'\n  b += 'UKfrsZ+7Wm8UVCZ6V0XUuZfYo5Bv69cj78MiM+BdchRkoxLoEvCAt01K9LdVB/zu8Qx69r+Yvhj'\n  b += 'Eqn4bUVwoXi+0o5Skkl5T0KjxRx6nssINIi7zh8C6aU+xySJ7NGwWs3g/M2bLVzTCWfQT49hf/y'\n  b += 'DfsUmJ4CdjqWTkiZkTv7oEZEnIzjYgL76F/9ueMAd6pXEuHGCKjzmU6EEpgspCSRDoFAbebl1Gd'\n  b += 'Equ4y8+ZJG/sQx5POI/7oesa/qSSx+FUZmvH/YgY8sQn6Z6A1cbQG0/yoH1KdTEqmu7XUZZoWVD'\n  b += 'BNi1JWlJJSWnEdil21GXwrpvUKbVEpdCqXYZJhY3/r19DcLNJY5nJNsA0Rm4I1FdIR+lRM56p0L'\n  b += 'J3A/zjPW+zch28ZafH/ct0NBI4Dgs2sgBb3pHcC4lReA8ALwxDE9oGh/M+qXlIGG77DXOadc/nn'\n  b += 'LVt5A0kllTvl0x980lyasroYvjNl0GO5M4UiGb4yhR4ZvTFlvou79ML0rhXuSx2WK2FAZb3JZID'\n  b += '2vTu9RVWbgV+PL0sBmqyqNP42FG+rn+YN7Rc8sS16cp/MgK9AdaWptVJI233W2+ndKyixgv/a/u'\n  b += 'PQauGF85cYJ9dRZYPtv/Rj9bjZnfNMviyQM+uZHFkFAJAO5PxYzC0Fh74jNcU1qASFpoZOqYa7O'\n  b += 'oL8fI51XjjyHgP9O6ZxwC4Va9M4zHeAJJggwEMPcM0aSKPhpnsWDwGisad8zVpqBd/C49oWuFfL'\n  b += 't2TL92lQaUIUzDqGaOwkz/bHbYvA0zyeWCW/9P2vI5ehTjZMG+1P+dI1drA8vSNqhMAk5TF8JpR'\n  b += 'BDmsCwze7J1GQ2L5SsZahiugc8oUqYBQbtlQZ6IgiR6XKIPbvb8WtM6gCHuR5Q5WBLqq4+eVzw9'\n  b += 'aHOkr7vJu3NLZg533tWyu19pKv/bqrrXNacFu3ta1Pe1qrttSq39Qqf9yRelVNv5N6NaVedalXw'\n  b += 'zz7sG6li9cLaXwmVCJ9RtsV1+rStO82lguBdi+OA90ij4VKEI68WDGfK+QDt+Sz3s3utL0vl/7A'\n  b += '9+XP/qi9CL9ovOdtPEghZw+/J78uD7IHH7KX81mcPWLDbJJzXp4kOpLc8D9kkmT0jkIaw9mThfT'\n  b += 'd7LFC2IyfPWsCPxy41aMu5trh/Tho7af9fpMbRjfMNcZ0jGsdedl2DuqVQa1wwhI9mw6Q6i+/r7'\n  b += 'w1vfw+vEZhhwq+NUq6xntyOcWHkgXgceKqHhfE9OxOP4T2JuyDeRe8liOFZ3KvIdsa9uVUhP3AQ'\n  b += 'D5AJ3stQjF72vzqGzxYFep8TTCqFyqc+8WidGeGbb45e+Rk5PLLqa9hzjP5qcOzVQxLB57Vzxx2'\n  b += '00/ZOUrSID9ZsOiNIZekGYCkzT3mMYMbL7Bx9JhsScoRm4akgck2P6U1TkD7qRy9lp9sQty5hvm'\n  b += 'xxSudbFQf3OpRlp1sPll3fVFmNecLkzCv8yLuy+tizNsSqDW52qvsbTlNl+cEZdv0JCY/OMZ+KS'\n  b += 'brIRn5xX+68I8nf/x98zSpnfHI/fE/++R7/vy3f/OLP3F0pzcPj48em/zbn3zm+f/6n3Z6p+E+9'\n  b += 'o25rzzwUz/2N/+JRV/dkQsX/uQLX7/wO38a7fROwv2RPwVb5t//zg/s9GY9UffjCLZR+4Oquoh9'\n  b += 'zc0K+7SHjLqY9g6BFBJ3Hgl4EH42+8QTFVbLZWNw/CXXoEkJwiM5F57I8aPcI8z8Kd8gcLj9k0R'\n  b += 'dxjMV64jy5MZcAmUWneiOLxoHvNw56xVRrBbKsFWq6QgV3yGpL9jojOs02x1/QOPHQVmVkN+lA4'\n  b += 'elilkHlCdPs6JiJxwHLxKrwKmK7GbECmlCqMAJc903VenQR6VDQ7mYpz1KlYuxpjyWoWYIY6MoK'\n  b += '7qTn63vRyqUtlGU1V6uu0e1EC0rt+juCVcqvC9KdVCHw1J46O+JuPCsTWf1CgjEHB0TcCtYUh60'\n  b += 'MuGg8MkbMboj10Y8zdSqQrLEO1ux1BtaiXoTL0K9btKp/qGVSLda0ddAutWKT+P1U39z4a8/88F'\n  b += 'fmGjR+KXMR/7u0ff/2K9+4/k/uJLGL9yf/4n/8ukTp7/0gV89yrLV7shPfO2vPvfej/zsUx8jj2'\n  b += 'mfZ4ATv//PFy58pHenNwX3n34EM8DnL7x9pzehsGZ2NE34pWkAQ8AO8dgOaQtnZaeJEachmIN8q'\n  b += '0qjaIgHXYV5raxjV2eEpR4rMGjTNAJQLqayj/PVH9Zc72gPT6ZWOI93wNxYrG32B4+kAYNl3dt+'\n  b += 'j29Ej0a+9ev/cuGjE1/6yz+piO8i+07OvfdTE+/62vHvEc8F9jzz9X9+6le//KWv/ZNGnRdp6iU'\n  b += 'HgMhXe9VxFuOeYnwzka6ecNNgPA6oscYpby1EWCwEZp1weSGgS6S7EG34dZdhVsow50AE+WpvEV'\n  b += 'oTqCztcVrcA+4sLPWNEon6KipJKAU9I94Bi4E7KxQ0KhaUVWksKyi/KHUXlJ+BlpUUkACU07QDo'\n  b += 'eqr6ZwlVBsYFzZVLuk5KVId6rZQ0iZi3j2etmxdTpu6tG1d+gTK09ZldqW61Ip1ocNpbVlV6IBW'\n  b += '665JDL/uikxxXtCyJRgGSS9yvTepwxhOqqwQEf5tkcu9lZqkGTe4+GelnA1pCjB0c1uBAi2hAM8'\n  b += 'ocStuFigw4QgJ+jjKjKTRF/dYEkBo+GwlJ8HeAgVoJMu1RV1L0ZtnP572as7r8izr48yW2cOZCQ'\n  b += 'pL3GNaJFBUvnrcK31LwnuLFYrH5b7wTmjwqqJp9ctZly9kQ/5ySIcJfwjwyWygWxMmn1mtVseFe'\n  b += 'Z1ug5JWx8BMt9UOR8mW5ldTNIeVxc8VzQWSRVHZHK7MeOoN8hk3KM+4wUWV5lEHdwWLj1f8kxbs'\n  b += 'UF6McNdlPQTVrwCROMcCArNV5zJW0uzJjbdRo2OV6FgVOlaBjlWfY28HrOocqzjHqs2xSnOsyhx'\n  b += 'WmGPg5vkSD5d6erW+Wy+9zU1dzd4p8pjhizij6GeDFXaBojmj6GeTFZGBwjmj6GezFaxhxXPPG/'\n  b += 'U/RhwnGbSSOsk2K8STXGZFfZLLWcwniRWSzFXlQ5HeLosU9pLT6fKZVi2wth7iZW4ng8J1taMJy'\n  b += 'Odyt2vuK3fnF8yVTuH2Vnla8yBJbrhT+PFFWkUjGY9C+cwNuYBumDtuG3HB7WhJjUt/84t//Q1X'\n  b += '8REVFguFS/XAXtjn9Ci7Auhc5OoENvfyDa64lpzOsrve3SsLeK/Gtr2qOLg9FAqDm9TBcqlHOWe'\n  b += 'KFRvnt8nIRCzom4lsxGqR4//FU1Q2FlYGYyQRlGlV3jINZTvCCOMarrogZ6nxcVxcQ0wHb+qOKp'\n  b += '7hC22aIT5ad6OjAatBrrIQEbPDOL+dNni547/KA3vB82B9ogfS3pEJ+as+SP7Oe0a+JUG9D5DzR'\n  b += 'joVX+gdTcOtaZOOy0kP+Wn085RY2toLaSkvc+PevVvjViHsP7acLcYZ0/naeQ/9mJz+YxptTZoj'\n  b += '7gjRe2vSyj75w9lTP0zWGBxucQ+dxA9g5xdmn/ph8hhxkpZ4Ah7Xj8PdztkqdIjs9BbIxJ7vDNx'\n  b += 'NOsDCDF5b+VzVPYrOcBuVbvFLT/A+sjGya2pkgirRALtF5iS1bGnidyvZ39NP3Ni7VeJEUycoAN'\n  b += '/YgAYYFZb/66E9g8QlhGq9N29l09nf4zmuxyqBvJvdKYhBPE9J3ew+WG1GRd9/ML5hI3Pl6mG3M'\n  b += '1FVdWLTVYVVps6923kIH7j64XPmQ7fBT9h+5mgICs4hTiM7mEF+uH0wa/8QeE5v3xoH95Dld75Z'\n  b += 'eUsLp6oJhpWar7KIGJitNoBRoxLTwjgxwfoxJlxaF4P2m8GNimSSQARRJhg52M/mCilA9dM6EXE'\n  b += '4zd5TVXMh7ePEMkGnrLlqAwnc4JyuppGWjHYVdzB6eaH+gBNbKwFYjVg1Dd9Iyz90iVXTOlg1ht'\n  b += '/awoNCNXOAYu4DtunBaikX2mS8lfN5mPYIKndKWWZf5bRR6khzm2WcmWh/WpVYx/ker97RC5zdz'\n  b += 'kxVzIeqmZfgscx7G1P4ZJVvuvbTrGLr8Ug185MAMoOacJ5mvVzZaWbZprEcdWXURQRTI86bsmO8'\n  b += 'txgv46iha8tRXVYIUA8FmNLssKPZXyyEtsTJvCVmc2IdLxJLUjWl5NSd1ToncqVKzFWbfiN79Fs'\n  b += '01JLsJCXUPhXQ3HkagzLJnrEe/wMeV2bH36UetgU1FeQCz8erCm3sx7WbqU+w3NUEan26ypMrdd'\n  b += 'f2FOqzyIBcP191naPXH4F633mHNupkzji0q6hg396GcXvSByOm/QUZpx3aXFRwWKHdBZnvpJmEj'\n  b += 'Ftp00/GANT/4syVJDCnnGQ9zLuTJoxddAIgo53UYJx0kn6YE06SwryL9kgVHBNcGFXaRlZwYqFp'\n  b += 'j8z7addExt7kChhDtHFitLyebP4ILzC0ME7Gjcl43WQcTQJSLd44GV8xGW+ajHsm6VzpHJuEYMt'\n  b += 'kcgNt2Ovxtsm4PRn3TcaXTdJpsD9OJ+MNk7E7GXuTaQ9H7p1MoZDx3K/IzpqSoWMuAoK4OTly7b'\n  b += 'F0M65a4/VxMkkecXUyrk1ieaAY7uTIjmPplpGjkw9M0mLhxv2TI+6xdCsdMuocIaRijuw8lg5i3'\n  b += 'zA5sudYul0i09GByj1y9bH0Smq39uTIa46lVyEoHpyEtmIq5Ej9WPoayvjyyZFdx9IhSmH95Ejv'\n  b += 'sfRqSWE9fXfZ5MjWY+k18WsotU2TI9uPpddK4Ea8lk+OrDsmp8bJkfBYugP7tkkqVnqdRGpT4o3'\n  b += 'Jkc3H0utjqD/aNjlSPUbLJwfSMSm+ngu0Y5KaK6Daj7zuGITciJgj/cdYDDCaHBk8Rkdk/oKOoE'\n  b += 'TdkeuO8YN/VTzXUcmumBzxjqVQ3uSKJ1jKPE67Ngk0TDpfwhFNUmOH1LwjGxB9IL5hpOdY6ss3E'\n  b += 'W4zOdrmSepVW+irzRLixdfG13DIEDUmdegt8QA7feoI1JW3x1vZeSW1KPXoa+Ihdl5NrUMd+zpa'\n  b += 'xuFsUC+gDr41vpKdV02mm6lnXx2/hp3XTqZbqO9eFQ+yc/tkSus4fXt9vIMLkQ6ybtyq5XTaSgc'\n  b += '9aDnauNO7n4zBnd5eMjbt9IBh0sNHH4ArAlUh3rLTA1oDYBvvwvEJqKS0LPENT7yZlhEErt/pAc'\n  b += 'IBq/7dYMHb6e2CMqqdHqBa6FgJ/IX/n723DbLrKs9E99pfZ5+v7i2pZbfUbbzPiTK0gxz6h2Mpt'\n  b += 'mO0VciyxjA2U/5BUUzKU5Wq4R55MrSsGFcQ6g4IEMGBTnBuBOMkSmKQJuMOCggwwTO0fZ2MMteB'\n  b += 'Jlf3IhKHdMCAqDhBmThzPYmJ73qe911r73O62xKTZCp3auxSn73XWnvt9bXXx/vxPNDcAdcB+I5'\n  b += 'vAcTOLnHD2BUBnaVl9wuIHLenV/zm0CsHwH+8HdPFrqiAAKmlfBmZCpCgoL9FfdrXVcmLh/2sII'\n  b += 'vc0M8O0DkKQKVw+5PN771EgDiZitGl3UGIC0/d068l5+w6TcKM3skxFq5kxCZpi7ZxNeAf+w5hL'\n  b += 'Y9Jrde4k147jdtIgAHvIUiRyuOXxAHQaxjFSay9X+Wrp3l0OhfUpHUniLZlI/LPC0h+2usIdwOo'\n  b += 'vQT70M4C/5yHdEkMXgeJaSPqDSyDZG0TuIckD0ZUQZLB7gEhAm18/t5IvGgp1aSnf6aFRY88DRG'\n  b += 'jt5k4J3oI9cETdBhBXlhHNev36ZF4NnnfO1Kb24wNDCVCYIOKoYQNXYmSwpDeHIihNJUIJRxFs+'\n  b += 'vdSlSp6WOnpmeP9wNRDNS5Gc7ZsX0CUvILkbYNNMyqH7ggCmNtEui8oSiA9x2wjVJotClfE24Lc'\n  b += 'f8yFbtF2rdfyEXq5SWwo+86F7h3fcHnroG7B/m3Q1APSPaJ76KT6ZouQt88JpJI2z1iG8C2mCA2'\n  b += 'SiiaAQVM0Y73Y2pVgFMopqkN7Ux6q9OPRoc2UUl0GH5L5OfimtYU1zSAkj32K3BNC9d3TYucFl3'\n  b += 'y+JK2BPTh0tQMsQ3waQpzM9GLN1C1Zz/gNMtJ3c/VaatluJ+nAvwDTluNL7A8711i2RoP2x3XC9'\n  b += 'HwY1RyH/vgsmdNsI3/4fSmYDQdHdIe+mClXx9yd8Mm55EPVu5ottCPOGe0Y80wlals1QOQ7jlYF'\n  b += 'nZM/x6lmsLTDtEkJsBQ3IqL9WyOgC4i09st/VSmN4hbYNYSczqLxd/x4sknA/clCRDIucB12w04'\n  b += 'fb++GwlsifuIIvlmAAmSum66FAusx0ow9M3cLhQd9P8lLYp8MjMDCZNPhqQt8I/HRJk/wea/GIu'\n  b += 'BkVNJHE9qUKjMbKEWcilQjhxPTxLx6i0y7zwoHr+1uee4WTv3OAgqaSs6tkZ1x1Yjc09Ud2y1Tz'\n  b += 'yofr8Un/m5Z1H8fu0VHD2quWfR+f0umg3bUcnJh3hhjDakMCf5hpxUqqShhtS5ZyVyDXkbSZdOU'\n  b += '3imjq2OKkdomvCR/T6hei8S+JjqjWzgyuMMjdxD2KL/t7DKHSPnXBMxz4s4JPIz23MxFHfLTbSe'\n  b += 'BGZak5XmUE1op2NzvNDsx9oluUMjM2p/dK/SFwpoZdON0g78ZDG5QJcOBBh7sMMUQ/95zlRF5KY'\n  b += 'Ytjm4XGzPUzDDV8L9VXLkxHIh1osTbvKxzQSrnNC5yIag5FWvVzbEczHmzmoawDLJ6eIpPw3E9j'\n  b += 'N+/ljl9Nooz35waMrZMI/zLo/yuXcirnwWATxl+QdXmtWDtiJq4/PBDZ1isfQd806xaLTymEMB+'\n  b += 'MWGSefttunTDThO5I80+mH+yQZE/JxZgvyjja54TqAh88UG8bTtxJcPesIkZW/EcaSI8rM2l/Lx'\n  b += 'l34H4Enig/6Swup3xAua8nQa7ezv2sXxxd8x/APHDAg4ovvfBjQpAvjk7w6Rv42Ly2iujPZ3TXn'\n  b += 'WZo0zJu397ff8sXQcJjYxgNFinDUpzzD5sQbEYMtSEOwX5Ib2Y+Vj9op/aPYxkLUZMjxzCA4hWv'\n  b += 'wiwFN4Ib15GcyrdvmMy/fOLghFP4VKZ/k30p4pJ+QiKnO5CN1F7Eqzr8sBebCIDhbhwfKFl94+K'\n  b += 'N82B8gwQiraLedBetvZqWjfRtnXcg3CPa4ugO0gPmNwcDDoh6/vBu6d9smn7VUvoOImYNnZLfnP'\n  b += 'NQpzRzdsi79VAFFp0MMgyT/Gfpd+295BeL4YHtxvi6Svc81g1wxelvO2cWCy5loQU5HBiLKftgw'\n  b += 'RNxyMHw5GhwO7aMPhgGHgOtn2VkZ+Bjs+qMvJvwy7TDfo6oNkvO2HCb55eXcIJZPN+nD5qH3TwI'\n  b += '70effOPhhvo8P9aG6flgajm2ZBhq+0bQSCN44jONQIIB+K1BGup0xemf+1KZ9FkzyrTTU/EJtG2'\n  b += '8C2Fbe3x9sssIxHjrGza8ejrVj7qw3hIV9NPQxV7DwVlEewP+bI5gkzBWoPCAgIKgU47Y7eO3cF'\n  b += 'SUcLbLF/5jNCLS+U2hKbEMZl1fM6ww6+CnN/q5S0vnY05Xw79FGIEV622YEGUwXD5N0hbCwXwoK'\n  b += 'Hgv/jwpxPhBY+9FhafFYL7xni5a+kFTK16llJVf1NFMQ9W1MWF99VH9iGVjpUBuWEBuaLRgCIFu'\n  b += 'MKGfjtNeQv8XRwOGFVnjHwsUk9Le9d8HfqdxDqrbOgT+ieII9JcsQZhkkjiOW7gJCNS0aIrcWQx'\n  b += 'nxtRK6tLnXH3xbLaJTTOCa2pnMTaAHhmvcp3T6Rkt4cvhjw4hn3KdYLF5cJmvYLEbl3mzB2sLpx'\n  b += 'gaoK4KxrodCVxAPRGv5PCN01jSOVliEqde7UGkPGiHNoqMZmg6BlXS33Jta1OzJyXI0wbqRGwZp'\n  b += 'RFQg+cKY3DpFX4NEAHrAjaP9sZhLySQcH+8kO2AVEmEwSzF/2wRAOAT8VArUIa0YvKxdCSBO4Nj'\n  b += 'ewANGne7AzCMrPz7/O3jV6KaaqBghb4Edqt2wB7UeLtGfv9lMLn0DGPGF/CCWalA+9H0LjyZKIS'\n  b += 'Anms1qkCIkny6B9YzhdHTnsuoETg/05tE/2BHd0yY+3D51zGwPtBST6mNVQwj23w9M0AmsNK1j4'\n  b += 'xLQUUIM0e8k9oHvon3W5Y5sfkGZTDtd2e25rGoLIFHuFBCFFYwpwpwmwbctINIDP2Mv3G7k+X13'\n  b += 'vjXaFN9igx1nvWXvVANQpDNjsgQhQqAmxPeBikRD5A2exhIQ0N4a385VQb/u8R9/TkEuURFie98'\n  b += 'byxhcu+8Z7/Bvl3R3/7ozvxpar1+A2B0IkuEwCvScLFVoq2kn4WnLFQt1EfM4d4nZNw3Uuaraxu'\n  b += 'T+7PgBnLFCnYPdKFd+1c70m+W2gO1tlX2RAczh8iEML+4MiBArJfrqrGBpZQMPzmjk7ZuBIi6SB'\n  b += 'ZnBJO7NZdqoMSE+BxyP3XAoAhM2Hy4WFS8Gc/VhsFnC5X1h4ChS2OmJ3oK50kD9g6x3KdY7rqIQ'\n  b += 'v5MJCfGBKRleDQ4G+oAC/la5IpFeeq3XWaCc+WOvEn9HBkkjXPf3g5bruLb7r7vGDRTpxh+/Egp'\n  b += '1oW+FLP/UkdvCx7O0TsRp4Xxq0z2ZhNt84Gs5XLkUwdaFmt9LoLhRvAsXPPruLPmm74dVm0p7d7'\n  b += 'oEthCTJ7+6bqX5SvhUmCN29xXvspGoD3PPLgcY/IPH5SPzCgtEERyRBtiaBe8NRSRCvSSDvsFGh'\n  b += 'j3rNe0+V8/fZk/BBUTaWK8G95ZlTyaD8Qv6vbQW+FEBPZ8r4sL35g794Ihi82oBe15Qrf6FmRWN'\n  b += '7RRluV7guJeN7X3P8PTbr4ng/P9rfBI/jMdyMFfnRI1hLXPru0f4YXZ43aQg0EEcZ4vI8wrJnR+'\n  b += 'ivPV6iZ015QYsxgM35a+aW+t3jp+zQ/OAXgteT/+nZ4AB/m3f04AvfAujagalOo13arSYQFBoH+'\n  b += 'smUjXs2sNdFMgV6nbRcPvYjB7oYtS898eVX25zKtAQawsLS12JNb1PwVh4psxJYAAsP/ekzkSZY'\n  b += 'ePLLr5YAJEna5S/82RNBOV2u/O0TqqlbhS5vR3nsJRegyr2HXECBNi8XX3xCRWcxVdQnfybVVyx'\n  b += '+IcCdzb/dS/bawfWe3hhMFNl/9nsbQGOMjZHojpuvk5kbhGgwQinG97YWimTJPleM5Z80dns8bl'\n  b += 't7/kh/07t64wC/fima69G/XEcE5vGiaU9HB6b6TUz6HYiD1eLeluPHey2Rzhgaw7TuPdhLCXJQt'\n  b += 'OwnJC5y6lhOvQ1LkbIA40eGS2KKjLxjnMT6pPK204cBUMcAHd3bvNf0cvvavNh8/K59jvBV3HIS'\n  b += 'rEP53tbRXo5KHu1vKVgl+DMUWwo7RrQ4TWVWUpzEqlDj8A/VkpCZG1JMaPZbP95LsLKVK9+1nbW'\n  b += 'tfMR3FlQSZ196wjvoROVT7u53GqY9T4h8WEPL2R1Huq4Dg4NHnfBfcRPANlNU5kCALPo0IjCCi2'\n  b += 'jEOBx9C9lhg+jn2HRgeYnK+X+K5UWIb8nobdeMeewocY6DroRwvQ1dXloA2hrg6NTUFSXiW+wjk'\n  b += 'E3ykbY8oitCjwUdwL6kqWuIvI04jPoWexyUEiT6UEfaOoL6ubactLD22G61iwqAI2VRido0IYD0'\n  b += 'Aq429oSWqeue7VqA0ySoaYOwyVI1mzXGSwwNBd+KJTPCy1FJmztK23DLJp+S2tlHslIZAw2Y2LS'\n  b += 'SbU19Canl2s51CRBCYozNeaBUZFVaX6GI66NWhG2S7oMKmLsuyj/tCntnl+jHtZ2XgeyL5kt2le'\n  b += 'Sm3l7Y8C53idK4ITOwJ3bCoKv0mJAgtqALZr/Y/xvxkZlXeAghbeind3bD7/lh2RG4HFgMrQEcp'\n  b += '9xghmrv+qCAYVgZ3TYFgZA5OBaaAKt9ae7vSf/gKnI5JqiuvI6zh5iAkjqdjoow9QcRhP1mNkEu'\n  b += 'Azz+cUpC4l4CiA1Jh/2SJOtsigMAuCe870k+vQDFDefFHwBfi9nuKon9vKmyZwlsax1oy2s073I'\n  b += 'aX59k3/58FjbnJ8Qrzm7snrEne2BKbC4v6NWW8rxeTZQrerW1fFqvrirP6dXV5VN6NVku69W28n'\n  b += 'G92l4+pldT5Vm9mqYcAVfXyDb8h2wDTRMI3X7xgkDSPlpES/bUdg2RSGD5fCslvTZtZoOnjtJzS'\n  b += '8JjCYf8YXs9PJPw3IZvq4d3JHzChk/68O6tYS7hkzb86qPYyyB87Fb4uCB82oZfdZSLvg0fvxUy'\n  b += 'cYQXNnzrUTs5Mzy/Fb48CN9hwyeO2rmb4ZtuxTEE4TM2fMvRYpOEv+JWm5DhO2345qPFKxgO9Xh'\n  b += 'Ic2KI9suOm9Vtq7nWqwBJbPu5xh12GYwlNnOdMBwLpXpHdySuw4ZTQNrk9jWuc4dTQOfudjVuIA'\n  b += 'ynAE/KuEtxbr0UUMnnLsXTa1Ocgm4D5CluQ+XG43CixBOp7OinS270DqdpeE6VmX625Mb6cJqmk'\n  b += 'lmIjr215L6Neir1GuxHkKFC4ThHeCWlp3FOgHTyMXMyA9CXUolpMg3NJFRZaToa2pFQpaTJNTSX'\n  b += 'UOWjmdDQCQlVMppJDZ2UUGWimabvYREjiH5mBcyN7JzQQnD7FMJ3MiBDQBP3M7xPcd/A/Q6BXsN'\n  b += '9gvuifbERpjKBrAaiVsQYxmbLDnG7WcEX0NvED6S3md9Pbws/r94Ev77eVn6cvav47fau5qfdm+'\n  b += 'Rs0NuGHzt7cH4IMD9sE/98Nz9knB8y+8Hr/NC8FSQISAtJiP2umz78Bgnv2PCr6+G7JRxOCVfVw'\n  b += '2+R8AkbvtWHt24NtSyTNtx+1y3vuPpaCZ+24Vs8iI6dZ26X8MKGb67PM6+T8B02fFN9nrlLwmfg'\n  b += 'zuLnmalbQb6A8J0QAR0tpnR+eCNFnbAyqE8RIb73WbbeO/rZKYGDZeANMs9mfhBnMnPaqN0yrQ5'\n  b += 'FYfJsugMMZ9ehaMyhrVp0PhyNqbRdi54YjsaM2qlFTw5Hwy2AI/fNfbuR5tQI3gn7Vcv8CUKKfm'\n  b += 'NJJtmxWj6Fn61kwq7l6q+a/qo19D2rU3Dty2YRZufoPIpvWz7rUKg37Bcf1j7rUJg3JNR/1qFwc'\n  b += 'Eio/6xDYeOQUP9Zh8LLIaH+sw6FoUNC/WcdClcHZp0iO+W/67ugkC7ovh0VHf2uEZBWH/oMA4AN'\n  b += 'WbROyZeNgJhfPgO4TOVnjcifdwTt/7thWo6iIrG7SpUf2vt7D/abTpwI4ybKFivU67EwDEybam6'\n  b += '6TLeuBEuvNYSllyqWHaS7gJxULDtHPfJGT05yl6cvud0TnOzxFCi7PV8KmVJ2etuAHZwPKw/cyq'\n  b += 'e1chiqnDU3wmyseTBU8I2HyvnXiRGLXT/K5RjyWB6M9nWNc51PKOK9V4AyIUSCo4En/WiJWL+0j'\n  b += 'WInhBSiGwKfERTJxjUpXL53oKD49yphCSXA7RGaDEE5j8QmgHqK/BYAtQeSXeKwNm+2gQKMBOcn'\n  b += 'uV82QtmaEHVNAy9RM0SL3vzmIdd4IBaKmYEHOg490HHogY5DD3QceqDj0AMdhx7oOPRAxzGAjqF'\n  b += '20N1Q5glaCGlFXgDWtwekHUqz5XSQ+abq20/HVlw9XAj/1+9UdUetO6wg6tsRspRQgZ7kSmD//t'\n  b += 'VIi+L8bfgZhPkFU7uNhm+bw7fF8G3OW6WxNKUCoBrPYQkDKBth78FLKFfCXlnFCHtl/b5ir7T3k'\n  b += 'JsKJ9mvZaaDz3q5pVBqqiyJFWw0ymecl5M4gbmxxEBGOgwvDabmId/pPMOqCHEI+rZRELJMVTCp'\n  b += 'BNlY5iZQUsj7m4agpxiHbdxonAtHr9SDd1ZwaxWQgLKGSzrREFLd1ZCQVY/xVNUq0lrFihNWq1k'\n  b += '8yD8aKi5bIpcapncCFlbDkXRBC0AF8Oj7J8N6AVPnYJdoMVPgzKn2S4JExfRNaKs0ZJUZLaT1kq'\n  b += 'eu4cGeOlIMBAFswdSfsoNqhiG2kMhWocBwaeQZFwre5XBNOENird63ISPr4ie2ucbSUWnRcWnQs'\n  b += 'AwhDp/2XDY8QrJqhGQYvjo2Foh9b19ba7Vm1a32UvtTEtr6STNANTY8MKWqGqmdCTUg+1AykAc0'\n  b += 'hc215d5jSycjNKuNULC9S4c0RVPnOqM5lLipiW3dWwPfg1IA0DcbuZRexYvY1GHVSvFQKyF1KI+'\n  b += 'gsp/wX8HwiMA3ZRNl+BPIk9rxDqqsNhID9yHXc1huYZL4Qhw2BJVk9iD0YgQoVZlLPHRgBz5ntE'\n  b += 'Tc0JaddiOPGxrVcUNjhWpxkC32nN+S3XVAfNUadGhb99juGU3V4htEjxTVoEP5GgDo4DUOM9QD6'\n  b += 'dRe0yh3DpgLb4hrIzCh+wVrBqgLrSFoGzKfI5sWV1q7gAkCp88Ri8GhfsKkdmlRWM0qoTss1Cug'\n  b += 'ADB14CB4DkZ+KY3WQISG/I1rWKQGfoPrpNkIOChe226tU+BX3Qjl5u8bv/OrDeeruGC47DhfxdY'\n  b += 'aX8VWzVdxrOar2Br2VWx5X8Vkym7kzbvs4t8a8lXseF/FsbumKmfENb6KcIKs3ByzN/TjqV6bvo'\n  b += 'r2oqO+ivFUkQDMtet8FRP6KiZ7jf0uuuKrGOOUfLN5ALtwuBZE8FR8C7bgcFmwY/Om4Cch6q3cF'\n  b += 'NHsyKzlXBVbFJBWboqtu6YgK4TIsXJRZKB9pnH8VBuK2TX2uiCP7EM7FK5xVAyjgHLiovJOHh/k'\n  b += 'fcE/L/ZRlL8SDEV2RLJ8gfczQwQmxa7oLuKi390P93VJgnRXv6HueBDnRz9o7PlNfPIiaE13lKG'\n  b += 'MxptNwe8eGpp+CjV+VN6grmZY6r2nWQTV7AxJl/DAQQhqkOQWAYKSG5vdbvnZWUb8toM7u4nSp9'\n  b += 'gt9kFJFtxsXlvGvbiTtDVDn1fDp9gp7w/wrsZw9lIQ8cPbobXA+3BsfX2XPwdhWPN6tIXY1ttJb'\n  b += 'OTd4EcpNKvZkdLtFBVKJLHiRbpDSqthf6FhZFnh+414SEi0WFPsaAvxzl02u8s73LnukEdKIwwu'\n  b += 'z8BYRzogAzWrsAMRFVLGCFzrIthUg+g2M+m8es0Q1rJmam7E1JzYCjQ1NxuZmgt+Yij4ickBWtM'\n  b += 'V+KeIeqFAW4aVoXnsMBXV0JyYiik6IxIQRexAaTEt/gBh5ZxhuKkLBRGzjqQohuaEuIRXXKzofz'\n  b += 'MKeylYlrBeBggiQRFhaG4qQ3MHVVkZmjtsy4VayCWGVIbmBjbTNDQ33tA8qgODHjeKqkgvJEFVD'\n  b += 'AVVUduKhuahMzQPOJ2HwJUMK0PzGE88CBUnzSu8obkRQ/OIZogwNI89HqgYmkc0NN+oHQPZvtbb'\n  b += 'UQ3NDQ3Naw1JtEc1NPcNOUngRxiam8rQ3NDQ3DEoaXvAwPxXIzYzn6XduQT/jXbDvi5yfozwi5d'\n  b += 'qZuQs1sUYfskOzrGCcgwFylGbkgRJoSNICmpwjlkF5xhhoDWlkeG2JBxJhHMMnZV4KBpDMmHx/A'\n  b += 'oAyawXtTWvL6W4UjNx48zEjTMTN85M3IhvShE51MZhE29TmXg/+9OVt0jdTByz7fmfHoJf3DCP5'\n  b += '30ewYi1t7MbP/b+ym48Kh96f2X+PcyJ9NsNsUBbNCMU2ImnwE7qFNjYNQxRYJsyPESi65gm1LwE'\n  b += 'QxG5ryEjghFFZPcj5auxrBr1zq9TXkf/v6G8ttsBeJqBD9lwN4taQmNr1+CgzcZOkAyM0glZpAV'\n  b += '+xVE2G5AyR2RWjjwps+eSNiBlXhv7DjgOanxUj09jn79ySjNNXE8jZe2YRKSTb1bOZkS++WWIjM'\n  b += 't5sbr4R0JobNf8+zCEPFXGRmzGnss4IuKNcNf4dEWkFqNDN3G58id4NKKFrcl/ywjlsKlRDrtD2'\n  b += 'iwoKEhy+TpAFSnnsCHnMKmTlW3YgG1YEh6FimQn/szgzw78KahC9oroCdEkUclE/ZNTTgfrc2CW'\n  b += '1/5EGc0JX/EiF/iPZ2F73hy1m4OW67bJsk9xHZXL0EHTrAF1c9aA8JeHT7uYlIqRRya2pTB+iMW'\n  b += 'KMKZhgtprZEXbmXi01zPxAKzAtQLbiVGWqr0HhJQwC0zEysDn0ijawuysZg42IJMVLINVUIsPdU'\n  b += 'Baw2xg4AE7wqTI4G/dA94EjTM0u1TCiXqhGSqTZANFSyoTig6tQVKcDmFGsZ+wnXi6XT4PTNOwl'\n  b += '65BF3nbYGx7YqIoiNb5Lw7b5X8JuH0s/xy/NBJ9hgYaRZJ/Ge1ufwddhptD/6oM7y8b9y3xXLMS'\n  b += 'HOuN2Y1qCqMFnl7sHo9vbRYRjEOifbR6olVtBLtfiCcjb/drn2giRVNSNF2KZj0F5eh4Cpke5Ac'\n  b += 'oRgf7ukYsHwh/3yxPH7cbz9sDaAhSe8CyQ8rWw56ADdvkqG+RjkCrJEHY9mFjPNLqaSaJQhOkdn'\n  b += 'csyqAP3vMu1nZWK1v+lc0VCCzD0YWL/htEp+1ytvwyVpcxmN2Fh8vpuftLe6yMYGYH851o5Pn8W'\n  b += 'JHaw852Gpo5vZOcVN/6rmPYmPv0+qLv4kWxWKbCpChqcxlMxNJ0uz2hJmJoup2WpolYmto2H/C5'\n  b += 'kfcvB8fakrG2eaRt7exA8Eiz6B4sskGvWTTsF9iAozdZTrWfu4F0czjUzUSXadU60gx3ZDfw371'\n  b += '/Ya9lj6++c+2uSzv3Q5mDuj8Z1zzpX1t3ndyjXqcjzKnib2rE35T7MQOMeyMY97Eolm6jTbfHuE'\n  b += '9lNYjEfdIePpz35O3c02LZUM5UUa3pjvZ2Mc5LYR1XeU6eiGRWPzfsgWoPL4uRwzAsFyN1N+Tcv'\n  b += '+I8UBejgV/IbhCQe/hqRs4HVbwkHwa0/LB740NRvwE5gfdubOjrLvnXfSH1TqwIDPJT1EAi6MZw'\n  b += 'NXRvL1dDQt3re2HLKC6b8bCruLzxpJEaO3dx99ozZqiWM+pU+ZjxcARGTCUi6aEC/7R/FOrzjHf'\n  b += 'a3gH7RwDds+ewmz3+safEo9I+5/bKYijJnY/3oF921QWAvWBwSmCQX4h9jW1w5Vm6GrqS/1oqqq'\n  b += 'XZmpv69I224nI5Ca+pxYhr8Go48DC9szeGJ5wjqUDY04XUiAtpLPWdxT89G6gf6WJU+ZFGqK/nT'\n  b += '7Vba1ffbKS+kez0XH0XnUv6slEn9TPOc3TBqOcoWuOdiV68lOjwY5qTsTiws34P2ZG0UvMCXfGe'\n  b += 'pA/WHM9fJt35ByuP0yFgd0xez3rgdbijHnvvcs1u9PkHq/PAbPmIi/urzJh5QWTnWWA9mK010iw'\n  b += 'ycdnZflMYxUnayJqtdqc7Np5vCmhmGpQ84TnPz/wP0s4m1Ms+Zm4KgMO5U8VK4d5wF/S95dmzdD'\n  b += 'mxV18JVNtOs/oZXsEPIucebnKQPxl3cuZmg3k8XzfDEz7DH7h8fuPfS35/cAUFHHMZvioKfnj9D'\n  b += 'F/8pMvwD68gw65kGMvst26Gz/gMn7mCDDsuw+vCNVU2kuE5n+EfXUGG/FR2ek3xwiee4MHM5/aY'\n  b += '5lY90brME4+seaJ5mScW1zyRXeaJFz8x+kTjMk88u+aJ9DJPnF/zRHKZJ86teSK+zBOPr3kiusw'\n  b += 'Tp9c8EV6uddc8YS7zxAu/OfJEm4uzPbz8h4bJaMmSHew3d0DtBUs4ciAmHm4fzq771TGMI64X1v'\n  b += 'D2A2gNCTsZMi0B9wHUWE8q4rBll1CzJYr/aFKH4o9co3quEZVXo7k2nVqzHxJJ33lSelgVAdjnu'\n  b += 'lgFO5dAwdB3uK4aiduQEVCYqwtqDbOfZEcuuspFKFZW60BB4t/rIkPA6/uXn6yD6ws+60o9SDOP'\n  b += '6hD8DFqMfVCQLxoZL+KcXFNhhpW/MtWt6gt8yd1CFx/W9eIMojKVem9eIIT0BOmaxBIkGuRQ9O1'\n  b += '1CwEXtBDp+6DZjaQO/VSCnNZX3gWtfFi3V3BB8o5AHnDigHyGIdD4ftMIlxhz13t5mCpjVNq+O1'\n  b += 'sTnqnivlKm9+2uRLJbpO9y5FKspoNahy9Udyh6ij+Nqq5Zwfolor7n50EhMJr+23CYpX+cK87sQ'\n  b += 'BKHToseiGTBhcKoYqeKDTyCVBPqa/v5fqhh4poIsZyFEFsUAkPCr4jCMoqmkrXCL/girhP7Dh8b'\n  b += '1mNF4sVEjIzqkRFkXnbPRnGuI+KwF1omx3+mxYopseTT4vFH5a+LMqNR7/BR4WjUEfBCIyaqx4A'\n  b += 'vGiqgrtvOORncZSRwBn4L/0jkb7Tq23nfISikUcZKBOeEbCVsDqQKkauCB4GuKnCPr4CDt3aVcL'\n  b += 'jXriIOENtVxiFluwo5CG1XKYet7SrmQLdd5Rwat6ugg+l2lXT43VrRl5M1RiJrhJlZTdooPvUid'\n  b += '7Tf0zFKEUOR5wxLEf9hxIGCbENxYBG3v9QIm3K+v+SpFqgg4SFKjvE7gwwdByFfQOT9WaF4EF2f'\n  b += 'Sv0xyl8zZ3fqKvE3urYyt4H6rtlPiB4uks0yFGbcc9joa+dkl7+7ztRiT3BPhX7nuBwKtBy5XvJ'\n  b += '/G8Lcn15lpT12KZ+M5OBOgBccM0z+jTCcJ7KPARHUbTzDyyH02SFcpfAZwBKb8p2ffQJkzh0lhD'\n  b += 'G6HLmU5Tm+6kUjW+FA1kOMnrAKucCQB8Na/kqKgFfw9nnNgFVbFQTB1BeqLSw5RqawldrrT9LGk'\n  b += '8XwkFenuQyEAopRwdDT+pOFGYKuM4Ra5PVySCTFhD5P7JmiArkHfuquUDBeRKRBrPtUriZFGqHo'\n  b += 'KyOUH5lj+UCXrPxWxfPjlDgXwWFoT9DSyIt0r4x9HS/x02nUQb5snTN/v8D6tuq1skUFuqTgHNJ'\n  b += 'qI0SZOYZSDiC7AxtF0TqHtn8GGmZkzVc/a+8a/u45e5fVn3rLrvB8WB9ekJnMlcn9+b8o4M8XXh'\n  b += '88FtI8RDVVpegIRLxgn7I1F1VoG0hBQoyk5/3opuACrdP27j5+S/DHcjlz/EeCP5LL7PitwVdM+'\n  b += 'fXPPCGHfOS2+Ji9WbQjlof804lDjJutvugyPEQ4twKr3KW/Ubyf6niuYBFmLA7sMm3aTOMS2q/f'\n  b += 'fqJT1BOJBNzAtQ4V1F23gQdeeUJBeeAnyBs7tnsNXu3lIIrLk4qhgyWPN3oOEHDPxql9hdkHsaY'\n  b += 'p9MXzA1FPwWrYblK+GLfzT4f2y0TR7GLuS0iB6JSMnOCmIJceJ0KrXYhvDDuh4LXhy78+yPfRzV'\n  b += 'UWwawf7aMkNRKTuHk19eAr0Xh4q6syn2tHe/J/azQjCnyQC7l/1i+4y6VqehIun3vGdtwPl8f+y'\n  b += 'Lnusuw4BUXq/wOx1+nPUNC6KQj843LFRU2aL7ClQ6NCRhXux4dsa93HbCtQTrEH55IGjwgwVYpo'\n  b += 'peDbIhy3fil07RBoDQI3XU6yBkR/ckeycZZYzvsc27a051GZc1AxP3LhCUKTudqVD9mr8gfKZQR'\n  b += '8JA3a72+E8fzkUdgl7uxl4oG0BXczvaY4Ik3gbgecufGzFXdFry1uSVfhbhr2jPi5GneTva44KU'\n  b += '3ibqI3Jr5K23CXi3NTDoIKuCzl4rk0RRc7cXXKQFMBB6bN4sd0TUG3KHHcO9J/hdMSRPTPuVaM+'\n  b += 'DaD5kAMBDfXEsTFtd6K7xrx5dtUTBeb1Z+wljIrrvEpp8WvLy+mnIdhXkvZKaZ9yinx7xsvtjsf'\n  b += 'xfFaypyORpJyu/r5Fducl+NYLeVEsd2n3Cb+ft1i0vkvdWspJ4ttPuWk+P11iqudB1SnlnK6mPQ'\n  b += 'pr/b+f+3iKudG1a4lLoqrfeKrvB9gq9jqfLFatcQ7iqt84q2n+qm4tjWLCWej2awlnim2+sQT9B'\n  b += '7EOSwrtjivMLgVnSqy2iM7iwn/yJaKv714xak5bmf74ZCLoCk2n1IHwdA5CJpi0yl1Dwyde6Ap8'\n  b += 'lPqHBg650BTjJ9S18DQuQaaYuyUOgaGzjHQwEeo2HJKQsTTr2lDQnHtE1e/FgPSytevzQBx9mNA'\n  b += 'hwHqRYiA7il1NmS+k+0/TU1jHv4R10VFES4d2WX3Htz+EbdHPOht+rf04yognLe7Pxig2qXlDkF'\n  b += 'NgyoVIMbljCDx2NNTdCejjsypr3eDGiknPYeJsQGDJWpaDwzXC4xGA90hjgc9Tk1pvGed10QCQQ'\n  b += 'NjEviPt6UyRDcoQlmdZ6jWxj4IesQM5U9YofI1AJ5gNZLLVAPW7UVzpBprA6PRwHWqIXP3FdQDu'\n  b += 'vD839Ad3lu2OAFbwKOIXN3gr3b7q1v8FQja5AogOHp5rrp8urpcqS7PV5cXqstnqsvV6vJZdwlK'\n  b += 'VgIMJQfbBN6MBRUnvIPIT3ZMHQDqTyLayDK9P/83vNgzR3sa4ByQ9sk9GUsvBWxAN+Bi9pR0ayh'\n  b += 'Wh0MNGUqHKUNsLTBcLzAaDdyww6BxpZXhy/RZ+yON0Mxv48oHQEasfEfFOzI5Ko6R8lvo77T+Tu'\n  b += 'rvhP7m+tvR30x/Y/0N7G8/JVBNxr+c+eg7eYR+k0foM3mEyDhHBPmmz1Wiz1WFSDlH7IeAudEui'\n  b += '5hV7RKNmdiuzZi97aKMGd+uxlgi7DKMNcWuv1iE7MKLVcuuuFjm7FKLddGusRHRA5T1tMFJeHOR'\n  b += 'nlJfBFvyBK64Cfx0EzjxJvDwTeD+m8A3OAEgQAK0gARQAkkxjT/XHC1SD9ADxwM3rx+RBvD+sNo'\n  b += 'U3gFWG8V7vGrzeBdXbSjvnKpNVsEBSeN5N3ltRu8Urw3q/d+1aW3F3T2boEJILzsQNcdLMhrpgv'\n  b += 'APPUaqptPGykYaqznSWK2RxmqPNFZnpLG6I401NtJY4yONlW/YWLIv6jWwgZYJAGti41auhPmtX'\n  b += 'P/Gb+WqN3Yr17qublZkd6OwBy3ZPzVlw5XJDi21W7r2d1JH5XtSSdsiMXadVd8auxEe17C8IbbT'\n  b += '5WJ1vI1wbo6EXpRa379KsaOewJ8cmFbR/f24pEvsgal+Slv9yYH45DiO0AbY9xKynDZx2m2QgK9'\n  b += 'Jfj2YLglNKMDeekltXilnPIjJA/s14yJW0r24XPicomNld5Nf5gFkYrMW0j0w4TFJeeZzQroX0e'\n  b += '0ZR5s1pRbSvcY6RUep+03W4B1S9CYJWhuOc2/j4quxPVv4LEwuouui24WaICjDm4J7xIVhlS27E'\n  b += 'tChWJt8kXie7s4eycUVRhtj9jY6JjDRQF+vShntP9ZbH9eUiTZBLOehdTpOWwAcuX+PTbAY6vCR'\n  b += '8rSlPrXxd0k8Le3I2u7HmX0o3y7d7wYAUauQDDucfd1QfBIuSRvIc/GAJngPSHPokOtnb1B+MqP'\n  b += 'j4+4ivE9WZjAsxj4bXyIpw7K3vYiUgPmSDwm0ShRt4pB7D3I5SQa0P0nNBNEtY/e5UTsF4ZWwFn'\n  b += 'adOyhlyJmXzUuMKMQgJeuqtGxMY6Bey0AJQ9I+ASUV90zV2fU3SRwYMj21X39chVFNRc7dXCMRV'\n  b += 'IcafYGEyF/RtL1dHROFbA/6o1xD62lPhoNh4r5+x6WKXap06K0uBGlOsP8vxoP+FhWGuUGzasMm'\n  b += 'fNhxhl2wYVt92IJQB9qwq3zYC3jDddG5mLe4XLaXl4xWFkoiFKUlHrgA8JFGC5VecZzSgH6bbJJ'\n  b += 'v8jC49aZqcNe7qk0UqKwvEZdSQPgqGG7VjIjNhxoFjdbRRvFOkIVruMdsJarmwPCrGgJGU1UTgG'\n  b += 'W3qvyJdSu/aFyRlfMRxWnVXm50WLUAA+LbY0zbo11s1qYQ/Np6U4Rc1qumEDRbU0gjhDVSSodFW'\n  b += '4VL49D8mI3zJn5XOi41LhBvpKYW9hIZlb/qxfwrMyoUxDcTUxVNd9NPGFUK8mLVXaDpTf7VUOhQ'\n  b += 'l2M7fcVHoRUhVv85e84TaATcdEXvOnRr0+W/HVUPdIcfKMP8M8k6iTevSWyD8kcRd+6qgdz6uL0'\n  b += 'LC8egTlj457ui4zvw8e4YVAl3DPIPVM/ZqCrPi5Nw4GU9z22DdoaXp7fbhUUuj09pRvV3vdO+6+'\n  b += 'TCt4Ohl0lK/zK5HXrZ6WvgKC7ZvgJqZV5efAV82qUI166p9MUedMES27ffiRbw++BfLqGslH0S7'\n  b += 'caqsBJxPdaWRVt1vdqs13KXqwyrwQoMFd2mu2yfXDvcJ9eO5MzKspqs4NoaXatV2Ki+ZSQDCmVx'\n  b += 'Y2vdVrj2778V9IHNwy/q6u1li8Eym3XKrHqDquP2mqRot1XtNIPv+2fAz1A3vS2z19PUPRRqAKq'\n  b += 'n82+kB5Ub4KBSAwwxC5gy0GDSC2DKM3dMgUgjKXMeeF302+2Ec8eUkAskQgthBMQ/BS1EbK9JAY'\n  b += 'Eg7nIWwgPdRPgqB3eW5FY6WP7UQnZgSjz8wJcaky0CMhfbKAsLsTIX9JN9XRQlxTQZw5szKN9qJ'\n  b += '1VI2+Bp/8kGkHZjmhAeHuCWGpenAJf/lMLl213MQcHWL1cRvqpUCKFQH98BvUF5DjHnfAyl6ozp'\n  b += 'EA8xgVDB/hy0e0BphgMoux0GtsYpLz5EHHP38wFoCjy7RGz34540InakEQTJwW4hOdBNw5H87yQ'\n  b += '2NvJH6+A1jfprvgxU9QZ4L47O2RoTjtOOxw9BEAJLhlTZA1LHHkA/UFQmzo810B3osAben+H9IM'\n  b += 'BMDsJ4nyCTr6cMRRgYmtyvkothHQaGRp2BgSSOHSw/ysAQk4EhdW3GOmW2lCiItl7sqhWz/PyR1'\n  b += 'ntsqI3u6Bp1u82fMv2QKJZihgmbdUhc7piS3WZ+2wbZo30TpfBA5mSeFNaPmLo4s48YmHb8brd/'\n  b += 'P9Ww+Uf51j6Fgom8yDZb+UB5hImmZPGWF+O9KE/7Q2k4aZdbeIHTs7RHgEdqNWbCHT3x+kRvAiA'\n  b += 'yo+OkeHROQNUBdFY6GHag3LDHL2g1ADc5xk+lN04p03hpDvfzJVVGTIsyYswG2phr7z/U37Qkao'\n  b += 'jpunIBh9wu0owxzeYlUUBMjyogOkjTZZotS6Oqh2k5OreRpsM0E0uidBhKw1M20rSZZuuSqBuG0'\n  b += 'kwQqcCmaTHNVUuiaBhKMykSzsNwGbJprl4SFUMtzan+pEi1G0iWMVm2JMqFoWTbRBqeIlmDyRpL'\n  b += 'olYYSrZd1QpIljJZuiQKhaFkUyJ9B/r9tffDW+ewfQSpkyXRJdRSV7oEVSTEqkjojztVwibVJMQ'\n  b += '2cMzpEjarKgGBXadM2KK6BAR2nDZhQpUJCGw7dcJW1SYgsOX0CclcMX2KQYlTKKTASZuyIU2nUW'\n  b += 'ggZLsNSZ1KIUPINhvScDqFqxEyaUMyp1S4SnUKyDwWvaA92YaUeZ5Iw+58SLmKcQc9XOfvT8Ubr'\n  b += 'QIkBudLeIAT0HV3dmPaHPcjQfMge2F4GHTQEKt2edy123DGgUIxw6GVlLodoC9jyeGBWzB1xcIC'\n  b += 'i1l/DDJZRVydwb8DU+UbB73xIl3qbbJn+5wS5TY+114jFKXCOCQJOJkAUeRI0YD4bNNRAocGVMT'\n  b += '1cnmjWI71QOrE96cQFKc07rKB+al+Ay4uoKeKyleC2Lklwj5BMOjS3YWVbtK5a8rOHWPUubRpbl'\n  b += 'Rkg3KmfPHEk468aehOm82wpdBiMdsSzcW2tDMJ2pLN1bLfJxJBFou6go0Y4NjdSCoCuTV9ADn3Z'\n  b += 'PQUJT9AxqZLbdOlVdNlVdPZMWSTjzFjg4aLaw0XvUzDQXdOOT/fDuAZgi4XcQ96tH4EcF1uB9Bw'\n  b += 'Cc+laLhIGw70BJiV0XCGDWdL24HbLQvSYQ8SqLoQfiatEGd4DNf1HmWz2VnqpFFxBuErcC9qcHz'\n  b += 'TRXu4T8xIn+jdf1xz991UYBfgYiWwC7sHQ7ALt4vP++5dYli1FnaBKAni+36DePJUkAv05BFPq7'\n  b += 'DO7adYCHsOqiP8zhriwgyspxPv+J5Uju9t8W4n4sK5YcSFPTw3E4hBxCwCFFAMJEyAAkB9Y+guZ'\n  b += 'FdCRVwAMoEgLgi+whkziq9wuhYiQAEnzSjiwj2CuHDM1NEWFgyhCmpoC5PSTNOumYYhArBxClyD'\n  b += 'JQ4MQBtsBpkHgriwUENcOG5IaWGvFhy1n5FwcsspueDadjxHmdbxYbyFBbMrWo5cS4mwoVy25/H'\n  b += '/ZuRC2/axWMAPHHkn3zhxY3g2kkuSd54hixiecobKhuSdj9H0tCLvxC5D2qUjjlEQsfGPg01At0'\n  b += 'QOMyEWzIRUMBOg5hXyTuWmWouZELsqn4kUBmHVASOsOGAE5/PE0j9kbgyXowrSYNmRbT77vvXZ8'\n  b += 'wiL8L7KlYnwBeffXUVH5fPvq5Hb1Sg2P52aNtmzImcvtUxQJhF3iRAyopmqE4dFkMgo+5TcO+Yp'\n  b += 'SUej/MpuX609Xa4Qj3VsWNenqf7K85cUsrFVVO/tOIA/fdJD+/l3vEnllsIlJfewwo9V2NnWMEq'\n  b += 'RirbWYpaUVby9WQmpmMyb8BObD9CJfD1OcR2mENEVnpSxGqmYzPAqhgq9VoiERq/u9XL3dpwD1R'\n  b += 'g25v+Sx+ibeUhTtMC3M12TV4lQ+mhYowrTppTwVi1cGkrCU22AM84xQhstqN29XfTawjHbdwaCg'\n  b += 'fqOrtiwxIcJB+85uAz4MGATYez2Mx+0W4wqo10CMn1ddMZezhKY0tVRhHgqFayaMNSuCRxegVY5'\n  b += 'oPCzKhyEn1WxIPysCgThZ1UWcof6wnDw+CIFioDgRmVAqxwdj5Tb/3Qq/jgL/ruR74PfTVL/bmA'\n  b += 'bS4xMNrjIx+X+5qI+WqsvRp6R72YlrET/RuFNq+8s01aQsR/rfX1A1XN0TXyzv6eEd+i7dSH+66'\n  b += 'iCRr+Q0Syrz7H6CpKiaoSXf1089KbLV6A+BdRHvBvZtfiRr2T96aP+xvqUdKt20a2+DKKOGJ3s3'\n  b += 'BeD7q8FyQec+I9ruBqB/+DcZyqNsWE4p6FUZ0M353Iy8txw0vgodCazJSyT7NW/ROfplf+K+I5A'\n  b += '85ZPINaxWv8CunLny+YacoHfwop+C2BgJIoyEFaWTXfISy3+HnzUolEftbXeZInzHat5k5khbzL'\n  b += '1DFs2a5y9yEHnI8XZS9vb+2uJK8OiqYX4sVYFLTrb+LV+Xn58D7urBeJRJViyMtNJiHgsDfmFLU'\n  b += 'Ti1LXqFoQhfzVxxoIKSf2yNMx5aW3kZ7YaqS9dssaNC0EyNCItZoIpQBkcvTsa3ajkLXAuC0Z9z'\n  b += 'eQNgSQe8QNbjh1MKDG3Gs6RSv3DjLiG9ZtrwpvyeqrDpO/iqiCRpHTwv9LKqWKges+0qHp/KuCr'\n  b += 'sTRR3f0rq8BgR1y/4spzTH387KVz+BLdrhuFvk0T1MY7dSQs5MKTXt0ea5CkBuqJcB7+Smo2012'\n  b += 's4YQF1EXZEv26QFSsErpSNL5JXVWMCBwKbUGh0i68Aplq35Mcdi6UwK2i9nUaM05Mqo6LyheoMD'\n  b += '3esFs2rzMUBfyCDev6sIsMewEQwD5slWGXbNi4D4NTSHRddDH1+sZVe7ki/ad9V5uWk0p5rbyh4'\n  b += 'n8pmr6TRJV2ClpBmU4clt5K6JKh6pmeJRoadoaN404ZZ7zyEI3XlMlVVdACQZ3K5IonYknLSQmd'\n  b += 'IbpJksTqTC1Iy6K+zQj6bEcfle1OzYuvajPvOYNjBPS31HTi+AAm1tGISu6Cpu1yb9fyRbUSn2+'\n  b += 'rluMiedSlU9HrRIOlBleuqES2dai6+Yy9qzr4tL2rutYeVoqqU0/EtU41rlMFYxXt0qo0s7m+Nl'\n  b += 'DaUFe1N+lUuhlHT88EukWV7bK8TVTDoYFPZFEXnTOJ+0TsV/pXkaB85n8Wy/h64y4hHbouumdXd'\n  b += 'LsSJXXKOP/LtC9yIaIDxPT8yXcRKjIGgqRLA7+gWFwFRhPdTSzREujkeLk9RZY7lbPZPnHHlJ3c'\n  b += 'xIhmpk8zmp0CBGOrcVCsaAXBdM/B/H0G8TtERFf0mgJCmtBdB9Cj9EVIy/nXCT7p3TjlIKqlUS2'\n  b += 'Ngm3JEcHAfKuAjt4rOJ1vEXTNH8PcAerFqHwVPCttx35kmdBtBMgE6mvzxvCwgHpKQ/5tpKRQaq'\n  b += 'ADQ9caKwCLc32Q0dzmAgFdHqaNzORADJryR1m3yT5ZvSMhhSIt9IlESvMw4eMHJVSJ0l6AKYHRW'\n  b += 'J9i0BCsrtJe2XCm9DpJaKnFg7bN7GQiFX6E9rP51x1O+M+ntWqAdcwVu5SBiqq+x3TN9nZJpNIT'\n  b += '8gwbe61Xi1gXnbfPPJu0pbM2SrTiErHcn1A81/zXI+n5TyXy++syD+d/iu/9TEJhAMfg6UZQXdj'\n  b += 'L5z9JoYDtObu0njxrb45/SoUC70vMlCO7wBdB6VB+lf1+Hg4VXuSEu3jIXSy6iwfdxXF3ccxdLL'\n  b += 'iLF41evOAunncXWDwTuXzOhV10F8+6i1V38Yy7uOAuzruLFXfxtLs45y6e0ouZcJmDSC1MQkc2c'\n  b += 'LMYIMlJHHdc3jhziz0IN7OR4wbwcTerhVQs07eG8TMmEYE+qecTM2IQhZC3yzKa1ILczp/JfRbL'\n  b += 'mnmg6rSuFpI7B8+j7WM3ou0Ycmwlv5oRQjIgX2PFKle+sky6e85IDc4X94F2pXGfOE3FAlfOTUI'\n  b += '6EC10wyVKfaJswOywU9G5zecU3ycjHUhT5eR+sZsTgoaldEgl75QbQEqGav7xn3kSIvKgzO4ncF'\n  b += '4aiTctLBdRiesD04f8m0phIm3K11SEB7pYzn4tvJOCtw984MlgIBib+2jUOQ+jPXO94hLxFTZ/o'\n  b += 'qMHAplst353wB7SThiJLTZy2N+lD8RwEA1shXvTrjGLKK8ycgifL2inUbCwnDxcTv6E3YSRMiUq'\n  b += 'v/FzTwYQCxrx1X8pmIObe49dM+B72j1uIKHLD25nsc19RAHGo/uF74/vbqCtEPjf21ZNWoPdSWD'\n  b += 'X3/zQ37WtkMNIW0nQUFutPnTlbfWuE2ir1n9PW+HRqq2+9v7Dg/Jr7QP28pdP28tfnjxwyF7/7U'\n  b += 'vI8pcutW6zN1/9mo0YO3AIEb/6iZ8YlP0Dh3iI+z9/1t607YgiFeKceKKWD9sxmn9e1Eu/Gsot9'\n  b += 'BXKSlw++jNP1sBj66k/bl4utZ0q37UbBf3UV+4blGf/8FV3zLU/q0LYhbSyT1vvcIu9/rqAKeGa'\n  b += 'Ay6jNjiDGhxx5AwaO2YRhgidicNV0SPPrEJy1IQdLupS7VgorA2xHgujGpG7x98QTJGoloRMGXL'\n  b += 'kqmBZapAsoSPpCNVWMpIbOckOnYhxsJvRM6yIR6JhwJSZwtShUfqu1EQOid3hczgELPffNl6ELA'\n  b += 'K4DksNoowKC8T5cLfqJ04NV3KSpH4cx0kFgR05hyZaU5VJeLCSl7tLqr7oFGm9h4baRYIc/MtwN'\n  b += '3nbx9W6pAFZNQvtc+kFPTU35dSuMQGzaqnwYfjO4+3wqZbjEXEtb7RApsb0YYZYPsxalg9Th60x'\n  b += 'ODVR9kSH73L1s8tBr1Hp10dR2QlVWNEHlGfO2a3TTHn6dx0EdAzNTiIcX2UsU2hC47P8d0OawsP'\n  b += 'eHWpgGJPnf5HYkW//2G1zx5autNnY40Kyj5pjYiMne6HNul142V9rfzISoWPbiN2A/Sh3iohAoN'\n  b += 'Il3XH9PWbkgQXMiw+ZQUmlUlL+PDcRv20ffpU+LGeSCAY66x0XEru7pM5/BjtsMevHuQPV5X4a+'\n  b += 'k4cTvI/Ch35mT2DkDo2JM8CjyY8UGBTn9r2WI5kSx9yd449fZ8+2oZbs2w7TTkQl9/WLl/4XWJt'\n  b += 'P+YbmnXPv8Z9+1v7RHvB0iD75tDtm5Hm68QblQUHfiXVuyekL3Iw2dN1w1UNJ70MxBV0v2/Scw5'\n  b += 'YCrgVsX6T5zfm/+lEOyI+VMEBsFhjdoyEEbf2h3Gc485HiwiEfGja8/NRJ3mZJNgDfjKhzdZGSb'\n  b += 'DF+7Oo83IvAqHdxbDDes5qt0Gxog1xgzTErGul3VXPhvln2Dm3SJLdaKtA2CKCglaDkdPg6wCWI'\n  b += '8a3YnONO0aQG9MdH4w7Phh3fDDu+GDc8cG444Nxxwfjjg/GHR+MOz4Yd3yQ+TWWy+dc2EV38ay7'\n  b += 'WHUXz7iLC+7ivLtYcRdPu4tz7kKPD4bHh1BXCbDUqbbmZidfchg1lJ1fqmsmbav+ufE6Mhd5c4X'\n  b += 'gUQtLYGlhr4562DARao2qe5JK3RLXgoaUID6LZeM0ByKP72opRVeg5wcVdzF+oxNEDaXIniASPU'\n  b += 'EEqmY1wqAjpwg7foT8HDKFAbf/yVyRcfsfOyYdx6MDWUctlTskhNUhIdRDwvMJDgnzhNsWhIZme'\n  b += 'X2vRfsUsMW8irDTYhLVBLGlmSKzfTIgZUzRLOM5IfOWwU/O9AasViK3F65YtVO3y21ADNAQp1X4'\n  b += 'OWcADDaeDb5U5USLrffhRCA/ArUFtU+8fm20nzqaZTYndYnt3BMAwicmKTdQxCFEKuqPss1RCPu'\n  b += 'd9Rp2qJC+G4fBGn13aKJ2la7hILdd6vXIvhug+DaEKsdVKmTf9nQHInNpBW7NYe0DxpuXpfoOJb'\n  b += 'NQM2tIZmxll5mAoGh2V8IcHqLF1VauSGrM4fK0pw2HGihl7rbwsFyiMVZKbxNTzxjNg+HcONDlJ'\n  b += 'NeWlm7C0DVwb23IW6v2D9YtQiBFCCvmckPmcihtUzKXu+MSoORqzOWGzOXpATaMYy9n5kPs5f8+'\n  b += 'MZOYXvcMhClJRn4uZdzEMdjbTBPH3hYaNfYIdQXSYZboKinf1ZGw2MNa9upet7jKnga39rICK+O'\n  b += 'WXqfY3BsrNtH8LOpRFixUZrbdAsC8TB4mAYL9wl5szB3C9f3lwt9G4IKevP+Q404oV4DhRUZTu6'\n  b += '/Y/jYbsvVt99m/Dfs3608W6dyg6Nrpqr9NiEMBNAeRQtu+4hVvs5ltsQmjsoW/dh841h+/b87+j'\n  b += 's/dN4BVXaPowDxQuSLAfZnBIdBWY9xWoUlLPdI65jpx2DNrWOYiDbSpUK3xOXKXCXALQ5oDDXQB'\n  b += '8IqrgmzRtqFoYyxadL8tClONDYbSjCNNV4pv00iLoBXrjZKgURI2SsJGSftdO+sNim2DYrIPKP7'\n  b += 'LNUpWNPvbbaPYX98o42iUTs+2aW/StkpqW2LctgzaL7brtFKIdoqrB/2rxfjU9v+gf5XA5thxMO'\n  b += 'hvFXvXRjEx6E+IQeyWYvugv0UsZrNi86C/WUxqo2LToL9JbG7bRT7o59yI0Wz1qSRMxB24QkgTd'\n  b += '2CImBzS2OQg3yRQ495Rk3cMzQUaR0MEh1poavsxvUqjEltSeJUmtL2yyWTcYi/n/YHjDf2Bsf8j'\n  b += 'GIE6lc4rX1s5A6EI5cYP7Hc5254QZ8+oPPNk3SE4giNoVDkEEzcKScrVJ8Uh2JPqri23cwhep/D'\n  b += 'x5d1hN6qAwH5pw72SL6CBygPOD21RTnumwnw7Y+pdAF9h6SXO4IqGbs98LR515SoUv1aY+2pr0W'\n  b += 'EYCA5aMucsTLQvaRN9A9U50jTCMrxBl8Il+e+tVYwWRB2E1UHojNdjw0GooQ5ChBZr/3Vipp2Pr'\n  b += 'YxhSkFUH9ocMdbpq69nQ9SIdcuxfqdmi7NAYlZvoeTZT8dFpdjPK3uh/ibdbG5W1a0zNIFQY4tu'\n  b += 'fydEvdj39kDxQM1Z3uQUvTXzFrsV72+FTWvNm5Vd2b8a77Shkz7UbsntBB3SG3Z7BSFnQ6dQZRs'\n  b += '6XQHN2fdcQ5C8WJtQEPjENZSiKb+FJZ9zo26nA4w6b7Yl0KzjRVst2zYXXbW0mSjyIfsZkTf9KD'\n  b += 'Nv2t9AQrhQq2rXG0oJY3LDm4NBe5uptV0gOL7O3Ea0tVo+1+1hZacDmlRntkOaYIhjarYwrWJM7'\n  b += 'R1lW9wuNulmXfQdHTunOlsp9Fbijficvc5W72x7deH6Y1vh+mCqcO1ea/FaWweczZ0tjuQIza5U'\n  b += 'oeVLD4ZnKXfH/u8sNMX59eOp47C4lDgD65nKIkHY2EgQMGxQ7XnZ1CJ2Fv+GOexoQ83+O/4rYid'\n  b += '8EymuaPoaOqNXoaCbcXMUj4NKCbYc0uY3FJQDl9SOVseDQJvm59awyF3c2K453oj6jMa6a22an/'\n  b += 'MschdrNs2XPIvcxSGb5kuORe5Szaa5YpED4uMLKNuFRM2x6rbNF82uaCWpN4CchDHNJIP8c0YuJ'\n  b += 'EH+X1mhFeB1sqnPMeYZUcL4TMPzST/dFS0n+lKNSPVNq4nLncboZItDpcCQPcIZF29Ev6eccTar'\n  b += 'Yc64mv0zifk25oyLHWfcxUQ445AXrZ7PuItLifLCVUbPUDSfx80jNS642fKhdw+xv51PbgxXk+o'\n  b += 'pm7WYSp+tsb+tYw791E9X5tAkh3vWRf+K3/IsG5qz2apc+xMQq4F5KSzS+7xxmt1RZwQ1HwgqF5'\n  b += '317lsqGkuOFhhH40aVpOGTCAiRJ9U9xc0DDDv0jJweXOp1lM1XTmv2ZaHm5Ih6O6AGlkwSNZuJD'\n  b += 'w3FVm9xCbLLJegcokp1bQIl/6XHiDvKx75p6J7qmiaRxomFzdjV2bhmge2eI/+NNm4S8zJNMvwi'\n  b += 'rqixFrl9RJiDE0omhmIE+clFZi8XiWaIxFNnOBKX9L+KfdE4vUgPYX1JhDfZtWidbjlgF9WT1RK'\n  b += 'tR7U8JDhJsArZOf1Liemsbx32ox4S5GQo0iT8JggniZsaignWx6itVFQTHRkPtxCpldSwrZQqsi'\n  b += 'u5vENccIaoNVspMdUyHjLDmWo52qEhU63UG+YueLMsMddyFmDD5lpZJUrz4aIqchIzVwyxjP3RQ'\n  b += 'ung11hs1e2lYLHVHrHY6tQsumCx1a1ZcMFia8yjVqxnsZXUcpd6DtttNWq5r0bOWktyX4ydxZdY'\n  b += 'bxk1kzJ65ay3aKo3ZMFFQ70hKy6a6Q1ZctFIb31rrnCtNZeprLla3loLHdZeY83V8f2NDup6izp'\n  b += '0y5ja4jlrrvOJaEBX4AIOcG5nVdpXE+VRbgehicCuLPOBhRGKA68tbdYsgLmB9iQSzWEFWVJpRC'\n  b += 'PdjncqTWNj2IRW1ZUyZtQRxOtPHRFAXfvqdIIE31lHlRoNq1JXo4p1oipi5FKuOo2o7Jq/LaGgV'\n  b += 'ZDghWE1Kj1OJEbsA2sVC9apWKuIq3yqyiw4zWBSRHWDZVQPXAlFe+gpR4tQq9KIardZqXVj9era'\n  b += 'qFwNKVdQJVodKpvXWsaubEP6x7hoDzFp1M7LNPQUe2DRkdZzl5fBH//bxh0fXMEawyQa2ajWdQU'\n  b += 'bmvbZJAzhCm93fwWtFmYGst96C2TrC8bhI5Y/LHAHIbAsCyM4lsbjWBqPY2k8jqXxOJbG41gaj2'\n  b += 'NpKhxLU+FYmgrH0lQ4lqbCsTQVjqWpcCxNhWNpPI4l9nHfhKXT3uT4LbQh+Qbvunr3LO+26t3Xe'\n  b += 'XeN3n2Nd9+vd3/Cu+v1jtZTe39I776Fu1NldFi24NI+gZjawZoEGxovxAy9EDOkEPPGIJC08ZWk'\n  b += 'jSVtdiVpM0nbuZK0HUmbX0naXNJOXEnaCUk7eSVpJyXtdD9A2qCWNvBpA007XdsBXwqcwGRG5CW'\n  b += 'FSPDoAgbTmYLrOF1moUL+blznEvxc4tfyPQcpdROJwkUn1PJo9xcC2azs9oD+OATP7oruKhqnhL'\n  b += 'Puxw4I5JxauUHHfY8WxOR/m0JSJBdmRHBoNhQcgmrDZa7ytgLVSlSktaPHyIJEBIAi/3l7Tjhn/'\n  b += '0gb5ANhmQSZRtUq2GeFxDW2/ZgfS9c0yC0DwSIHO0mPUrMb5D2zquuwk9H+kibG+6d4LH4A6msV'\n  b += 'WtrryMssh4WVI8WTLkqErg+yy79T70SX6Z07RQK6Ue+INSN7hyDL6B1zeRngOj10KaB/xP8aous'\n  b += 'O0YUTdgycPPGPdYiOFO9/6iH6i0nY2HCIimsABqQ08wyaWbqWIzaVBppUdlH0dNVksbDlardu2H'\n  b += '+x9F8i/RdJ/2UK5ZHtFyCq/VP7iA7qOq1JREw6+/Zbd3dpvPVGEf7nG/RfWhtMl+m/5sv1X7J+/'\n  b += 'zVP9aNa/zVF/jjUfxG6TdwW9TOT8hfNIzAZ5NdFhYCtjO2/NnrxCPAt0HfRUN8RX72xpnpXNjxf'\n  b += 'tnrmMtWTyWPD6tG1Rqqnw7Mlc0ibtXyHVK9tq9di9Tg8163i/5pBX24GXf0lO8QXfvkf6ww6Urz'\n  b += '/qWfQDyXGnp1qLCTv6MciRCOAN8hK7FHBoUzFAvBFjG+wmgxHZRLVIf3JcFRHonLypAxH5RJFIp'\n  b += 'aJ4agJiSLXyuRw1KREkU5lejhqWqIKcrkMRxUStYOkL8NROyRqhuwww1EzErWTNDLDUfDADWyrY'\n  b += 'aKvsXnATGJu6YhrSmI8m7klJJXmPHLEtWVEpmeJy2pxmcR1XFynFteRuNzF5bW4XOImXNxELW5C'\n  b += '4iZd3GQtblLipl3cdC1uWuIKF1fU4gqJ2+HidtTidkjcjIubqcWhUUlAx3ajjexOm86O953tDyd'\n  b += 'en5YOccaNWJyvULLm5AyZcLP1Y2c5b6NF1pB5y36KMjI1yMbjZig32mczH32W7siJlz1dDAZF7f'\n  b += '0X1TtghZbyF4NK5iHf/gknb0rrpVn7WmVFlYdWnPN0LAKVc9COVcnPmeqdI7mIy/Y5U8uFumaX0'\n  b += '+lwqPSnQy01HzseDb3mOMUzeNlOn/S4E4pdCGUeewyyrqpSTOeb4HRdnuYrf3xYSHVcQQfWviVy'\n  b += 'ArWLkeacv1VMMy5GzjZDXnqJvlE+yzOJfwNEX6m/61Xl1BdK3Y2vaOD7XrlFh8wcxBQ+CZsVxhy'\n  b += 'GJsS0sqUQcY/nFqRIqEyp9SXvpewRXteP7yT/S3QQvqhixXHHFLYaB7lD5eJXRoqYhkXFzvgLjb'\n  b += 'rieCGU3cJr+7S0VNDLBHqM9EYbKwswnqKhJ1LB3oTrwI5+485uKHveBKZYMOJuw4Ta1pUisjLMZ'\n  b += 'SMlOYDWE5CWQO7CWuvTcw2UoskO7gZxviU/aKrEEj1aMDLDmSrDndgRY7tjU+wt3lO0j9ksE6Kg'\n  b += 'ls/8hmoJbesF5XP+bvGnnwzKneWLv+GM3NOiIXd0AoLizt8Rjy4q2HXqhaW2LhkaLFMkjFaZlk8'\n  b += 'veS2ldiFGcJ/72xmSQuC/a9+1K5qR00JcNHVfMy3bjknua+zWffHj8Nn9uNs4ZIPaBqa2r4lrWw'\n  b += 'nuaxZMfS8xEz5oZFtz3MjJ4piRFy0Yu7OZh1EiJKayt5HTxfbyJVM7VbRrG5zO3bCnbBedN9KMs'\n  b += '21TOgthKrq+Fofd+fZRTsAAFQQByyYhYNksBCxbhIBlQghYtgoBy1VCwHK1ELBMCgHLNiFgIRr/'\n  b += 'D4UqQ4yX3tGfOlUGYlAKEDjgv/UbYvqQiSFEU2RnLRG3tUVC1xGhXlfkgGMiOhwXaaNd8+qW1iH'\n  b += 'yP3iovPb+uT7QguZoNG27OnJUWtuLfKlOWga+K2ZVRI5Za1sxvlRnK3NJMkmCJXmyGFuq05S5JB'\n  b += '1JgpX56qK7NMRPpklySYIF+qqiszTESqZJJiQJ1umtRXtpiItMk0xKEizXE0VraYiBTJNMS5Jp2'\n  b += 'iM2l+qMYy5JIUkK0stlS8UWn2SzS7JDkuwgr1xjicRykmSTSzIjSWa4PU5JKIcd0OCgxu+U+J3t'\n  b += '30lMAs1TobpUmJzYFiuf+dwTYm2SYRbeH++JdIIL+un1wT1dwU4kOcb1QQfwieJom8CI/GR4L9k'\n  b += 'luE0Sh5YMa91iIm4r4hSSAWP4XhJ9opNjIRal84ZwNDMxLWBt37RpioGdspibCLuVTulBhSrSV9'\n  b += '6pcjViFCil0OJRefFzZJcPhRsl/7kEDp/gtwRlpSMMMfQytWXfR8avYD/np6Hk+x1/JH31YcOMy'\n  b += 'nAN69xLvTyNBBpiMW8EPfk2nmVSKFFk0PNbC/JHoBfpkBKrPKxwqY6ITPLXq7UvIAZCUr2AEMfV'\n  b += 'C5KNX1AEwNNft1ptMsCUryrPP+6oGzXgWRdwmXon4gXhihXvcRk87zOABYQvZ/xy5XQ+eoHjJwg'\n  b += 'cPwGGVP4eceeyc+WnEtOcF95TsQnYMSiMcHlGNwX2c9i7gP/iXVEm+AsF8CKE+9L+5OG8gKfTwF'\n  b += 'VWykBOZzGV7M4BIi2yO8iBQwt4mkHzCKHm87aTUQnhpO41i7TXosApLqfFNGiGNzGW9r3F+1Ca2'\n  b += 'HYD/ersGKRPhG4mYnXGg2NDEJImNzpcNAf9NjycPmDA9NmmYb19ll4AbQF/mBAsCDsN25WPsT7H'\n  b += 'zvo5mipHU88x0RynBVRjEsg4yMDugPrEe+R3jac3hQFwbDGtt/DlpL0Efl0xSWdBSDoQr4aAgFg'\n  b += 'ZWihSJNBAnOh2SAvCl4AIUiPtPzHa/trEybrdYOgckHJQwnWfDnpS2kCmLRQ4VIhiV2BCmDdQNj'\n  b += 'W7ZREDGcjOCWa0rLYZsyK5Q76GoiBv4GF9YaAMQjtcsezGCR4kRtzZ7LB9KBH412X4eO9Qfj6Ff'\n  b += 'w0E/pXCBMK/BmvhX/GK2T6b9gYxYjNlgX9qq2icraIHfw1Ji0d8Qli0BQRmKbiFJOE4Njw3qVc8'\n  b += 'sX5Dh+BJrEG8qyY5YeH27IrOGEVGJAQh7O0CCpoc+KsgEzoec4K/2t8zCv4a0NKb2BcqfgkI/kr'\n  b += 'sCx9yMVCbBxdC8QrAXzV3arw/goZbMK4kn4lJVV3OClKquLfcGJ41cjkJ4twzhgwClSU5XZceM4'\n  b += '7UGuah9EWRhp5wDT2Lf9rQgYwtvFJatQNV9+u7iXQB1gGaiQqkt3F2guu1MvL4UqrVOZtqIzJkW'\n  b += 'bmiWfazBg6yzvhPyi/Gf++rTAbrOKk4hzzyvuouLJ/ydzAuPOaMAJ+Ow8wepZyqOVoqqaifOyjn'\n  b += 'JApQ2mrQJdu0JRFKKW1rWwQooezPlkQqVcVlEtdxcZ1aXEficheX1+JyiZtwcRM+jkSzExI96aI'\n  b += 'na9GJcirLFmxJBFRVdCp7slC2X0sipKqiFfU8lK3XkgiqquhM9mKhbLuWRFhVRRNXncqOUHiOO9'\n  b += 'J/sV11rz3MWbE09+teGMOj30K4kUAdsx1J3JLAjBD11wLwnvc7iJN/7WE6v+nusYH7VO6niXxv7'\n  b += 'xO5p6MM7mO5Z9Ox7J1awUOkaEoK7CTb3EVee5hecUpIG2sVoOBnIDupVv4OXL5SZ68nFtiTdQvs'\n  b += 'fNQCez3D3HXtryevwP76MZoDTlb21xconbHBan99IXb21+LAsxpX9tdkWKc1jhT1SlGTfSkTyUO'\n  b += 'K+dhli3nB1Bz8q4J+3hf0Day3JIaTQ6zSEIW/boyaii/Ai6OyEw+kxLGIJTa0E0/XYl83nJ34Qq'\n  b += 'OGfd1wduI2tI593VA78eONyk7cHkOkstjnHW8M4143dtnq+S7QxogH+b9DdWkiV7eNRhloG31sf'\n  b += 'dvodVI+VEu5amfId1f2z8Pm0edjM0swz8AN1llRAwW0Hh3QT9p489GgGL4Py5U/WVZIVSNuFuLH'\n  b += 'cTNh2nvCeNMTtHbh/YiliXcLNUgm1CC3CDVIR2hD9gxRg7xWqEEmhBrkdqEGmezx9P06cJtD/LE'\n  b += 'JP3eBzXyGcgL7c3dvQjhItuLnjb2rhJjkavy8uTcpbCXbZJcmIAa9KXHInBaHzGvEIfMV4pB5rT'\n  b += 'hkFuKQ2ePi3utzee99H/cSvR3cXvS+n7uU3j/hLqX3Svzs7s3g55bedfjZ0/sB/Ly29yr83N7bi'\n  b += 'Z/X9a7Hz129H8TP3b1X4+eNvVn8vFmkxrZ/ZotXFz9YXF/sLF5V/EBxXTFTvLL4J8X3FzuK7yv6'\n  b += 'hS1dcW3xiuKaYrrYXkxdHk4Ku8X70GH3HYIQy/7Niqb92yra9m+n6Nq/Y8W4/ZsXm+zfzcUW+3e'\n  b += 'i2Gr/XlVcbf9OFtvuq+cIwUf7hZgwHfR7hWhyFBtKj9YC0BEToOP0EwDouPDv3JkJcsP8g4kNIz'\n  b += 'JfBNflCELXYhdW2Ro4HzZeTpMVKoMpBIL+nj6JM+4+FFy5DALjj4kAzA7F0J7q4YYmBJixomrEQ'\n  b += 'NVQ/2PskUsM7T8KudumPCwowztBbmGj7SFPBIFmLv8Duqj/A1ZhcqQKk1KF6Q2qEIpu0yicRJT/'\n  b += 'UlzVIfd1mBiuQ3vdvAhEgCU4LEOsvITeyISaoGDpimxXVEjtP53I77+PSFKE9087791+pNlGyDZ'\n  b += 'wYPuRAOsZBdab/6fdCEh4Mw4dz11gLuJ2oQxFp7nnoD1gfD6WxXdV1DWeY6Us5uzxBeOOK4ESaR'\n  b += 'LUkMxNZT4Xu1NjNGdHsz0ympiES1QZvFdNcMvFC1xDTP56Hts0+l9XaDxfttMrYk3b2ZBW+IltM'\n  b += 'WMlJI5xMHZH1boYEgoBoKNx6tD9ysg9LNLr92dG7itHO+zp88P1oHxMXSrsss3COQAIe+ID9TeP'\n  b += 'qGInLbgOgXp1aIYSGB2i1TbBIKpIXt8nUZmdFtY8d+gQV+y4DiI3fx8ZzQOxqvXgFHClt6VqYNn'\n  b += 'ncdgd8N3B3jF1QV0A3w8GEfJD5jmCnNmGwXFrv/PZpywWJEAEw5izsxW8lEJB4rXL+88mZptbEC'\n  b += 'MuiA8qWAl5RI4bEUTRj/0Y7NFnBHkGx5F+a0bVDC+C9wA3XWH66I+RzQp7FXuT42aTMH70N+MGX'\n  b += 'qHP2ZsJ3GwV5o/+Vbi5Wqxr+5O42YaP5B6QjMsKjBPTnxtF9eUfGVShQoaAPszhImK1JrWBW7sl'\n  b += 'kq0HW5KiW4wXm4otxdbiangtDsu05zF4BD1ENlX3lN99qW3v8ReWAeS8L1DKcmHhkTMNu6rM6dW'\n  b += 'NoTvOokblOxfOnDzCaLmSaFv7ArUv37+w8sdHGS1XEo3jMVqq/K3f/MVfShgtVxJtW7VAq5ZfPv'\n  b += 'Orfy3RciXROG6jB8rf/o3ffacUTa4k+kVwTiD6/zrz2f8o0XIl0Thdo2fLP7vwhz/3k4yWK4k+B'\n  b += 'p4BRP/Cpx5elXfLlUQfh9E5oj/0u++6m7G8kMgHzUBETP/Hf/jKxw1j5UrmRa757a/GIuvL6Swx'\n  b += 'glxi8l8wgoiiAhvSHHcGlC5ShiS4LSqfBJlgxluRZkciihY0U5YJ+CWZbIdAVTWPEPsxA3ulwG4'\n  b += 't4ruouycoZw3togsgwIbHPhFAFGLu4mf120+QlpAeVzhaR0Vit+H2cwfsH8jBUwhWm9GecN5xO7'\n  b += '7aBBU2VShVEMB1Fl8m2XBgk/XT8ltEUAQ4SOsAFFEAwk/tsDwwBSFUXIJ8evEL9rZNNVlngH2pn'\n  b += 'bLs25uQwTYVLRbiIbZtbNtWEFCwnwfSmJdWNhSDJTKBIVqTub8nllxEUJGnCKao5F3iQwjxm4CA'\n  b += 'rAOaQnm0tHykb3cQKQ3ZfGJqDIlPQmcg4pNI7mhTyAQ9PklIfBJzoA0JWJEpGI2QJ9peCrnmYco'\n  b += 'L29/xu7XZdcDU1t2tCZzaI/9ZFaDQj+Z/lvRit9cJsdex+6Sbg+/Hz00BtguUQocUTNuNwqS9tL'\n  b += 'uZ3P74jVBYxEv9DGrY7Bj3SLLxASpp/tFYlCm2otcHE9jvCAZBQ7cKDdmreRGtbNfC/JlQFDOZb'\n  b += 'HOgosGQwwEN25xvhuyrf6jyFyPlL6T8OzYofyh7P+Nxv34xltJP+tJPD5e+7fIZ2aRRkL0TRGv0'\n  b += 'LnGbtOi6aEYgrTOokQEUJ6jEM0Aprm/SPFSbUai2apOmUVe2SQtrmzSVAn83dlY1hZ46KabOfzm'\n  b += 'uDTZhycqqQ7l97/XBLHZpRdK1U6eQctrBnp9Lu9yT3SSzBCQOHS7qNmRWtBwz2PZdF3LciB4kLB'\n  b += '/+DdX5TYjbc4hqB/6gDkc4Mo3KBGaX+1NP+FjK9DHnikEdDhEiHIR+HOMCLFXQ46FuNwoESodGF'\n  b += 'SF0s2JQ2Kemjukmvc7CaSvKF3+NR6LHP+qPRGpAjHfangUY1sMfo6rpaZ8mKulmFMjJe3IfEJIg'\n  b += 'D8r/XFlT0ZA3cvLWxr0pmC7/E7MRwdHzuH4UGUJ+cEWNTalW/t6kH8Ri7cgG5mu/logeXYG9AgW'\n  b += '7CwT4j0m+jkHnMlB9YASFh8EG/7L57O8GtXzysyJk6Af7Cihu9h2SQRvkt7Vp7GqH3+/rGeFMqt'\n  b += '6HwryWfxSo4RfgV0qYwIsimYrLkwyyEfn/bjhrSlj+3ZTKLCzgOf5M5L+Pde44tQYxjm9BIGYfC'\n  b += 'wLngROcC8KWJKbxtwsq4uuCyV3RW8sHP2qn1RNJr1Eu6hW0ZsJWMJr6AtRrIGmQAj4HNnSjCoNY'\n  b += 'qJEkze5akrg8LT6noHzwieProkvhruhk5FsBlVxJ6UpMe1Kfbrcmu1hPFgPB8lEYlTRuDE/bX3w'\n  b += 'GTPbCULKquI4Wg+X6AIgrH5HWD6uozJV7oYE27sD1nP0lOSyEmm63vqK8ocpTO9KlgZbwArrhmW'\n  b += 'TAJ1xazFEnULKHUyKG6DxqR/HplNWITiL22EehWl9MKQZGkf4fIBSfoTXWS3EYy5S2aHSbtsECu'\n  b += 'j4eqVmDRxorHqk9rf/nkDCPMIheg0jauHJE0kaFSBrTaOByiKSN9RFJ4/KHvldA0tivaore+YxX'\n  b += '0mJt81s8YmJO4zwRKwSorf7nWW9RweMzs5/1hnCjrBhmixh2xuvDjUqaGtwoR1n9XR1p6ozbJKi'\n  b += 'CfwwTM4rlF9IYHBPcWWdQyUmen0r0wi6loaiDq7Xc575Dci/cy2d80zDRR9jbOyXRzBCOp+zW4R'\n  b += 'i7Bsfzm3WRm5gEkPMSFgq6sDq80xlZXLEYY3EVtgqykNpOfqXwOc3KtLmjS0PHQHQGtKB4V6SWu'\n  b += '9iMcUvBHstFfkvgRaxwpJjYKbQUoE0N93NzNoOVCN2+zqJidFExHGz5X8RSBxRfi30baS9sqleu'\n  b += 'Kb2HjU1Q4IwCL8oC8CHvt1GvHOSnQ+4dAWChm0nTFhFxorWGEQxPMSFsABNf+zcI8CQef+W+btI'\n  b += 'un3rkCdDllQ/XVl4a904M8m8JLi2IPWxyLUH+X2WTI4i0gWxSYhWx7bwx3K2HdK7It7gVGRCvsi'\n  b += 'KffURXZLcveLF68xVm8eDHnvAgKbJLgOrbXFFvtElcYSe6r8TG7kNx7vxkw1taBPlHGwKliI1Hk'\n  b += 'C82aAYakeaeBzY5Z5F5K8rPNuwCrgTxMhKFg93hbsbOCKGf7O+Goxzskedgj2DZ8+5Q7ScouIv2'\n  b += '2+4jA7xxZNNh/rF0nEY4GJf8nDPsMcL8WAN7KEdbH96mN8TVIWW6J2XHkq75CaN6UVWgG/GF3Ak'\n  b += 'ykFcE09QkIBgOwUBvN2XSCq7Goa9x6M7n67DOR3XW+dDVI1TW+ZCs8+iRL6f1YtXagSp0aYk2Tb'\n  b += '5ez81XdH8fJjHlo/ZNKNe8eydEswUAToi4ikDMTFTZ8kOD4qbN0zMt5kL80LFCflAyeWX+16ZtJ'\n  b += '6rHfauypc6ubVVb9vZH4jASi+bF1Jk1ZTUjbZpAzWggCL5gQFG+8GmPUBcBS6kKUFNbSUdLbu4S'\n  b += '5EoM6G2Gr0F3XBe9RaY4e1C5KVjW2WQxUuzuflyV4VI0KIZvxTxryAyerC6wxbOx26UAgr+Rby9'\n  b += 'nKvRp2pA9cBt98mgtToTCVB+Qu8bdVII+MCAqbOONIjNdpNjCHlND4knr6xaHXoei8XX6Gn5p/k'\n  b += 'Ee9txr/Rsp5MS7pCAJS/CG+jttGe4uwvuUGaLKj3eXcOezrVpDCrQSD2oNRB+AM0kF+64dugxtN'\n  b += 'CadZXkB91ePxsL/tBwLSpOwDEa+EWf364wjRzOzhmQw9NBKJBk0RTiUVEgGHQqJAX1ADYkkrVMK'\n  b += 'k1tgLdGgUR4Go2J3H3zScXoKt4AQenkIDKM0DJpOoPOVpeGbxj+uEBuhA8/2cUTgxx8zDAViHA2'\n  b += 'DwBNmtSR4bSYwG0axOhaGWJNJD2BXbnxjROvHOz1sf+RJ/rQE31TNb+Qo9HywhqR1fH9b+UAeEQ'\n  b += 'LKyNVLGBGMYz2IpcQb34VVswR0LCFkEmHw/jIy0bzuxWUewfYz/1bqtkDToPoSF6S+2J7KASI5X'\n  b += 'NgBeQ8++MkKJQdI7HYl8/czA24Z3b3w0UawsDxuBP/UJxWD+tqzgvFZe1gYvd/K9VWR6h8XjiyW'\n  b += 'WKcwscYSoixbyoEg++McRMtiSLXyP0kV1Ely+QIJrd7S40M/1qPV4T0E040BDHcQlcVJDCuKvbm'\n  b += 'f6pE7ptCuU1yG8EVCp0drNGocd1fWabnoG/w959kZve9ESY3v7BVODmbbNcx/Eh+inTtINS8l/b'\n  b += 'Bdt/bW83khGHnRQs0ujiU57gLaAlllO/0P/RFs1tky5GL/mH/WC5ZyFSwp8IbYe0N8wE1TpxARE'\n  b += '2eG/DvJhlKkpJIiLfzWciVFmlwjRUp2RbmXIiHJIyuaPmf6K5IiFbLS7thQirRT0s2slSI9/Hs8'\n  b += 'aT7zheWNpUiPf5GnqOe+sLyuFGlGpUgzQ1KkCcoVq7bbWX7ri2qGMjMoH7K1LJ/+grNCMVI1g01'\n  b += '2x6aV+sxIpt9JxA15WICkkSL4mdlQgDTjBEjFBgKky+YjAqSZmiDqaeGbz3+KuyWKLM9vfLyKdX'\n  b += 'iNHq+EBNDQ5trty/vJTcH0lRy0cnfQyocOWhPf20ELKha0Ng2kVdr7ncSfrFDy+smqXmI9ZVUHi'\n  b += 'mlZ77OBYJbWT1iJP2GdDSWXzNfb9rc9b9nH9aQVVyetmCctg5NWPHLSMtVJ61kMYHvSerwanXLM'\n  b += '+qY4hbtjFg+l9mo6f+l7OmnpqOUxiaP2/O/pqHXfzsNfXH75k9aaLB794vLoSQuHKTlAfyfxh6l'\n  b += '3xqZBK7OWWNgm9+MkWudQ4+FAlFFwY6MyBxbevFGWQ9vyd9BPuwH9Acy/YxtiRwFdwwKRxhwZUP'\n  b += 'R9ZEA1FZ+aFwO1hNvemEokm62AQxMa+iSHBQRiMkGR/cE+qZa7PCjY15HB69q5frZPiJ7d6QfMC'\n  b += '1KQEEbxRQOFVr1jKkuQfapxf19sMmzKhMaUkkoOcNRuwSOwpFSVFJGR1L+we68jzjXx6ADPN1hA'\n  b += 'GM0fFjsSu1kVS9OISWkEDB2cuJ4H4nZYikUGxnJ2WJ00pA4RztknnlTbubh+Z6/rcY2hu3Ao5fz'\n  b += 'Q3cc+/GRQXiMBGFQ/aIzb2HJe4TntfysCWX9lN7y9LXh80J1EdpWLht0+xbjUdtyy6UE/TKK3e3'\n  b += 'BMJ+wi1Q+ijAhV1L1dr/AN5z8f9tNTffLBlTGcIsRYSKjtnRPtnoPKjrDHbaJdupF9tORcLnyuA'\n  b += 'g4X5QoW42Fk9YDw4abEXAb48Ih4EKnkILv1QmESFGAgPdJPiSyQEvehUaQOWSDVUnh3C45xRRig'\n  b += 'FvFS4FHE6cqaDLeCHsyqI5n4uw5cm3H41I5GUXU0wpGIjrQxVOXFIcpLeL0wf6gt+LjKvYOz8k0'\n  b += 'BzGXTvbuP32LnTVzNHP+RYB+vsuO3BmX59c9QdIMSlIuP2euTn1XRzW9gxhBbAHCvz6tijHrvQM'\n  b += 'VyAc2ShvTy29tkERRhA+SotOeN6cqEiSEpG2AhSKAUz6JR7W88pIYXpgsoryEirZFp2Om6Q8lKL'\n  b += 'MbeTwSc1ewxLCVoKiS9T7/Xjv7loE7BAeOZPbAHWg7ucBPLdC/S6oABgXMjnhzstG36eehJ27yX'\n  b += 'RZG5NDDF24LCuSBz0mpIJ0bqAdGG8wdCcnv/rcYdXZCUYGJsHehGNByIaDhAWbuNgm8PdKlCFxG'\n  b += 'W6Z2Y1eh3E9oX07ggEuMCavwV/74hECvgSixbP26r2Lr3YDl7SIAAdXx2tC62oiXNjY7bieF2fk'\n  b += 'dJ+fh7lVlQWkM1ArXGizD6YO/RF38K73CTULvf/jDEdTBnip09nJ0alg2nfIMNbyDbTLtmfcppN'\n  b += 'ylUkuCwFixA/Dx06WedD3nQy5d0so6LCHFM5YaOw32NDT2kp+JjIVXq71xYWDi58G27oz9D5kB7'\n  b += 'fvwFcdWzrU53TMrM5uz6OC/7DZA32k3edi0Wv+GDMq/Qa4NKFMjTf1YAU2jmJW5R8NdUWgG1J3c'\n  b += 'gPBmUEyO52unyn/095Nvmvn2kYjo/jVYgrr0o9i+K9UXxei8SRZmXqFFGJmtZqFaj3Al12sIXAF'\n  b += '8snUqqlScYYmUPhikoI5W5EV+GV47TSgU6q3XcBrkVyNaGSNyA/ZkpgmoqQcqqy4N/jWOXogOlI'\n  b += 'hCq3qYELURKqusFfssOVCKW6Fq+gppBol6V+TlJzFAJh24bIhtJq/RV8SpYVspwFBbDpxL5TipI'\n  b += 'p9GwMCaq8V9SHGNo3iv36xQjkWJ4CFRXc1cU3gmHZVxvGW070CpQKiJtpVknkqzCNI3qEKduf/H'\n  b += 'u2O5HKJH9/kIks4fxK3cbh10u5kr+/t2e/sfz9x+6HgqwPWRCHKhcMVQTYIHXrt+fGblfHbnH58'\n  b += 'nzMO7bT9RNdAIsHOUJ1UcY+I/jBqrQhFd7jUwwOZbxk5IO0n5cluo4mcD5Nzm1r+sAXenTukZBy'\n  b += '9N4/sW4nX867JvSoZ7iWHBbP5wSXy7MbLV1nR6tEET07eIW8zhi1za65IFILsS1LtZOzRXvyc+l'\n  b += 'YBemZCMmOXKZ4EBH4bBXgkRTPD2QeF6O1kaUXL5ekXAr2jgcbcONNGk45KomjQen9RnkA9ScvqT'\n  b += 'i92h3cfoemOY89+Un5Abt3YFd6zefoAKGx13M+fl/UvgQLu3Y82flwleeEIfJbFA+iuvTX3eqxM'\n  b += 'fsVXl1uYKAj6TB5V+48OzIC8vjNiQ/R73kN2xm28tz39TMPhYJ1MIst6rinCu0ZJc16IYNZ92gO'\n  b += '1SDbiynsHQvZ4UVy+4FaqbJpJkOSvqw/TF92EpqcspZsd/EjHtHoYdbkgnMoyhH5vTd0eFycu5+'\n  b += 'bs4Ye3TdWKOx7wAhgMaGPhYljHBUCAnhb4fyHXw9sXn+x71YNBOYHfKpHskDCWBxuCzmDvlDSSK'\n  b += 'irZ+nRlcpu1fN3D61K57lIX7BzOn9jePtcL4kaHcgOy/h+7YBr5mj1EB4GuYpoAkP4WPipZFLaG'\n  b += 'fwG0pPmjI6ZHcXn7fjXnLF8XN+QJHGHCwKw+1OMBqIBR5/MvnpyE8uPxPyMyk/0/JTyM8O+ZmRn'\n  b += '53yMys/N8jPbvm5RX72yM9r5ed2+Xmd/NwlP3fLzxvl583yc4/8/Jj8vEV+7pWft8rPYfl5QH6O'\n  b += 'yM+Ckd9j+ntcfx/U30X9fUh/T+jvw/p7Un8f0d/T+vuo/p7R37P6+5j+Pm67K3FsfJCpSOfQKsX'\n  b += '+927VuF2KnJXcRVWZ6XEgpjHMrmiVBrbiRGo79ISghAnpRf5fDMyCzoUAQsTVCZ3okvKpUMAaoL'\n  b += 'QJFUAxgS+keFckODHP0NjGHoMk1JBk9RE4WpQPGWp4Rap/ptNv0rDH1qVNDATzarPauTG8gLI1b'\n  b += 'wzP41csbVdgtIXitZ3fa8wyx6SmyDQSmqv/12D2QYlBzGsvnwp7/F0OxTjnsbBHo7STBhZ6M+Hj'\n  b += 'IYlRtHDbXcnUz72Dd2hMAGktO+ZRbKJlkJ/GrlUuHzFu+45mgCGW7ukzFVqrMYDPp4ivswNil/t'\n  b += 'KAve+RxwrEa32fepkvdRJlRrnx0uR7gc5DE423DA4nqw7DBYIgCPnETsMAKGWALGOw+AvOQwuxm'\n  b += '4YnA7dMHg29sNgNfbD4ELsh8GZ0A+DZ+LaMDgL7rbykbA2DFYn1xkGi9tuDF+IZRg8H/thcAmGV'\n  b += 'Che2x2hYpY5hi8WhwEiMQxe4DA4Hfph8Gwsw2BVLfIuxDIMzoQyDJ6JdRg8ErphgJLVh4HGsEOW'\n  b += 'sTo8HvphAHdgHQZnQz8MoC5/+WGwHMoweDRcOwzOhqPDgKmT9VInVWoMg5Nk7Ph2JDym8KsT3Rq'\n  b += 'ZG/KPx3rJv3LrnOvkVrXBj5t6Qmyf8m1CDC+7UOe4dFQorNSbTe6rxwJ97Bgph3vcHS6kXE2Opw'\n  b += 'O3M3swVUhkA+sB57r1kFxCUHgiHTgfrodTHV62LHIJedT/x97bANlxVeeivXd3n3Okc8ZqE5GML'\n  b += 'd+455TrZpxrX4Z3fSU/QyXquVjGscFOirqP9ypVj/fq3RfqKI+KZOFQN7Y0toUjsEPkPyzbMgy2'\n  b += 'QAIkGBMZC2LskRFGBANjULAAB4+NYgQRIIggCsjR29+31t7d58wZaSTL/FVwoemzu3v37t3de6+'\n  b += '91re+b5NsQpFni2xiTt0qm5AFnJBNpHdtl00IAu6QTeR5PSybCPJNyiYSvnbJJoQBd8smMr+ekE'\n  b += '1EB6dkEylge2TzN5EbLpvIBXu65tWxmbD2W/lv5i/PF+a/kb8sPz3P8gX5afkAWA1ADIwoP0iSy'\n  b += 'CEdrKhj5QMjefdJeJjt6hK6WtRXwDUrdqstzr1iwKjRXeq121XF5Hd3RuTZo7jVKvLgJEEJEiRs'\n  b += '9dV04P4enSXYldegewQH1jXO5KErdXOboTsrgYNKOCAO4YCAiCRH1oqulsU9LYu8NpUYrLgoXMy'\n  b += 'hTaNjjz31ihNsVjpbWzK2pVj/T84Qttn/zaikFG1AUSJFznpi2RaU1aVMraxiF8pO0zIrZUdQts'\n  b += 'iVLagEFh6ZEWY41r4PKh4i9zmNT0QhwSOh6lbXgkpjyEh0US3V6PVu+XTo0UkY+OsnA2hZDoF1F'\n  b += 'IvGiGaYJQQECdVUg51aTLqTGT4s9rmt7HFGhfUU4AixOno9ruVOjDmaX6l0Q0YML6vp0wI467ds'\n  b += 'JJzLB3GFcyBjGo9RPPdrB0xTsdgkrFHeK6xomT83Zl9lolbqsZzZk1YSh7C/mJhkMHBvuHs3FuH'\n  b += 'wuAzy8TU917aWcFQudj7C/pp4tAyrC1yu0hnjqG6XctdgoD01j2rTbVyLTd628yQe1cFbd2rrbs'\n  b += 'f5vxKP6qnqo5q+jQjZdbfvnOujOngL+2v61p29j6rsjCl0RvVRHYklL3MqLbOY+uHHSuSY+lQTj'\n  b += '3PqhyB7v8d4KWSrD5pM0V/w+NQVR5WWYDFxutKFWVd3q+1Gmo1VIYzys8YmzQIGYzsos6YoLMRY'\n  b += 'K60mXXEXNmwokrldy5RmSmFiggwzXoEpEkRaLBFHdduy1hl1oczXlYrkVLUaL+KUirZVTUp60Gq'\n  b += 'g8hU/r7ZYSub5phCNFnsg22RS4u5k06ja04FY3OdjZrmnuBDmUA894Rt/lpI+Z19PNIagVG4tYo'\n  b += 'jIkl/s2DAZBUneKeINJ6pFuymGtqVaNO5/LFXKd4S7s/fVJWopYlhvI2cESPPDaRQ6roWfF9KNX'\n  b += 'aWAX7okzsmq4z5Y1VhlLgq9cEjZTcD3Q4QQ5RTz+NJF2XfiAFoSTIBV2Bhp9HKB39UCBC7rhBbx'\n  b += '622E9gwi3iBx/zyRsHUsYevDkfAacakR+ZgsgHW+YH8kyxJfoMuSN/nwL3rkCxIeZqZKCI4gc5O'\n  b += 'mgo+EHbpHEVqROEBO4ml/49+f9i/+aX/xpJ/2N2Lb6pXLmBKgIju5pg+zq6sbKoo9r9rh86Wt7a'\n  b += 'YvHI2EHGWQ1HgtIDyFjRksLuxjkLYR4jld8893inBOz9j5mjbxE0vbySUyLb52KOWbgVilGxcfY'\n  b += 'B3ZxcKtvZCPt8HLkSIhIWUfXkoImr+OCWMEfjeVwQ4Xb8clinUen6L+EKn28BLF3LrSa9VkZwnh'\n  b += 'tzT5zyXDMQYQP29JsBMvhlsr4S1w66T5+JN5j7h/kYijzGTL3dMC2XK3cJrqZOM28o5fDSumLyQ'\n  b += 'qU09iQbNYC3WsH3HCzgeK2+9Qyqtvxp44fTryCJq8MzSfD4yLl5HOUIMPemgeASF1Aac25M+80d'\n  b += '4nWcC2F2TLoASJVZqa1OpUpsX/QeTpqdXzKrO6yX4SuwVmguS9vlThKRzGqWKWbAWTCzLhKlK2U'\n  b += 'cXjzqumbEaBQPxodIO8ngDk5PO14Qvle870benRF6vwhJM+PA/s4YJXFfZwvqu55w6/XKjDXyvM'\n  b += '4a+R+peeUt7waXnSiBY4o0+f7wNqQetQLd9aAH/bMGjLByerugs7fO3zhODvyrtvhVglK38Pd/p'\n  b += '9AbmOOXckHjPw7QrxOqHbtgLdDp+8duqzPZ+6dFwsHWek4zxyOyZyGx5LhH+J3I4FuY1wVVviSF'\n  b += '1vSVXoJZLxsRu5bbuQ2/oF43Z+W/n70SuG0O3YQ7flgB7oNge77isdjLqg27YEd5fj7eOxsjbFH'\n  b += 'q/P8DnwEiJhPFCJ3gfVYKrsDlTFiSHQrWWCgxdIAUzgekXIWP6tq5buBtsFKIcr23ZjzmOo1HfB'\n  b += '0plpJOj1EtlvqKX7ZpkKY+SHxgeN11lWPVyvrzziRZZZGMSShaZH/vF7Zc3gK4p5f6I7LJrJf+G'\n  b += 'XAIzwTwS14WNrE8sqASgDW6mxlPQ9yL3Gi/qGnit1mkc69C6pljSdxT8R15GqqXtwIvkkh2JFJw'\n  b += 'IkrSAkBShOM2rCyf9NmvwCaJ7/omagEwW/2H+3pIVMlylb7UhptCPt8exMFSyOeB2fjiW4P2Hn5'\n  b += 'bGaiiXHhlSsuCsVyycYUca0rLgr62rAhhpDZbNnWRFKSGbruIIljLuxhJNVLOF6E8CEd5qAJrzD'\n  b += 'BDjhLab4wXbFE7rLFxsfROrqx30u6IuoZL+v5B9jG4fUC5jHa+zS+BgsMiaua847xjiMH4MlLx8'\n  b += 'H7OyjMucUZOmmsRLTG1cgfGMvXYQtEI4i1cHNmz6jfn9XRv2M2jnEonYTao9mrz3R2q2vfe/nKl'\n  b += 'kUmQzMrVZdL2a6LmbCrdxvkVbCi6XYmsebAlQvDUwAu8uaWTcdM+JnFJyFEOwJ/R+wFO5P9jFXH'\n  b += 'VLNoRd2zBbcZjxaHzFaReCyScsWCYeS7uSuJumHjHDxqquTkeKX4DFPnOhjFp7I3YEn8piPeeJE'\n  b += 'H7PUvuODO0/iMW865mOWmreUNc/9MW/HY/7wHB7zX52ax3w0PGbAcruoLNYUmj9jBQCQR+faZAn'\n  b += 'Tj4RniLYW0ky+WBOa1lgwynnbFqTnigAjp+vwzJigZUEFXIxwvyV6oy1kfRYHilMRlMkMxX1XMo'\n  b += '8k7pM1wd8vM2nexa87CGojI33jmvKCkZQZq3nLbto++jjwDu4K2BKXoME4OJiDxGx6/DHizZPRN'\n  b += 'X/o3gr8zJNRcw2N6SsH5HyCeYq8aIB3I4LHM5KHEokoQSSLWXcGgE9RSZRhmPuRYwCX1p9rz2I5'\n  b += 'TvCZUcXer7sX5hWSTDW9122v+4YfsasS4BeWIB2isODFE1RQ9WEAFVRchxqXFDu+rvicYtNekgf'\n  b += 't/rpXvsDNgE1id/U7F3uMIk7fMD7HKVc37rA9B7MusjglXSkZSjxraCrZSYAoro1BWJ7DdcxVUV'\n  b += 'JxCReUFJIBANfJvsUcszIZCvlKYCsVTrWkh+Ah+24yEBp4H/OGfOPcncvbLg0VCEk3PLZlmz7Vk'\n  b += 'je3RmVOJDrNZMuamh1MhsyW2JCkOOhDqrF4hCUQlneabS4KsnZtiSifVFhnB73bXamjM/ZBpsYz'\n  b += 'fRAJ3fEYq/qlqqGPWr6PND/TVvIvvSdDmbZme5JPn+yTfPvP6Une/yKe5NO/jk/y036JlFZ1CGW'\n  b += 'VmVWXkl/GMzisGONAOCXidDGXc6FIBO3gRfBF7oFEbpCajgMJVRpIqGri0arnvUeDrH4qlnUL6K'\n  b += 'XqgYHKr45xxH5bHsE0ATZwb9ylQDoVL4k3xH4FtMHzT1lQQlWP22/1OM70epwFrmETF1OLQTzFH'\n  b += 'AYeNRVVqiubEhIRpoV/yhYbeRv7S/FA3SlacZx5pWnTJfeUxfvHrIXtVi+jxFIyo2ashDGDu0Ly'\n  b += 'lvBiKyywmlMV9UuochPgxGPd+VT4ULuSqeKeZCqq+iC6Vsmj8llLeXpNO71WWJvqb9gGjIDPo0p'\n  b += '9HpW6nphhmHjXE1qiOVRseiJrm5mpYW6sOO5tgCVY78H7knkPUYFlF+4hYkJYeiruA9+eZAfnSd'\n  b += 'd9KHH024FWFWrPvPHGZCm+Srd1rf/heT/desjc6Erdv2/Ar2vz2htXXiwpIZcOGJEObLzRLRSxO'\n  b += 'G5c28YR/50k4tgvRDhuDie5qqhzz0OHzYMPdp77Nb8jukIDQ/iDhd//umxAfJhc46PEdAQsOm95'\n  b += 'gUX5FQOGPtxixFWzpgPkK1q8pngl86ARo3sljJUROPKXeeQmf8rRxUhzCFrg2apibCzpFNlb26D'\n  b += 'ucj+zt16Olr8ONHrNfJ5kLgH1SamkywasZNbaYs/RnYo8wK99Xb8OhV+R58bx5N15OYonrzJR87'\n  b += 'Bl+gHykG1x9tWYTqi3McyfK7ep/K2WnlMpHQ6leaX0nFB6VqU0D6WDldKzQunCSulgKM0qpQtDa'\n  b += 'atSmoXSRqW0FUqTSmkjlGJi8KWc2FZxM7rW69y9BH+pD1zYFbjcipWFvar5ZYVrr49lgqFDbSip'\n  b += 'UNXEwrIS50lHv6oKywpj1iSoldxhsqwAVVo9VLKdNhifFUZnM9Rqy7Qwpq96CdvbUsLnDxpR1+X'\n  b += 'PyKfVtL1TpxJCj4Q3Rngb9tMr82eYL8DuM2B8JurBqJKjNmU6KrZdKaGw7YTtym+b4Og+ZYJia/'\n  b += 'ely5qqErqi5ipndzVbbrGn2UAT0b1SCv2p+0xl/irpc0QyCL59Fz0zxZaHSvGE9bFCuz2YpEeFQ'\n  b += 'VidsUiPmQoZeT5oAc4RTZEwoEl2UizNzo+4ToJ/7S63FinSbHNtCc0313nvQQke3CYsUz5viu0o'\n  b += 'qEt45GEpyzYkQ0LM6i8nsT9TTH2DiCnUNyinfNnXt1fOxZB9UVQvr1PvhEstLIyuwWKRsNq3b2c'\n  b += '0HEWLIxlZiqfdb9gs/L2n/GFHb3eLskmL3AZyWDXKZrvT9leaLXOs0ZhaC39NtkweWKJYRNzJD6'\n  b += 'd3QmlXe4aXF5qQah+5+zs8zbrPlOvqAQdwcioHrHvWH4A3ij1nmuExhKX/E6wz25/6d3tQ++UWm'\n  b += '30tHlIhDVlusqOwvtuktmS2vF3ja7Emt6p4iaGLy3GNqe1Y+xjajLEriMAV+L4kbOxVJDGpQY2n'\n  b += '4apK/EI/RZQnLPTdDM3ZbP4yLPUTyehPudRPcChur4ZemE/PvFvq1yRuXsOiXc14ITcQ5ieME1c'\n  b += 'w+J5IxZegaUMNecMkzsa5scmE3KZIkTUI/5HlDfnqUgkL5fElMolfpkRS7bokG/8ByU8ArHJj0M'\n  b += 'NrNTmXOmd56BM3nyIN2HSXD8Rn5nWfspx4Ejw2TgQfweRcY6LuAl6Ds+UTeg1m+pvVBZcXg8Xvu'\n  b += 'KetOd0k+XZdfMg9g8J6Fr4qZURU/HnntLNT477ueLb/JbZZ/AgBHdfw7+Mv4VFPR0BYQQytMCv/'\n  b += 'pLBXF/WrtpHzeipa6+y1pwzshyjrIOUciS3+xJlHN4dqRayHYIhxzwBh6qHEXWQIjwoNX11BsdF'\n  b += 'nmEa2GcpqnKrg23f70tiaqJY2ix/ja6sxoPnXb7qBlxtZ26o1i5/N3JGvhfttpHgK9lJtMzx+q4'\n  b += 'qzVlxdLFjhemn+pYtymK89J2Vr8eImZ7riNddwz4Ib3DZ2/dkNa9FhL3RdSb4H9/hkfPPPK3C7I'\n  b += '0TZdYHJ0DtytEjPnVXytzeb34yFGAIyYrLgixdznDICTJvyguW3x+Kaw8A0FcuH4jb3xLr43guV'\n  b += 'cmS/FVPvA5WK+ycbS5qkSvD0e8ILH8ATsdcEk4BpSxg6cklWa/mLu88p+3os1xKfor98d8XoETh'\n  b += 'CTVcD+l6/XBEinYX3Om6qN/vueC63ao99q0LHkD1Zk3ueMP6mQzK1XC8L0mgWEl4QfzfltOWuN2'\n  b += '6WxFgaInVBKvJVeAF3V+lk7Od4xZhQ4Kt5m0fUB4QJNcwTv8KkX5PhT6hp2Uqxqmudp+xMIqt1j'\n  b += 'pCk5yKrdZbIag2KrNZCkdXKRFarNaR8TC0RnTbBJXze0GlkuRpaQO2/IQqG50Oni8L4y0Ro6DcE'\n  b += 'LbBQfOMvF3TTb0qG+m+VazkoayFWTqBMyED30JBQwIjw7koBX0Bhm/YLAwvCaY/fGREfDCP/V7k'\n  b += 'x8wzqVEGJqpn/JpWroE01L19ILSuoVdXzl1HdCvpVaZ5RnQaKVnF+2lW92Pe/USMYkE7JdsH1sy'\n  b += '2AJoBc8bMAhU8bpe62HmBB0buEgKZQNGWENa5dq8IwGkvi3UY4f1mj+3e3exWfivWnspDvTjttj'\n  b += 'QSwsskUjpey8h0pYt29NU+kUl2oeiKtVM1dIefJvUXfwuE7ysM13TLJbjKhnuHyjLISOS17zlQv'\n  b += 'l22q5WWTy8b2baYEQv3ZaOZXKXkRrueeyw5ebtKU2qvu9B1miZ2IXeOfRDcJEvMjIo6a/Q9Jvma'\n  b += 'KCFKl/0f5b//S4++by78v9vxfnn9/PnfSfMLN473oukQiYcr5xI/unbEKVBce0uJGmtL1q0N+Rt'\n  b += 'dyoZjAYvt9s08uguoZihXg4i7A8a1S/Tkzqh+W6s1cqiemhi7wC8vqL6xU/+oZ1S+V6u1cqpdRk'\n  b += 't4w+jPZQTIXXhmmwjdoxW+UiTDurrjvpB+VCd8SceQgnJR0jLLlMUEldoc4u+Y7Z53H+k1ipTjk'\n  b += 'v09fp376WotwT9L9ZYGmMPuUUcSqqWLBBEUVhxZ7ZC2JoXZHFY+7x4tdqTyYQnHI74hwvdQjesU'\n  b += 'xWwsAQ6HvCn77K9sNasDLixZTY8X1gh7QECTpsMeP3mArF9Pe390LJwtN186/sAfZVkG6RZ5CG1'\n  b += '3h/r2gaszZ89zVi7H3OrvxnOw5alSXQtS9H6MQ5neVl1/EA7Fp0oiISgFgvE2aLiFCjGTqOiu7P'\n  b += 'vFcpClSzo2KAS9m3t1Ih9mK53XkcxiWz+Ec+WJygFNl9e1ac37UuFjk7EfaysCozEM5P7NzrqAm'\n  b += 'UHLFgOvmwGSFL+r86NVDmrnzWsamIf6p2rTzBKRKrxA9QtlDMdWlcEn4rBpNf3UqMqxlRg8dExf'\n  b += 'wxcrT7Gaj4sEXC+3YebOoMtSzfWlTbqD/ATUeEFOuKPsQaOaXSVqSrJ7xHUeCQ3itBNEvL3Y/6J'\n  b += '5mQ26m2Pc37se6B4MwLlKZH1TM6J2xrcuUhIfWEJU1xC3tHw5EZOIZFmIkoD+z/Yw/YGoYiHwqt'\n  b += 'ECoVe02ZmyEjpFUkqA87N7wo2nXF3sZz6SKNc26iIaV0ylgTRWmXTaiPmS1IX+otKcIypD3UDls'\n  b += 'NcuVSmPuPRK8Pt3pyWWA38knMEQS4+Wh/a7h7qXPzqI/Rig2a9Is98IQwC2zqSvtbvz80Ox58kU'\n  b += '3pSAXckkFMfNieb2T5vWmToUykoek8mbekAfbfJe6qg6eAJNzTovU/CloIg+uDgZsXOw3gh2t8D'\n  b += 'NPExraxdC81wiWfwZH8xTZmzxZ+nFZml0LgPUVx4Ao18Sk8SqM4vWFa4Oxm6t4OJrrYb3rzVvYZ'\n  b += 'ZctokpFnigjs7s9vSNgdXHl3aYKzp8Mv/Cd7yhBrHhVJozeRu7v4j6rIXdcu22yGh13IilInG+U'\n  b += 'bag1BUTrnsc/WXkewHfK2Ma0tuwjiW76PLdSP3qga4+bcw5PMqWRmtFErjLrQVa2/4dm0XVcjXA'\n  b += 'xFvI6KnVMAoXSkADtaquJGKlRhVIpTKTQrqT0RrKybSs7rSqUYlej7y6hmUkIA4d7UkMaQhY6F/'\n  b += 'aaqIe9Jlb2GuD4a+TUVDVS4jhFkDSmGnNJZkMZ5euAZMdnQXGM7OULmkVWNLJ/dJPCZc5qlO0hx'\n  b += 'Cad3f5gnTnzKFpeLNS/mf49fPQvOsWfrwB3jOtSLXa3s1zkuoEdX55Hr+NwltGl7Y/5C/cwL1vE'\n  b += '7XbsS0G8mr1cKZyyj9fJOmoYKc6tEMiIIosFoh5MrytwlPVNRuB3Uz1XGn6bR8uRaeQ+HVgty7m'\n  b += 'bEiKRJvnnXB4gOG47fsTIk+w2SDFZ/+ddkjHqziSF1KZ6218vjzuvkywtiJbIhpxEIUrZjlGBO+'\n  b += '/BOuZXV8uZzTxp/sRKBGUiJBOA4l0NqoNqUG0w5Sh4WC2q8UrZmBGTaoupmlTr9debxaZaZ7xRx'\n  b += 'Xc4nAxTJa7mi1XQFZZw89d6xP7uYDPpokawur+t5I0bJoVVxhanXxStM3Iv2bakj3ss72RfqImp'\n  b += '1G1k2R4jy/YYWbaSS+DrUUss+6bnmVAT6mbTz4aa4Diz1jtivA0FLAcIEg7dUKFPb+DlAobA404'\n  b += 'bbTpSW+30UpqM+y3/cWOo5SdsBY694z27DNWDaBstxNi6RnCGJntcgIuUwoYx5npf4IH06uJJCt'\n  b += 'GQQWKT5K8wrikWkwlgIsEqZEuIieAAu3R5djAmIUbOFCwaWyKEAtPqCBuzVLBBvNxrFtuR4s4bl'\n  b += 'FV9xJkw2N51kzdhgFQpbr9RbRiiASVhvNIC+5ol8QiJRWEZNLhg4Ecf4aMHPOV6pcY6qjTsT9a8'\n  b += 'WdU8YuUpHIwCObFYlFYQYe7VzvnPpYuyn8aSND0oM417ATI/zzQ62UZbAZwtE3gFrSRBjSht+oA'\n  b += 'qs7RTSf8LszSTPkzXLI30O0kB9POb0Vy0WBjjMAkvUzJ19/a9I+UOeNxJq26Z5pagrVeKU61RZi'\n  b += 'qK+lj4gZVxaQzQrh7surkSSdcMcK6sl1ilAjTzYlW9eDb3EFQUQXqfEQBB4YqJ3grEc+5h0si7U'\n  b += 'DIjgzDlSKfaK0Z7ZdivQlxzHxZWlmF5W7O9Ehq7wDPqz7lCqcOdemH2RNo80abIydnn/IcVZBnO'\n  b += 'akdeWkBhveflx2D/H5fv9LxjKAS42Th7J5cmgPow1Cag2+Fi6/jOoFmwF9tb7lOY7ediYc4VIgZ'\n  b += 'BMbdYYabSw3ZNcfhnopdEMKS7MKLxKCuuyyl13GyeqSZrSZgUa65qRhL5zFk6BiLNLWfL1Sqyqo'\n  b += 'F9BbqrbkKnLi0hhYlwEySj13vd2RgT5FnOCLgvbYPOXbX4KgKtl0tSSYoj3IuWoWbJXO6lIRTAp'\n  b += 'WvWMwnMDV6WcW8jwlMmV9WMVObkmpw3fQ95gk83UbFPNp2Fsl+2zkSsvBmG+tHrN42NTX5zYwMf'\n  b += 'CE34/o8uLs7q8LnNgqGUY1ryCsTKmRg12VdUoc1040a/iLB+EnfD3IZabxYu+Wx95nN3Fq6EiEA'\n  b += 'vUKbhbjdtYtcmTDvWRNwd5tiZuMmsmbj1PKlk4oa2NGQlU4lD7bcykJQuHNuToLjX9s1QnLK+Wm'\n  b += 'SBwe5XqwF3VWP/tUlolddKfn8eg4u/LznTJ96uN7Nn3lrJvN13u8+8Bd3Wodt1hro7pIe5IS09B'\n  b += 'yHgukBRgPx1f1JRHnfrVwT0E/DfUFSghhHiaUARoOhdZTa3YiPWqBBwUfRb7s8FnWLcHYoWufXR'\n  b += 'uXaQxKNux28RoOtKIM3n/sCh6I44P8ovii50W/MxNqVYuuZyJuH8KVm3QRlI9m1wUj1kCLgDYuO'\n  b += 'GxwBcYQGenqjBtk630QAZz0aKZ9Bqi+0LpMlDdSIdcEfPYt+33D95YxFJxxuLem5PX/qayK3b/n'\n  b += 's5fkpLSoyAHhDLY9RGDdWVAQVCC3XQoqaajNC8rxzuPJfJf+hUhSMrqsxAT1gb5JmPrw8s0xWWH'\n  b += 'sheZfok2GguW0QwBzltGlTFY7FEkJWvBiNNpCo3yM6QUC8IYlKWsyFxFyENiv1ELCSRJKQxQrA2'\n  b += 'G+Us2GjQb0BG2iuQzsHxzqsGL5hVPPng3aV48sZ7IJ58Z5mpoTMhQFCuFGu+O5VSp9j4bnLO3Hy'\n  b += 'nT7844raKc4stG3zB1J084oA/whkEjTWlc7dKQaFr5NkoRyTjh8ntu0nq3UVCsXS5ew5dHBSgip'\n  b += 'iFgmJEVyElBcWI99e+TdDkjQrnRN7FOQHuhHnBlLLiEI8zeTv4POHlILQIy+25c1K8M9XxKi2G/'\n  b += '7QjnBSZmGv1wEkxr8pJUevHSSE+Nr507FgFLAZz7ER6/xv/3vunsve/Z0/JgnBDwn9wE1wQxrIg'\n  b += 'PPg+XRDauSwI7WwLQksU4KlaEP5sjgvCPWFBGLtbKw7NYUEoK7731uXvR2au/L5pPf/3lEaSjCg'\n  b += 'g4GW5jK6FEeVDGexxCOQ9DoPh7rANUxeRFxeL5ME9XPXDKlJjqCFMEaTMyU1bdHxk5K4JyZczy8'\n  b += 'RNAWE+QgldSYWM4kji/RQjQkbhmSnKYBSfjQ1pNvLRJVXfsNW3eCSvbxZSj9dcSh0Kr+mw1Pss/'\n  b += '6VGOMW/1LL/KbwserRYUdk+KCdgkY0VttX+/aCapLlapG7vnbFPsvQWpoiuQDA8GJXuKGGUiJG5'\n  b += 'KlJty8X4FFU6vm2gNNvyGfdqvLyYdH+yO2uSy5oMpV5otimRVmTEXjc2yemTUVVlNq9Mx2Fh1pI'\n  b += 'PHoPAH7iZe7msBvhe1OnT57db17MGTIV1TuJEuJhbiRAuKHYBhbfFmkw6WFEIlxK6t+WFZstWuP'\n  b += '4AjZsHqrEzIuku6bAsqNQUNz/OvOrtj5d0fcBonWsXLrGaWEpLyK14msyxtzrNF1PouHOLI5/RM'\n  b += '/s8qnvn9Kjuneuj2utmfPeoDmLi/3V9VPfO/qgevou50fvu2nmij2rsLlpMW/2Zf30CRmxfY048'\n  b += 'Ij9If70t1snPTgaL9QC2j3x6so/FevOuSWyt36V8ncWBx0ho+fSn9csontjFT+XwLl8wvotHPOw'\n  b += 'LHrTyQNYH97mQoVRBIeImGlFzog/WsQKIZITIVkhSZhyi/GjZX1TLen/7WJP1ISme8nt51FPyKq'\n  b += 'Ki9PC/6PmhFDRG6Vmkbamw7epdAKj2fwnroWYORjyXdEDhGkag32yiSJl+S6MOmZKoMAyiSa0gi'\n  b += '71CmD7FHTiWMa8MmVuXKkz391e4g1ZeFJ3GX62ri2n8Ini4qF0ddg8UsYDlyzMW8NfLri4O9j0j'\n  b += 'VFhWkTAJQo0DyYVYRoV4NzZkB7g+b6S5+Bjx7Mv1oBh7omletmDAX3OSLSisgJYkwEenAy2CxFl'\n  b += 'Kl/I6iNYcoAc2oo0m14Gyeq6BX+7L6aSQ8egcuOZ+ZG1dwDIjy9t1KlQgvtSGl3JIZGH5hL37kp'\n  b += 'dWwUn3C27qOOzLhLdqaD65KykZHvYNCgZ0qElGSgSITHCJCtmXBM5jiZqnwMHgRRu6VEPnEoS0f'\n  b += 'RoIDp/ZGrjbzN7AKTN7AxH/PvEGkmuUquvWE32KzLPIHim1xLdgxbu9TchMnj1k3f9jzyGCge1q'\n  b += 'aMKDsbnYevdjNFvdoWAs4psN5xjDis7ko0KfpCGa5YjY5uYyTUWT45rqPv1t0bqnsOUDKSfN376'\n  b += 'E7toJf4mXXz1EAH8qMUz3/r2OlzubKm9drQF92oqhlBKzroqtZRX0ti5jglq6nNzjD6T8B8EnLg'\n  b += '6ZJUu+N8ShYj6kLfe4CtywjFVTcpnk/1LFSwROGPovzApyRZxdbK2QPT+QFg9Xfp5dPOF/bdWF6'\n  b += 'rgllCVvMDVvnvuLjL757q8bZYaAsUDqbguZ/K5RDaquQFnMmQh1+pomgWC4JG/liPWA8NXtG5CR'\n  b += 'u+7Grab7byDH1nz33wAeufyc5/6TLfRGI/sTdzKhF0lQHOW7HGUrCHFg2mBtZjugbP7q7svXPU+'\n  b += '8XN61Uy9fF7ZLq5eXrVkuz38bILtyr+TXu8bafx9kT+Egi1WkSnJPV5bt8aAsgGXoyW5PdeGLJe'\n  b += 'gXrbfTlqqdVl3DtiurWGAOR3SRXWptL5UVbLm4FvIYV98bkWpOdF0kgLukN0TMT1PQa/CnfFutb'\n  b += 'gtgRCy+gsQHj2nu5pFYVFF19Z/41b+CB3lb1+sK+6jaC6V15pb0V5ZL+qlI1/SbwpoeA+32m/yS'\n  b += 'PkbId61f4b9dWWkrS5MnbWlju8+0sBIEk/5TaxXDDPloJqMlHhHZUJ0ELj20oyrrDdKQJyKwwPh'\n  b += 'T1GfVkc1YdWSy4/J2w686Ls8b/VYdlzf9JWXV4ZcWWU4cCFYe3ZwfaVX6ohJn9bvKlceTtlx5+L'\n  b += 'XHmo4XMy0QxpKKZMXh7q7rJxgn9Z3WVceune4BfToq1j2mVm6fx/DUvz+Gnsfw1Kl+DIdu38nHs'\n  b += 'OMOXf39QBcbI2H1t9gu9DmRwx4AeYW4ayUavhCrQ3XkwRNozo9ymgiNjoaiEaTbpgRSiay7uX7r'\n  b += 'E/SINOihK2argNyFbSDJBZXrQ2VRcU4InumqTmI0RgcnOmu7D0DofrfGc7Ra3tClOt7I+pXa6Fz'\n  b += 'xYWx9R6KHzhIbd/d/U+JF7mVIYjjsPA3Fg4nqwL1YZEuI/GlsH3yPxjd+iA7voX9bgzjek0bAW7'\n  b += 'tNWLw/aaTA3dnnzBXMxd/NLnelTwiyq00CNQYCp8xVIKyAMcbDYz08qR7oprKrOPhm/01evN2uE'\n  b += '5qCGdRq4+XttMgBlsuHkla9iT900OQiNg78WZHndjlj4z9IWJelpjn94M7QXN5OpLJ2egXW6Clz'\n  b += 'Mdyy+KOuFyaxLEZqJX+p8MYxd+bFugndh1+vY7AsLzaEwu5GJWwUORdwf81ngl9WGWREvFCmTGd'\n  b += 'AFU9/baekNatPJlJyPAYmdCew5oNcoA52FpMi40KNIdsq6W2FXTvmFkgRzukUu57aKX7dbMyIDL'\n  b += 'ASC1VTIxF11Va1axeXOGls1oAGSEj+tERxk/w49PseoTFcAiagW60C9Oeqak/DE6AJCsEig2C4a'\n  b += 'Hm0guuHlsb+JSdteIlVCunYZ5MVt0/vjCocJMoD86iCbhDlqZ0DoXEj2AxiLmqgLVno/liGkguL'\n  b += 'gE+t+O71iDcPivR1xIg1Rurir1lzrdhV2T7gtsm2VxtNltg/xpE3PEYxuVpxk4EKXc1tXegezJs'\n  b += 'lJX5EQeHyLGqSOhieTY2dgpC1VJ3IVfZECNvL9iwt8ZffMtvluQWa7Sub3Mw6gNbXiAqH+7tG/D'\n  b += 'fk82pEKabZO2pR82s2uEtjCRtEjPLLm1DEbjl3sdLr4NXFqlZUjTsKjyBU/G3Kd91NLCnAW/RvI'\n  b += 'vI+NbA2CmAZ+YALsG6rixl7MfL23USI0SK5dIATEZTDvTwQz+H8RE8rKSRcdXEz6Ayqu1NesTiP'\n  b += 'ROhzsIuJXhDg5ePw4B6vevNtVQ9xnwpWfH7uAj560/6dYsVlt9f53gs5Q7HLlRf/RTRHtmN7/Xd'\n  b += '0vP2GTnCT1oPhEVshGB7v9XnFzuiKEvBGVDoSUwl3Axou+3LiBkArVedFlH1BKd4aiGGNCEqd/q'\n  b += 'tzo70GDBnyaQIlr5QZBMYRSR8KBpViWQo8d5o2AHkq2mux8PWUVx1EWIdXPQs0DxgRhJKJ+MILR'\n  b += 'U/gAoHDSWKs3g8JXPZ73WK3dGB59m5DRJUz/F+oCZNyrEqrzF3pZBtTrphGOtkDRv4+iQMnuQ78'\n  b += 'JNaBVQ4FW8QrVN5BxHfiFcwvyBP313AJlMhO90dPjE+Lk8jIco/JFiu8KNRUIrBLgy3XCf9ZCet'\n  b += 'QlzBrrZRhaYrEWThIUf5mDrWdoYhCtrB/bePauXSB5yvagpxxdbLCjNYG3+xsFaiFpSL3JLWiTF'\n  b += '77YjJhNaRwMsXBQf76krVWZqUxzdMILsulgpxDd0rbmSPpjsNeeAHka1RjL+5QAnQz2BncRLDS3'\n  b += 'clTXGfOv3SRrLPgRsmT0WRdOxmN/ohOkuI6WAh0lBQPv50wGNYEYc3l2VvEBs1P6uJL5nTt5JjX'\n  b += 'xkWpqvw9PqMx47V9x0yx1Z2i037Xz93o0Hh1LqZ09nkLbDyYpMy2djw6NrZ2/cBq14h8HUob+Md'\n  b += '9U6PZjW7XkaMLbri2nQrXk2utlGDvurXXXMuTqiRQbbNc1VRzpHTAwbFiW54q6cU17fj3hB8W10'\n  b += 'qu2cylwtr1166g0Hwjl3AQGuhexm253dZOfPPQBHeesmdEEIBLqk2MtYmpb2JyrCY2epsYV5sY9'\n  b += 'W0iEOWTMJiY2ZV5RS2k1RXDMONpCr5N+OqsRIdpYGKr8QYaqW/DfARKOIngNZTCbtr9A4cChkwd'\n  b += 'QcldZwuExMFdh2SkUVgr4rmlURRBnuUaUijG0TXteZKz03jDNnis3rDtGuhIYgasTIRB+AFAgZp'\n  b += 'eMpGRzc6k/MMVxbcmV+NF5/Gi18rV5rmrNXg18uTV/aXwog1FVb6/WJw4X7L99YH/tx594D/qrw'\n  b += '+ciD5wWvh+SCASnogkcBHrX6t/jfyldLDPmrEFRCKLZ8gLDE1uLxWceqng6FdGKhiQ4C/pND5lP'\n  b += 'NMa/LBJlWdtmWRr9pCngfHgkyQAuy3Vp0CXezvyMbTADeYWg28SFrQLQYL2O8xC7iJBW7o80Eke'\n  b += 'jJQCrVKQLZAkFr3EmfpL9tWlXlPl0PSV+J3+yEjOrDQUu7sbShot4TzjIf42A8/ZmwCs3vEQac4'\n  b += 'mP1nSnE0xXPawtXHXNy6icAJu6fpI+3wxcLJXmSVBKcnP5hqBijjLxH0xdTJLakyeeqMklyy/Ft'\n  b += 'ERqKgIqGYAHH4YMURO4A3wMYiAgKv3jeSmimeMKPp5m54RxcqIkpbfd03zq+fCg6nfN7XHbfX7/'\n  b += 'jRiMrZrHY/QZae4ZoVbg2p6JXE2McLfspZzXyBVNK3qRtdIo95F6iUKLjVwRBqRcxlCciEnS3zA'\n  b += '112/tvGngpfGmKBme55e1W4Ua67KG8XRF372550VeV1L6yita+nKYsyd/zYORhgy3SK99jp2J5o'\n  b += 'J0981WSgIk+UYQ7C+sBrjQePlmWvzL6EUMTU04ksGQOXFGFNnKHXjTcvKzexfp5MznAyJXxcw5h'\n  b += '41n9dVz8HYB7r3U4qvVS6KSZUOtexIV+WqWxKg3fwsVXyaqOz3GAGVn+k9Zg2f1pWpwK1HdC/sB'\n  b += 'GVperix1ooJOy+2G+9SBIpdFHDZgnr2D7U2Scf3M6vkVeY5zS6ZaAGf8Coz3ZKMH/c7EMXXmfik'\n  b += 'xH2L7dNW+Ov3Wm27LXaZClwdYPREd7m3Mnt/3B2XEDs6a1cLm8JWzIXSw8jH/0/F7nF1tfp+Hg+'\n  b += 'sWJCj7tPPY2nZz1MkcgzkTuxnVXcmFv697Ofd9lj9PGW1n710c28/q545wfu2u5+/qf284Qzp51'\n  b += 'vPkH6eHpR+Xn+G9PP04Kz9fER1Ag4n2nZb7LEVwqrDifQzdqGfPzDHfqa6c59+ngx+ppHlhOr/D'\n  b += 'in3otH1X4zewEETdcb4bOZ1wJYHrVxcEgeMtRv4s/razW7Bf/SoW7bsi97ivl+zqnjEWbidV0TR'\n  b += 'q7h0XI3G1t3eP10ux/UcAbUGoFFHj+586hX/PW8MCYFvAzRu34r+gGvd1fAWoRUdlrtawxWTWWt'\n  b += 'ukm9u3uWsYU1ZQ+JmjIv8InZ1tbznfJGZcQvzIvJdUPxOHjuT3/1kqPtZjSsGXhQ8c58UjbSOW9'\n  b += 'ykkP2WUqJcwb9JMYnSCqSFsJJXyVt5gbNrN03Ur8L2SPHC0eZVK4Vh5vqxifFr5Meri5vGpp5ZL'\n  b += 'T+WFp984N73pPLjNcVTE/f9VH+8tvjMRz53fV1+XF58ZeITj+iPK4vv7f3Grf9TfryhuPPBjdN6'\n  b += 'zhuL2z53wxtk+4+LT3/qax81V61sl9nLxZrLvfKUkp8Ml8pSJX1K3sOeMthDnpJ1ushTNJHFK5e'\n  b += 'bLA7CX81P2FLp69iLTkJ7sdIT0G+nOEprxS30Eiz0Eq4yk56Vni2SqzlVcnEGExSLPdtnrUfUcc'\n  b += '9S87iXXDLXK8bHuWL0yqjfAtN2LzC7fz5pvTDAhHcm+aROSfGEI+CddZ+i9kItgB1j0hgLpz4W0'\n  b += '2I+0cf1vrhdw4JtAKpBY/aGKwdiIQKvuZXdq9W+b6ekwFSQdIykaLnGPzO8vEXToNWvA0q9/VFJ'\n  b += 'qUf3zrtCIjETv7Yw4elhU/rkxlmyvSyBA3urWRJvcDOSG+KKVwjDC8W/ss/XZhIWknhS8szZxGL'\n  b += 'DLFyCtN/oQPpK6NLxZNYuXRe69MhL16U7NCUs+xG7dIf1XXpQRNHcxLHbVPsUlvquuKtTN3Dx8Y'\n  b += 'QtO3U9S3bZrk592C6J1yU9nboumUOnukYW647RqeMJOvV5XSshdS/xSRdJO32FM1aK+a+j9SfCZ'\n  b += 'GpyMHwihdlnXPdPmDIa2ZWNi1CeXpGmA4l9pDLsyqYT4aeTmTwZtruMUKmAbYrCF5MGIRkYiovd'\n  b += 'TkAkFrsy8ZlKA55O3UBUF2OCp2wxbFFSbDWaRCrl4758kxHEL6qrLXa2n1S73fTeZyI5ieFOuRj'\n  b += 'ZZSQ24N5Yv3YKiF0e6K7rewkXxA0zZy/08/q0t59vPcP38xRfK09wqf0M+2mX6+dJe2L9TJss9P'\n  b += 'NeW/bzHtvTz1OW9iX7eY+VDpmyvp/RgG/09vMOaVFSPGy7+nnCl2+3Xf28W6vdZXvvM8HnUrlT9'\n  b += 'vMeq/28w/bpZ3egu27Zz5NYQLieRT//jbdfLTGHgukBpLjdEIJ49ni79jquSPYNImOnAbamHPz8'\n  b += '+FsDOYxdhYxM0BCzEAcqk35gNm4MQf/byn1wxcr1DWvGQg0IK2IBueFWksuxJdWGYhseN+mvxZ8'\n  b += 'TCTodThvoC+NP41K2d8MZaG+9p71mZnvdgSI5hboIz6JVHKzTvJHdT5pWW+00oIhn67TnWr7Ttr'\n  b += 'fm2GnbW7N2Gj+yPp2GXFz2Djd4a26r7DQW2zAWzanT9rfm2Gn7WzM77blWV6fdlwQM8XSJa1PqB'\n  b += 'jhq/zJFqCcp4fDDebRSmbla0j6dshTB3pIwDGK5KSH7kY2bxZH7CdnftMmnKqoTnXPW9zGDRaoh'\n  b += 'JApecKfB5rZ9YBNGYROiqAXDXD0OMmm6Cp9LxXszW7J6AzI6pL+SM6MZZ/YT4Ok6MxEOqaQt1Oe'\n  b += 'zHJ7wcO842as9PGUlVCxchPBTdNxA5IfQpJyqajLb6tsh+bwYMrMf6ySVyEBZX9zDHKFjqKdIDw'\n  b += 'NnLQi6kSu9IRQCDU5LNdS2i0KVnJZ4Yo2zxfusGy51jcszdFqqVaYllo/7cj8tJRIP36HVbzdSY'\n  b += '3lTNZ2WpLi8s9qMWQm3MqX54puud+bDfy2evl5Xn75nDybH6Vk/OWnP6mBV6dlDp7pn91q59T1W'\n  b += 'enbK+p7F/DDe27M6EdUqExHLJ3y5n4i0Z3dr9bus1FjeVE0nIiku76w2Yx7CrRxM+vfsFxTeMJZ'\n  b += '6Tyn8uNkhK1Fj/JTA8eGuwPF3iXk6PzocrHMiRG6xXkxKSOmKd1QKyI5yXVmAqPK/GqA/eZUnlT'\n  b += 'TNgoc4FgSKRIkbdNhmzyViBXoJDDlto/GNw77sUdIbHDakO81VmNd3GSrMDqThr5WLjqWyQGIQ+'\n  b += 'ggoxp0xdScRmHLBA/ix525FYHbvexo/9vl92wTPDnxNBngbiXYaV4s8YnE2fI1Hj9Yvk2BILbd/'\n  b += 'Ag/02SuudhY95V+WF78HlTFJG7ariu3/9rihx0PCAcUWGSvbKeMqZ69Y1a7B5clyeJBXCqFI4JR'\n  b += 'Rj1f21RrC/ODYEpaMIdtSFQNXB32u8Gz8h6uLZEWHHNVcLIsXdBV8WG05Gc7QGKrtuYBzKNszCF'\n  b += 'uKDCTMN1rQVHEM4Qexfh8nkkTWPhJzaX6se8Heb6VOAsKf70r9uJc8dSv1/2pPeKU+qcbPmPcsa'\n  b += '+ZRrHIyQJue5xOrSjEaWQJ3/RTJ51TSMaAEXROdZymQvCd3XKjNIn/DKkMfYVl1KRGf83RUEVCj'\n  b += '1M7zJleXtFQp/u2eNnS3EAeqyHJ5TtkM/pKLQgSorhklVd0ddZb7nyIorZcYowrO39ouJp8qnkh'\n  b += 'EbxJlKF2mSSa43UsHAKojaSlprTLxCQ52xNSPReQz1kVNxniDLLr/mjR86jiOxewT6KcEmiV1kk'\n  b += 'sFAbwJtaMhAuiA9a0KaFP5bvHkNDUekBY3yBFk6oxSZI0Y+cATuKKh2E3kG2KE1OiAUo1Q5kGhJ'\n  b += 'Hu+hvGJkAcNYTDN0IOTBI6Ueq0Ya2sSWxsRSnwan0IZwOwAMiO6S9ycigHtuQC4PsK7/uOaJGgP'\n  b += 'URel0eYir9Wu41RnCS8falDYnpilh2WwJhF8lS8gUbehpwyosKbGCKZnfspxF2nAodsYoEhLvYM'\n  b += 'LpPQcJmu8N3FonvczDs2nu3JIHm03NajnM40Dn2ks2VCIFKV52uQwJ87eJ19KY3vjF5jKvOsLky'\n  b += 'dgbOMNRW5JcD41kNf6K2Rdb8WL1410Jbct5jfJ0RF+XnygUDdpWSZl8RMmAccTyiaQCpuA0A20V'\n  b += 'bI04UwtjLiE2Q8vZ9pT7bJFoPgUfl7K5UGN6IoVbRFfKdZg1pVU1fTSRRpZ6bpgi0lpZfQICd6H'\n  b += 'nL1QnF7suyc8wXDxWC+OxNH4skVN8OhZSfALOMRG0B01xYVBWdL17l9ZD1t1hsi86guYfS8hN5a'\n  b += 'EpMg7K6HlobpYCQ2deJXPB/F102TaGtPShXJ9IVQKi8lIcLWWiU/zAIKw+XxAIqwAJDjlnye/hg'\n  b += 'VtnIsK51kiyjkoREAvlz8L3SHXeeoyC8Cku8GG5gmU/HEWobFXa1aY5kB3MZrB0NltehQqpcfEz'\n  b += 's8bMq6JwJLcB8a0qLnZGrvGw/xcR743ZdCb/dUmMZo+vSJexYB3tozL12Jhp00AHbRkl3HHx9Ku'\n  b += '7PLT4sjYWIgz21bxhzO+KzT9ets67nHIgLsu8UScsx8HVqoDsVc5mP04ZGPeFDdLmag1y/wHmWi'\n  b += 'CeeITzCN3z80dAKLZCg9IMcgvabBTZWgMj67KCmqqHGQ+oVQ14wEHUL0tAiPwsk5NKkoiBUqCeA'\n  b += 'EC8AUlYQldFqQ2hK7x8q2d3CnvX/EccTdWeD1IzSE84MpGMtLJnjWy4KtwfjBUlSPVRLhqs3N8j'\n  b += 'Gqwh2M+63RzzDe6OeblRxE15bUVho9x1W/KZmjvHeu/oMv3Mhsnaa3emDe/2Ro4bUF2+ssiAYIW'\n  b += 'u6ES18z2p62XScG+51xBAwWnS8EeFGQoyKTg0yg4HQULpGA7Chag4DQpuD8cMSAFd6KghYKWFLw'\n  b += 'LBfNQ0JSCf3vWX2W+FBxCwXwUzJOCb6NgAAUNKfiHcERdCp581l+lJgWPP+tvLpWCR571N5dIwY'\n  b += 'PP+nZoVuWHwima5Pj+Z6lOuD9V6GyxwbcDD/lrsc9O3C6LN5CCwtbjV9C6RFYEDcHHttqm5DyUX'\n  b += 'JaFJEjWcaAdLxIdaAGSGjGz+JbEklAYczUF5LqkVAoNPvRsZdqHfcd1RCr6UDpD+/acFVaF/KiX'\n  b += 'Se4pv2c36WEZ6NeIxWoe/+crRGDVGVTFQsx1rrXLFqmj0xC4bETSURRNxfIk5QSOGeQtSq6lIH0'\n  b += 'WanplJLub7wk5nSNqTweb+YpEl3MYSwzztmGNkjQDXn63tW10vVndriMQhI6obx5ydqJngMcqrD'\n  b += 'mUdtndechjqdHJUDTU/IavFZC9GBNMrnyquB6lx++Pafkq5aoY4gtlJsw8AYhymIBh8S2LkXAmR'\n  b += 'jTtPRjRP64JkSt4Kmn9I+UulEYcOIZss7SfaQreYyuS6xJKwSiHFJmZ/RPLrO8WcxgB2T/D3d0T'\n  b += 'z9o9SW/3JKF7MIYPs3cS7R3B7dOVXPZOor1Dwxy9k8zsHdfn1c5JpHNi6Yak7By0PwqlMzpH7eT'\n  b += '3vMjO6X15Trp39OU5Bd3T/fK8+P55UR/XuD1FH9e4PVUf17g9hR/Xe2zXpLpGSd6oas3hNGwNaq'\n  b += 'JkVTNTUVDUatXEfhp9GoaPNOk/0mx/5OlSMAUul2pyftSV7R/1zfaPkFZvZEqKuvLuo2revYq6d'\n  b += 'lEDRF3UAFEvNUDUQw3QzP4gJNy/X/tnyh6fsHv/MQm774jnTNjdBWPsT7590wzybUbKeG44sw+z'\n  b += '9h3xKWPWHqOKBSMObowOmcIn/JG1ATA7+vsrxGuTFOmqk//K0lWn6CNLrz5139i4h6dHZcIEXaQ'\n  b += 'Br1KuvC1W3kMUgWe6cxxWwjGJqZbxpnoX3Lay5rWXLWKG3hUrsFCeeQy1QUChIncGnghWD0NfxX'\n  b += 'aG7WuaA5FfZE9tDIxv7sXbpSBMje5abaEuo2OhAVQnOtMaX0NHnhWOwaWq6wLQ0U7cnZj296i35'\n  b += '2TmMLclr08sn4d7fU56EpPX5xTMYV2vz4ucwu495hRWJLy7souQ9lfrncZaPbNYtXuEfOcYX1fi'\n  b += 'v67WqZrCWqdwBvt/THNNseeohHWYqbzP/SiOnk2++AWA1Jq2IhEUMyABCg9yPpOUDFg9IBsGJyM'\n  b += 'h5mz+c9kiXGl+cxfMLE+0TWQkM3Pc2rLBXJmy3nYSmLbFXYwXZLD4V2GtTrq5ts/Ub4lUhiDbjq'\n  b += 'tk23DECtk2JhYh207OpeMpAdk2iQeVbDtmwrYIwOVyJnlhxHUOllNmbXL17fm0ObcEQu04EGrTd'\n  b += 'SXNJqH2z0ConYJQ2z3CRT33gECcMptLvc2LooY6QDj7JPzaSYm9s9qLNDekDxP2IdjKE82hDH2Y'\n  b += 'SB9iriv+DY0xZLGf2Yf0/LAPbbUPmWk/KNrxVvswPpdOzBh9WMMR2ocWnTcMPxv60OfoS15/2Yd'\n  b += 'UhN//lJDzSzfaSjfaajfiZU/W+PY/qx3d1X4j7QfXUKVWBfAJr7gBr7i6Jd9zjJGyz1AQI8F+5m'\n  b += 'h5NA7DpV0lYuJ9RoP+g2XiB0t7qgZLewoHy7vhh6w4idQtF6zSX24iKhJGg86NJMkvnoMq+9dah'\n  b += 'Z/vHqQgWM3qcm8PUjZHk6GGXR0vHY00cfNMn6+pMneeFDXxL4Epnv7UTiGPyOujwzdSfn1sbPJo'\n  b += 'dIP7feGNa92/g1o6/fsoa8ivg2ffsBY7G+vw8/AC7BrE9pH6DSgfdtv/FrOSdWvXrsU3S0QD/o/'\n  b += '0T301socgi+zetOUil4HwgbgJkVk6moxev9FV/8ydOK/uXvj6Zu9bbrqqazcMNdyfsY0Qnpe3Fo'\n  b += 'Rua8FadhzvYvAkNtST6P2Hu+5zdlIt259yLZGIojvfuOIJyMTeYs/0/rrbN01C3qDfoRs26aHqy'\n  b += 'Tt4vzv0N/oeutYfqj6+z3cdaqqHTt+vh6r3b4c/1Hv/7kDBy/peZos/V1/yn+E+z6z4BX+EgnkV'\n  b += 'v+DTKPjNGX7BDTpo5cvdCKOEMYwyFNes6GhuatFYtdKn5yCPxe8yvbuuDbts765rnFHEPXF1Dwl'\n  b += 'dDEJmHCwu8eLB0WJ+TyCGWhwlstVYzMmLwshRS7ayxVEmWwsXRwtla3BxNChbZy2OzmrKaKKL4E'\n  b += 'T+NPwQY5WAVpJlrawQ+ees5k9MWDcxFCwGtlWXqSY8ieq5aElCOb1GoaWTD+tCewdgR0ldjJhZL'\n  b += 'KFepB+Fy/ACaU8AN61KRuFzrOpFBUkniRuTbggJRphZO00mSOkwvU6H6fWJl4XnqvZDiHu/t05I'\n  b += '8LpEbk9jC0kxlnTdX1IcjrtuMNEbPBgL/pmW5sG4k/0vsJK+ZjEfnR/tBTtJUjxGYLc7qrAri3d'\n  b += 'zveymEyNxYmGzHOlVeJfcO2TThhKuZSZiQrwUrMyDKDQDzNVNxnuxI4SPJeWGOAPA/xmVDROWws'\n  b += 'TPj84Sj0ujGFs3Nva21w7QjMm+lwqZfhRojJW7j9ABmRLY/jXLJAaZEW/r2Y+NIIjclRFmTvoHt'\n  b += 'LgCR9BYp2MyP6XF0b907fgDnSYDJzMlDFJ1MaTkXU6EQzwR/m4aEdl0Wh67Ro6FU4lWB/a2ED+c'\n  b += 'QYUsyKiknN45ktxkveDNiATPhodiu1p4B0ZFCotARjdjMDEbi7tcAV8NmTkSN0/ozEGrTumVhts'\n  b += '1N3nlte4Zba0rqE5mte7JrFaZzGqVyawWJrOaTmbEo2WdvqxOBDaBlq0lH8/b8HG/DQ6aUVg+o2'\n  b += 'P3ucZ8/c7GUH3UNpX4Na+vbR42Cpet6mck7TgpxTMS1avGJ/2okYB9j2L14AzB6vwYetWNLgHpr'\n  b += 'COcU7EmpyUhipeXGosM+ZkuzWi6BkaNK+BU0kf8uUtH3R3rJdLFX/CvxjRgJjlDOsJrjEtgy0qs'\n  b += 'JaIoL/wkESKhXOdFyBxHVdiSjxVbdTfCuj+RKIqubDcKZw0sh1hobrYVR746SZoNu604rJvxtuK'\n  b += 'QbibbioO6mW4rDuhmbVuxXzfr24p9uhltK6Zl89oKGceJ/t28ovnhMJeSky8sZW1QOIP5flrshh'\n  b += 'X3VW3Yt9P1UrHd/cnuBhE+Vls8nosK4qBWtN3AVIfnib0yZH01HlieLM121zieM7f7YgaTzVWyb'\n  b += 'igLmYUEo1eCe8XY11TGp9EptmJ71z4v4wMJl2Yfur+0g3ZFXuaoSrzunnWFSf3AU2KCGkSuYcUf'\n  b += 'fn4n51xT1CVQnn02oV+py7utqwHacRr5w8Ls4F1uYZZ0Sz1hFWs9kZn7NS9M7r0m1hiAhc5MctX'\n  b += 'b8yPAfqxH5pzpc+OxcnQ/6RMX1MD50TyiIkKDkhUDWN0ielockZVu1LNSbOrhOOSFPoc0SQMQXa'\n  b += 'JLtsHiUJ8bC67texUHOaFoew4edUDAhxJkWFvNrLaaWV3zal0fdjfOpBqKq8Wcc1pYO8W5Av9iN'\n  b += '5kRQyF5KW6pmNc7xcYzOky8EEg514WSmWdl2aV5LAogZBY3p6xpsO2DK5DE7umlGMJS4SaIFAdv'\n  b += 'hQtju1XnIyePCTyqra6oHoq2AO49YRWuXLSK24HjBpNg8cR1BIUduk4nIN8946a7e55rue75B+2'\n  b += 'e59S8m2iV3bOV3fNcay7dwwwU7Z4DreN3z/5W2T3TLemeidbxumeDke7ZZKrdM463Z6Opds8GMk'\n  b += 'WbuXSPm3xot0x7IQLR/5syPTiW3aYHyCLBjRlIlh2KjHX/7jCd7MeJbEhhtjWt7qV2/JnVA6ol2'\n  b += 'fMJvgNn1sDWJ4EIv8E8BmAxaxYGQMHokiaWthwEoozL5J5zPQCq5F6YZh7QDeUILIB/IcU1Et45'\n  b += 'P8qI6js/Oh1/shviAFkVEhJguun4AnL0WxaDBPAuo+aPaC39MKFARxEpn6PHTWXfpZfMZF8BJ2d'\n  b += '51RDAiXzuaZBHYluCgAntgVZTDMFkBl7QiPLjt5JqUGhGnV4WcpZO+PJJdcK+E++EJ6qd8OVfVC'\n  b += 'ccNt00ObGw1CD6IjxRyai5cS3XJqO/v45YwAa4mihXPhu/TVLlt0kr/DYBuXUs0qxZKG6SkuIm9'\n  b += 'bw8yTXt5FpZOIGQx60JPMVNclyKm3eoeNi4CVpWEYc6jm+JDJYGo+AVgjZkD7pndY+AR+moV24p'\n  b += 'uhdEfscK17KcyOslot9pVLZzSCx4TTbUQIN4Eyvj45BREgr5/Ift/lYoIrUQvJzCtV4LqYXA5ZC'\n  b += 'zyfO+cD0dCCsbgUmk8LSqHChDV0zYY3fFrWf0dMXdc+wKd2JvVyCVtNIV+wb7dIXMpDO6YsMZs3'\n  b += 'eFT00NXeGpWY7bFZKw/4EyCoys0jrMMPfp14cpEArfL9Uy6vCuIJYhiWBJQUhYHQjYs8DeJsSvD'\n  b += 'aH4riPV6PuAk6V9Uh0TTXVMBLxfy+dxqfzdBL/qXHiAj7qufNTIRa2DhdqQgdsdkcN4bcfA0EIi'\n  b += 'lfEx5Bx8JeYAcFEU6GzrSunsUzWffr9nzZI6gdQNNV4UnVd89gO0f+tYhB7C9oH3q/17s5qlgda'\n  b += 'gWB+jpTvg494t2X9xJ/unWPACu0OOGIchSI1AqMQHXE2H6R7682DckcLsobI2eEG+G/u6yIUml6'\n  b += 'zkfEjWmBL6KmkWm/FM7PO8yCBwsU/0egJIiDKXq6FpXuvuDuJ5/qj1cXmYq1GO2+CP+3hgxqmMJ'\n  b += 'vgEIpWuw/PYQL+/5IRctkjKPpp2haJjvrPqJxOBO5Cg0pGCsUOMd1mvZrIUTnGXUHZG1vFbhkhT'\n  b += 'hrgamYEYCSLre3rZIuSKnCO0yAgIsW9Y50IBa0P/ORWYswH9nSjfIUif/aSWEceei4zdOcKX7kX'\n  b += 'vcn7pWh2VjnqP97J3H4Rz5SNpGHhusUKSPy5MDrKYScQwl7tec5X7yoUdicYr098bMjDVMEgILj'\n  b += '0BTJ9jiua2JzKLi9WaqtjHcjJ5uasjNb6R83zarpolJLChDpJYYuKseVGfFx8zF14tWzGDJUFdv'\n  b += 'JSBA2GeOHvGg4neLNbOaoPOKPBdgrz2apfAGO/qEhBzSZcguX22LimFoo/TJUh8P5EuUawOMt17'\n  b += 'ugTp59IlgX5Du2S9OakuuaMrkUYx9eDevbQkfTaFUvKSMmnZIoHNVtnrTotNTMNHcE8heaDLcai'\n  b += '2Ex030KpLmsXUk2zNE1/2Xj0hVQcSzOKQWLTx6KhMFVGlku4KczHixFrNEI4GRdUiKykirBdN0G'\n  b += 'pN2IQZpJkFcXZXHAyYX2y3TH6YU8jDW3f+MnTLPWW33DQjs489UDHiGQJUl6qkILkXepE0rgarX'\n  b += 'nAPas4jh5i5xz9knJNZUpk3vSv6ex7ZJvlKIhIzU6OvyzynzTtjceDXBNsY1s98JtSg2kKc2Bb2'\n  b += 'am6YxSUb1t/aYN7/2nTGR062Mz5Vdsa7exd8gx2vrqLwIKIlMrqeXdvXpiquom2XOEFXYBWGauc'\n  b += '0GxuC9YOES1pErx+wxf5JN3QMFmM7w9AB5y+TBHxcg5IgtrA+T89rrtC8ftKGRbIVFJLFGMzEUb'\n  b += 'tsSHNLHwDU4IFUYQSefbLkld/5CMMSE4/68XU9tGraxXbfrBPtlxtfbL9sgErLYDFx+86T65enQ'\n  b += 'r88dYx+GUe/jM/eLwdvoZL69K2er2QSzWoX+3yzfmysEasuPy5yVinse7CzOuMKZ1cCzq6LuYhJ'\n  b += 'hLbLCjLWKDJ2DdstwImY6tLyWWDlosxewpEfILFa8ai54UqxsHz8AXTZv2e1I56szQUlGz6TO1+'\n  b += '6JRAoc6FIU5dsk7oKq/Zd83ziFK95NGP2yBcnj73m+faXJsOa5/Ypt33zl9TKv6s7bmE0V5A36g'\n  b += 'FHEoBQASGf3i0qq0Oxaq+KgNBfpm0JgSYhk7FXiodRzInN7q18ZbFvc1DCHbbnDcxRb6gSfKhou'\n  b += 'LqqAM5GjY9T4LW/JKyu/ngOV3/jm3X1VxxCo363GN+ijfpEV9do7GWjElUg2FCAmbMY1xJNeNJw'\n  b += 'h3u/PmKGrD9+QLaKNRxTwjmzpwnzkOxLrq+wQZNBatAKYb8qVUW17rLXvf4S8kd7z5ReQy/mFiv'\n  b += 'npzB0SZ8c3Ou2t3zT9wkCOkUmu6awa8fsu3b7XRx97Zpi+hOT7gWZLYjO4PXlXJrhwGPH0eMQR4'\n  b += '8ljo5F18drJxY3NxI3j33cPOoTN4/9OMTVYCKCzl1x881peewaHbMg8CRx880SN58lTv5tUw18K'\n  b += 'T7Tw1FCfobHwnWB4CQ/4yRAcJX8jGNg0jxU6EUg5prZQ6YCLbIViTLe6kI1lBZWDHVVRRPIekVZ'\n  b += '2vr5lV7OSwQY+PoBU+x5nObHxGcny5Ej47keUGF9nh81Pp5LvRZiv1x84825UhjM58tQjKlOLUV'\n  b += 'oQZkQ1lyIREt3eVWb46Q4zBOG6Tegesg42veTtA+A4ogP0ERhxJVJdTXof6H08EasODYP2VGBqg'\n  b += 'qO39X5u2yMMyaHqEgCyJq2D8JH+rW4yq507YyX2FdD4nbTJLn8fTvfyHZORRQ4MoQggGvoWcOb9'\n  b += 'BkQAGDxjOElbsTMNCn+YqHUp+Kb2xmdsSQyPgE6V1GcUdMcirzyY263jeY35tFaN8RkmpF+Uyk+'\n  b += 'U+UnYT65sXEUlqYb9lT07FUyrwf36JeBQNObZWLe8/ErKYkJ32Cwn5PeSuIB27Okk8XbJZq86uu'\n  b += 'x3fUEJb9mIYwkvtlb9pRm8Wyt8NjY5m0v1Uey9m7aotN373xpP5KZH8buu3fKh1HUwZRQ+Sr4Qc'\n  b += 'Ew4bs8habx+9j4blqsN9+pbT3+G6Kr9ANhlf6r8YZos4+UzoXjvyH7uucLnSqiX7PJ4rDe5Vjib'\n  b += '7NBAmEB+GdHaiKcZumOg2v8oZrENmT/jyC4uRowD9DNiU/ey3SAfFdd8rCMon+NofeGio/EABot'\n  b += 'jpaDVJ7qLMIq4aotkpXZ52uFbbZFwMFKjXJBSHL5GotDAIgNR8sXy6B4UXQwFgvszYujH8ae2Xs'\n  b += 'ChKoxh3M3QEq4fYwowx/rna+3lTt/Z7jzF7rvfERuXORJGiSSDjc+bvyNL8UdbSmJonjf77DCZm'\n  b += 'KLm63cN4jX19nyviFd0v++5XpLl5d0U2stb/tV4bbHrNz2hYuj66y/bXde9q6k+7bXMyD1tCkp4'\n  b += 'ysyJpYxU0k1Yo6mqjVmnzFcxyHdsgJ/QxKUEGpUikaobQGZvgB/jT2IblChpDG45BUq1yAgbjCg'\n  b += '49IqOi7pYsPw7BceN+qqeTU5nHVVFitb+1E81IrAGplSVEdNNKcNUT+RiqBG+J2oiGpDspaEyIp'\n  b += 'rqu0l7wr2eN4VVhTNzrsSZXviBcc7DBiLv0mPe5gbobLvHb82UKnst83m84qe7lLu5LCqnFD9tD'\n  b += 'p/vkqdaY9SZ3ospc6qhGZSkdB8xpQcxzVP14sFBOGLnriznQqrtAR5hP62wXAEE2pK+ttECns4j'\n  b += 'mNP11vr5ThOctYca+CZXmhupF0cx3E/jmNRsJFQT5mD54mI9Yxwg+vN7DeIGI7coIRs5nCD3XzE'\n  b += 'XTfYxUdcuUGJzHji4bSLjzjux0fsbxCBm64bZLxGz2h+r8T5pyi9GNlUhNrVlWMLL/gQVofxcpL'\n  b += 'V1wYQZax3geLkhLyBsy1D+ZbkbEONSkQ/pzgsGTQbpfdO/bsLPdorRPRTb2ulRJW821mXpwnDnL'\n  b += 'e5UrG50mLdu2UxkmLwauCbcFtqdiEvoNhwpzNKIVk6y+0+15rT7XqQm5wQbnd/65f1dm9U+3oOv'\n  b += 'q1PdPm2NFev13lEXK54ucTZmCzNZxGcps9hCp62VxZrn/RrAksvlyhW/yDt78ja6k4C1Mj9OaYj'\n  b += 'S116PIcuvckpz+N6O9Yiv1tM+uvSxyfemKQSW/OGdatINDMhof2YBiYgARzxzMVWITRotmEOr0c'\n  b += 'k5+lpsa0ZxtskKoYAiHDmtWZxyvjgm6xwyacqmY5uKWGXiKc8FsABJ9iki79Rec6e/rK7z/OKdV'\n  b += '9x93lnDbBqt1X852L3V3xUYO8eqv3sDwW6TNvrC/6qJ81jbj0i7OTH6I7UGiqD8cREuyOZvTsS3'\n  b += 'x3JbN0hzWkMxYhTHve2jt81/f1TO41trLGrRVdyiEsJyZ/WYVq4Y01x9irYVdughBlty9Nt17bn'\n  b += 'eTh8e/7mtr0qnw9YfDtZkdurcGo+j6XyG/BXswpwvMKsWAnIOpwY5mqIxbk/K9u4KCP0jSKnxlq'\n  b += '4VLLt2h7RTNaFSsD5+9aVzX88nvXlye5Mxcb62MnaWNfbOdlY1yVzsrEOzM3GuimmjRVXV4aueA'\n  b += 'eBaxiUsF44k3wrMCXvS0nuhVf74oEon4UuD2/gM4kktWbf5qmN7B+ETI5WM1nCUMqBXSkEY6XKp'\n  b += 'MVVWrUEk8a0avlDrNoWjKwI47gm/8w2eL4zCWj459RdprakZhNZGohCiceYGaWhidhBPqCYglOp'\n  b += 'a56nyUQq0WYJaFlRwvSYo9LsRL2oqrLoYkVfSj0YMGGaDkzJUvzDyGrH25oS2K+kzLByH6/yO2I'\n  b += 'uHNSOnEZMLqkirWx2RyLykYc3ThIeGnsruDioJYmUDLuJWUtSKZnWn6QcAMeyG69kz2GwF8smls'\n  b += 'dyPLLr3+zXjfujTvbhVDZk0ecR3Lebjk+72Ojx6rbYYOTeQ5bleuEtRj1YFCom6rmuO9SwY/a+O'\n  b += 'td44R4Tv4QL95j6dV64x5qU+Husk1aB96hnH/Y3JipAcjzwYW/2Ukt6j9xgmd5jzHvUKQb3GMvm'\n  b += 'BmL15B7jcI+xv8dY7/Gf1FjOKllf7p7w1cTy9lhxDHm+ocgvsBsdT6QcqBF0NatOXT/dNCDcbpA'\n  b += 'umQ3RZdeCxAahT/To1WW6cQvyDK9hKkvKJI8DX7nEGbLnavBIbfh7NyecW2z4avBZcp5tdmmbNa'\n  b += 'px8/BZPmVCbIx5okqC7nZ6XphYl3ruhrNnau1Ys1ZizVoxMv2I5UPQuEyCR6xbpKesqUhWDsWuO'\n  b += 'iEnWCb5wcFPxk7yNmTZfVS+hIXpw8M4KvFx4dDJOEt5odUqTSRQfGI39rTe2HMtuTHmfPS/sRd+'\n  b += '8TdGV9Nkq+pzKdXlx+YrFdU78FVugNIfyuRno7J6dJ+YP3QT0Kf7+cuVZYcIy0TBYnv7PG67etz'\n  b += '3Mg9OGqpqrWe9rjRbE3Czbv79P+n0YZpB8cQWGjdTH6xYKqUgu9SfvZ169q1j3FhA3oYbe3/tV+'\n  b += 'vGvmUEwX7QI9ipd2ayaKgmo8ukBauyCnK2xSNN+CpQsZMEF4ku6BqYostFSQhcVInHdlgRBLKKl'\n  b += 'MprVzG8w9lcOWi92EEqEQfy4e7tUhh1s9vH1NcZVxlnG17McFTf1Gl35+U4Inpc/1iOmnHPqGln'\n  b += 'jpo2jJpx98AUAD1ovY6a9kWOmvLlZ4+5LnCmohsvD39wJ8bLwx/aOWO8jKvjZVwZLxXA9xV9SZ0'\n  b += 'ZkyiSWqCvLc2FcpYvZhhgTi7sSu9nwnslvR+599X0/kRdlsA2k+OlpJYf7OEgyHo4CBpdHARVio'\n  b += 'Bq+wb6RbNpt3xVTG1C0m6qi1mo+tzht1drKEvWK4teWSKpZ5OVkoMsOVgpGVdp27JExG6nKiVjh'\n  b += 'M67f0PJBEsmKiXTAq+vlEDuz+BfV0KS2uZ+E/wGMgcYRYKRW9+LAqA/UiYskWBWfzvDeXTNEp+L'\n  b += 'QSRRBMwT5Dr7glusglusV4VyxsXFK2dljyeaQcd0st9G8tIkneLhO3eqGsGODe4N3ZVEs+3fvUF'\n  b += 'RMl+FQwj5t+dHT4qJi1SElsfaII0t+29i6O42lIP2a6Qn3I0vbztT+TKYMENCNQKeI0qu2NdJ5h'\n  b += 'QT6PN4OXKZsh/ErM2NMh2mUIKjrAZyPFbXrl0xgMgTUbvF/o/uVJEQ9+uyAcE9VmpLWRu1q9G0B'\n  b += 'XLWYX/WD03vsr5c2l/jxsAC7An20kWnSTr2YSyOFxTr9uhqGf2lQbwEi39+6lZCnll19R+LtEFl'\n  b += '9Y+nfFosEVsjdPye8kH5kVqlZEwsCgM1DSfi2QAM7SOGFq9jUmVhT4iV7rt0P8FbfmIriLGLpxG'\n  b += 'N/EXf8j3HvuV7Zrvl59SdOdEso2fd+tfZJrjstvixo52UO11h2Jt91fjJDL+OkmYh0SjbNTKb7U'\n  b += '5GzR8mq+FBnoc9bnZvp+qQx7t3sNbJ07J6/DTZWzG04t/sY0biQ7KBse5jxlvX7lg1AkZNOhppq'\n  b += 'GyiiXv8rqkSZ2GBuo1EF9mosL8WLyCXfF53LvmitbKyU2DRjXe7Q5pKPOQOzz6PIElJK1Tccjfr'\n  b += '4AEb75YDJG0+wXr3/CitJM0zvZ2ZoTI8+euKix2s+VGgiYuL70g+vFHitbj4F2FbM5WUd02PxyS'\n  b += 'ZiFgDecrLSShpM3ObPGCkN4hpCkzIysq9ibFQlFGA0B06DdGReIh5QmXOIpQQEko/2VWQLDrQUm'\n  b += 'JNEVaQLED1Z5daC4W0m3wrhmw5pSdQbZ1YU0fkDY010W874A7RcW7q1jN6b2p6cJabWn9G9aZ89'\n  b += 'mHvTW08o+9NMSZxwjeFIFD3Te0b7FRxCVOl5rekXAm+xIf2ttw6WQ3tZRra40t/TqdowsPv3TDD'\n  b += 'wQ0DxYMnujQQXo14/XqBMln6PETz4IJOsem9kxE9JdmYcb229hY3ki8R18mGW5H2dqtPeyN26UL'\n  b += 'RV+gTG+RFXDWfSwOdyfPlWlB9bJjoYyrd5LKml0mer79ikL1OJbXP11wlqEXiFgnWEds1eu0Ak+'\n  b += 'aWF+b1ZJb1+SAK7Wl6qI4662KfYUCwthssYamp307EZ3hHCNEtaJY8V27Sv3nXpBxU7HpcIwoeQ'\n  b += '3fgcV2I/DrcJ40b3uehu9S48TCojR4G9U14ochSVNWqH2HEEWnfQbRDU7+NMO5xkbX/EU39Tiqp'\n  b += '3+7OvGjHnq4X9jUAWjyCmDH8O8+6v3/MF3cvkHdXimjHGyWoDSdbRbTjwi7RjpFStKPY4erL5vk'\n  b += '5g4JkQYlDgAdfe0nsVkzaAPUkojmTBIGlkzZU+U7SEF33mck+hmq5f8Nn9J1dF/j0PRq72ODhzM'\n  b += '5K4I9zqSmOLTwCwa21rcdaw2TBpjpt4S50l9scyF7Ukx1XX0P/7gGH3YX+tr3ob2AjB+RaVJEQx'\n  b += 'HVUAq37waz3Biz1frdV/Mdi/TM+bWMGuHr8GT320/hYpceJMn/QBpE3Zj2c5uwwK8Q8KsTRP0lJ'\n  b += 'M5SOfVzE44Tvpx1n2xNi/oTR123Gqy6mzBfOF+GgPmo7RhmvTEVt5/P6pq5Pg4B89sFAMhcX69J'\n  b += 'usghIWQocxC9TDyeKBwkoH24dZHI1SeZiaINm/wVekM+BZM793W2ZR9PuyEHgmPuArXDMJVVUEL'\n  b += 'zOYs7NQhUXq9T153UyHPH+p1x4sXgHo2EBrlv4IyOlZXDLU4nfKZTd2b1WcgKIgoqMT3qIijPEC'\n  b += '43b5O/TpYvC73llD0WKP9TkwyRo+cWcOs8L9MPDLMm+mjY9bfPXcDPuIX08rTJsVvSe5Jn2D4ch'\n  b += 'lLaHUMJZjxKzM/ubVPlVk9mCYTjqe7EqGSSzxcJw1H7P1No/toqnmd2UNJuPlMOjuprc+A7+9Uu'\n  b += '1JhXeWgWaNWFjh2gWZhXwsjN+NqtKohGVxKhUSbQzVBKNsK1Yr5KYMCJnGHWikKEub5gkamZIFV'\n  b += '5nq8M7vMl0JniPQpmwVuw/qiXubeYPlSGLyd5yADzcB46GNJJUABjxFQNC54tcJw72g8VYGO/WX'\n  b += 'O5G2TGmouAcrgDxs1inh8TJmmKtbAt8SnQqTo+UAZKQPmEjxiIlinzlzt5q6hNzNqazartWO+J8'\n  b += 'xNyAtIpPlQAW6xNKGgNKAqXiySkeZ+nvdHP0Ff1J8+Ne0vyg91WRZsuUFckGViQrdHvUARZbRQj'\n  b += '1z1H+ARLq597MzTvZLbGSA+INPJXN/8xL0XxZyFTbvz60/1NqKI6r6oYN8p8MlrobuUSiz24BQu'\n  b += '2zDW6d+1m63SmJWnFIrmdBZUBfx4LKgB5xa8x6d7qE4cbc+vypOCyLhOCCvn64FOlzAI6zHYnfU'\n  b += 'rMjiWprPqHdD9EQAoKgNF3sn9wZ6UXpYS+mqwWAA++tFkz5H1tgBo5ZSlkbfeHpPvgU7MXdrjH8'\n  b += 'GEktM8Jk8FwRy0OIriG5kQYxJ+HDRnxiVg9v06Kgw6t6QlM8nmRt/7ROOwcDanqcbCWvJBw4HsK'\n  b += 'XukdEZmOEnIonGBGhpWBC4NHZpM6U2a24OSvSodkP1feO+HWh/kD1t+uxYnrqrHiu3WOWVPOVSV'\n  b += 'Szz3RCKIu27dO+gO5/AqAfM6WOi9zENFy/2Ru5FDa8iUNcr00Tn1wciPrexGFnfmsoK9zE38ez3'\n  b += '4Qc23MTq2bew9reezgSVe5BRFY+aQL3O5O6fLhj7ft9uMMLZ/LZdgissxr37Wj+UKSMoNlGoXtx'\n  b += 'NqhAX4DsEEgCcizN1W0TiJLb7rlCpDleKqEeLLUiwsOYLis2ivGUv0zMWdNpG75H5RddmVO6ees'\n  b += 'FgiQhS9ewf06FO57S2V2KH6QCv2wRxAkw490fcwIIBPOJEMxHnmA+VppXdSK2KgK9HlulMU5fJr'\n  b += 'HUblr5XAdUW+l6okMGg4sglzkeAapveiwIF/tVIEgmZZHXImh0BGrH056ZgfxozER+ZMdAfjRmR'\n  b += 'X6MnFD7tyQn1f4X4l+S9v9dfFLt/2nyS9L+fzm59j/3Evf/x3s8NwJTiIJ5yTGGRvK3a0EdeNgr'\n  b += 'PPpvFAZ2s83KOf1n96eaMTjauIZ2AxzNdtWQ8K6Dj5wqyfRSKiXwNR0RZxZ9Y4QA0GfIamiKmzd'\n  b += '7IfW+mwTDTlW+C+NOdl8cCNfUVSyi6Azb7+jmr4yLiW7+yhgZL1X+ylgzHseF30FrI1YH9oP/mZ'\n  b += 'WqXJqro6Th/ggwhsfCGF7Kaj3UByRylvhbBmW4RPDVWWhf9AobWFy6rruYWcVG9MprXFda5h10k'\n  b += 'cO1fXUcrqXORk+dLRlUGxqdFd63vBY4ENJAHFIdL+fc8C+dYMMVG37Mhn/pRTT8s2X8nJbbaCT8'\n  b += 'wsHDDAc2ifxNQbIGQ0XPEjUNA9cUr67mK57nCsSrLOm78D1fKEmN9CobyScpvcoo6PUqG3iVkdR'\n  b += '4QZflzc+nIdcYplPZSMz8C2U8x1T1ihKlIT4/ShN1o1gJozAxCEv5BRhVqJrD+osFHfpI3dbziK'\n  b += 'nE2UPGy+4IF/F3+nAR67JbjziII+o9R5imfPDfxU4kZVRZitsRCapFnyNqPlwxqWn82NWCsFDk5'\n  b += 'YR+lcHXLguQLUZy1LJPpJrlrMToLSGLU0rOtOe0SM5yg8IHmHDGNLctRkJwYmQoYK4bjpEp1+6Z'\n  b += 'IQ9NvmPfem9C97Z+0vZt/Q4rmYXZJ0+49UDw2GyztB6LjR12Lq0nkXLZerGdH++Czoi1VtNF5JB'\n  b += 'SGlvFu8DySkk3Kjkw2fvIXDYE9hLmxLSVWDekzm65c9KnSyjsUemuGuKnGquFALEXI8eq1dX1/8'\n  b += 'mvmnzZ6eznKzbm08b7dj0I6Pi+3VgYW/v6dmOBgopvV6k5BgIzRo9/kxwb2cftkPWJ7rCvzej1X'\n  b += 'rfd3d22JRVuTe+Y0RwEn9j+WdPNNwSASuTHxMRnm/DsKyUdO/Gxj6jKO2R9NCVSH2GIpliJpthK'\n  b += 'NMV0RVMu12jKlZ71JicuQhzrmJWLyUcnpeuKDY/5YJDyOW15TD0LvxI3cvDWnXoju+/w0R4lYNp'\n  b += '7h/rQHyiXZepixrwgHEvusT9AnSqPxc0UqL7Qg+SSSwciZQuhutFPY8039e+YZKnmXsPzLBy0wV'\n  b += 'Z8dz63NA9gzqSU7owK70q2skyjOffhilmkERw3WnyZab6VJRQhYImoV/s5kiBTHWbgb7MJLNlE0'\n  b += 'iYVlZAILGykkx0wo1FYEOtijTXgGoj6tgOMwoTzdfhJdPD0jZ001cZ+5UU3Noi4+Mb+07EaC3u1'\n  b += 'HdCeJpwfGjtJcPZHegPWqPguRJ/NknjEexFc2Q18fRvefL4QxQuroWKogYwU6ybcV5MLIH/vVre'\n  b += '99gFvEURCNRYEgCKvLxJ+K2rS/6Z5HHjYJfS8pTu9I+oCHwcRESNeZS5bGnpA0bhCDX8vsZJ4iZ'\n  b += 'U4SKwkKrHSIxWi4h+FWAmj17WzW2pdzpNRyYBueueivAZd8ajdP7d4lMmeAD/PdbW5x5226WtQU'\n  b += 'emgyoNwYwj+DtIbyu1QmGxLSuIKfzeLjdp22RKT+BkjunhA4zRluMYdY+wSY4tDP9OQoNI7YIli'\n  b += 'oiWmEhi8eQeBwUce8tlbflK52XiJUUF1SSq163hKQjFLJQX3tPgIVaJmIPJqfbJKhe8dilUyfLp'\n  b += '52cdG6WzUGTJmFi1DIB24oKxyol8itfFJbypNV0pt4t13/2Q31UBFPQbic0Sl3fs2HWHPdMxdbi'\n  b += 'E1Y/K/NSWdv2B51e0ZCbpI+n9NnmRbY0gCRJQEsEy2xOP+TNycUUeVAn0D3kc3tEPpkFFqN9son'\n  b += 'MY0yZmxJkCJ25KQPmCoukZIDoztiwdA9Oke/j/XROEQCpsme76GdhjKcFK/tjIVKjO9FcXEdCgO'\n  b += 'GPzg02puDk9Tl+uQKfXpdYnKZeaRG2GQWIvgddRtfdaWEGOjPnzLzOjL8nTlQCTbl1aIzLO/M3T'\n  b += 'nI4Tg+sd90JKKcMkAwQQYSd0hvOtWXropudj6+TZ08/EbunmWht7X09CTiKjsuyck57q2/DSmL2'\n  b += 'fG5zL3wIoiVb5vX7I27j9VbfxBaOMH9MtWrvzZFKsQgaFk1VMM+Gyke34Y6iQ2MH7o9FtVogoRm'\n  b += 'jP7ykzNSV9KiexPsJ03/4LbOZUcs53EpaKdX2U7t1pp5xbr24ngk0IQetoZJAFOsp1TXEH+relm'\n  b += 'Wy4xw0lb2G8FBYXmJpIMzVHSgEQpiCo2vD65pIowtfsDacWH0yVLgKFWXvplA14gqxU3i6kHmYw'\n  b += '29XE/CU5/nAU3P1QSgZlqSsXHFKnw4MkiFSR39zhABcncPQ5OQfJ2jwNTQNaub/PHfoXavKN8SW'\n  b += 'gzcZEX6yP3S7auRd5MQjJdZO54rHyWIMdlpDjyKp00o0yu1GItT0vWmpWWrOVpybL+pMC+t7efP'\n  b += 'JZlwVygLAvmgmRZMCcgyynpbV0J779j50vZ271Uwy/dYPKeEx5MfnYPM7WObPR4upvvZcGOe3f2'\n  b += 'H0zuKdPMj2XbEj5W4i/xRGI4jWmQfjuZg1E73M+mPa85owY1aekzfkAbN576lXYkE0Bb1tx3ifZ'\n  b += 'MR9Kk2mm53kdhnB3B/knmMyiFl/yMs+9Qi5VQOrf2/Q5Um6Ps35CYo6eg7tQ1+2hCCfFxyY5QKQ'\n  b += 'htRIT0CQA+/w0ZaOPExN2rL4NP28eiXxYaGbpGZuIir8TRBisiIJEwRnnMeE6rkViUf9Y4KKmas'\n  b += 'kDVZANWsOUxTGIAZU/WgO0LHF2acX+35KPb1WDdlJcwWTrq+dVlgpZdUfb9uG2V5dqttKEeSg85'\n  b += 'szD+7IZRs7ZZ3d9YNxSPumc/OsbAtgVbRXajKzO4IT2pCXLPJuD8bp+IkyKSsnZtnqxtftC7Kk7'\n  b += 'zKJXpWkVKxoQChKqew8+JFlE25YHBPjCaNzfBFazbne3Bym68Wa1Q94ZTUIscI1X/vQ31oIav4e'\n  b += 'fUaRTJxYvpaSoZGmICwesHxJ+XC/KCIcLKCMzVPfn3gX4DWpAU/THGI8hVIhvCFabE0GHZBWwua'\n  b += '8TL7tbb8YAJoSOrvkPGRTUciRes6bm6SlLF+421QaRWkJrD3lnvM+7VRs590NC9ct+veZwlHhiE'\n  b += 'aGq5jFThJOtPqpzhXvgaPflvz1OPVH17dl1d3VjexR88hOoCfFBzKgVK6N7EZRIOStopubbionk'\n  b += 'FSOc1z9cTXPWl1vLqNYEXC7G6tjBhMWSnPURoSW5CFM9VTxlDzg4TLTfWj425mXWkuDnImWyEnE'\n  b += 'lePOwLjtnsW8+Y2WwhHutLeSaiNJXE7K5mQ7myp9kaNWWz158hzZ4enEuz312GFQMXvh/ixTSfs'\n  b += 't7LpnSEieeBuCgakRPOE9f0cEDVXiAJuITW3hrzyfKFCKnKwjg4nMsrmH2xJsP/0dSP+LeX7Qo4'\n  b += 'yERRRGjVl0Kr1EWZdIIi6ogcfp4Mq8MBlHCBrBCttkqTD2ZQ5HkoElpltVU6aj5Ses8o2+otKuq'\n  b += '2LleaWhsUYd1s86FJGdlFDtYWe1nAZCNU/RhJW495xsSHe8843jVu7j3D54yI9+9Xx/B+Mc39BV'\n  b += 'iuE57Yuhbo1tRAMGqY2OytOpNE3ROUhelg1EQJe2B+fNVoeVQeImngb/W/mK7p5y/3E8eV5xmxV'\n  b += '/ija4oTV6EPoKbkXzYeUusBtWSjg+8PxKSidEhhska7hj+tdh3pe/W8tnyoUcZWFYuakBWv3SCB'\n  b += 'VV7v4Cj6BSUbx5bIE9NxXz6z8FIxRyfMTOa6hgbgKpa/8Nchi4dWtRWLHlEsYatkplKVY65BJ29'\n  b += 'x5LOT4rErxnb7BJzqfibgcP/63YGGru/+cb//JW7x1nt26hUn7tnZp8VM/+L+yXt29mlxuX/K7/'\n  b += '9I2WIxUReGMeXpT+3UREbCWm2xlrlckUqjWjeoDERnQuSebkzJfRStEFvc/shOTUvTQVsSwSRNC'\n  b += 'yFIS2H5Kt9pVlZrzuxSmqeXWUavY7R37WRPe4882q+9g33be/NkT3ulthfd3veAvkQg1e5rAW1J'\n  b += 'rKQltpu0JBaUXaAtAe4lj69SYtC2sJhJJkcfIpPs8VpThRQ6SFSTgBrVIvIZlx22uyw0nt3iCku'\n  b += '+1EfViHdlsiMTcuJVclI05N/eeBUt1gKRlJhsIsIeR2MhT2GkgmQEJmpN2UcKkPmbFSE2EBCuRU'\n  b += 'PQrHWUggcTQi6fd4bJOcXk59UweUKn2pCoOPqBfz76oy1/fctkDSz+dvTBr37+xq996pPfunUNC'\n  b += 'P/t6Eff8fZv3/b0oXf970vi17qf7/jZxPduuOOvnnc/sSo5evQrz/306KN/X18SX+h+fujv0bYf'\n  b += 'PPoWxj7ZWLf8eyQYBSOaxO4KMykzyDy0q0eVg2zDo1wQ3yZ54VZ2VxbGAakiiYl3e4JvU6ZdTmI'\n  b += 'l2mZKZDUa6pnHhsuCw5EkRpba1VGPY5trwfhK2cqXxG+SrZEl8Z8FtzdB0yD7mvQs1mOMDP9VT/'\n  b += 'aWYFoYcBWlEQnVSww0FmJaI3CAQaQXliZdJKTVXDfADAccAPYdQ03hqAwLBaIEuFb4Ys19MhUIw'\n  b += 'N/RZ2WK7Q8K/KZ2ej0afd8j931p7Q333X3lHyo2TKjt856di5gPgap2ydnY/Ze3fP1jd49d97OG'\n  b += '2w3ejP+0oOnPLHf1qbZ6Xp9qq1dFtRe5l/jQw5CkKI48rDQad2HBxdCHf/DInBhK3E/kRsQBQyp'\n  b += '+a/cBu/kyTzYXC1a48WRkpbviU6Rom3/pIslkI4o9GU3WtZPR6I8G6Me5TvO3xkyx9e2PKWuIe0'\n  b += 'zFw28n0wDrHXOzzPLsLeGpf0i5lbKgbEoepJCHnPP7b2V7rXAkpTOBUbXFFfEWfPWNYC9Hwnucv'\n  b += 'lVxUZpDH/RsoraKjMjA6/8Iz2urYnZnEkESlFqIuzLXWDqEgBuZW1XkMMyvy9rJIroKCciU6Xcl'\n  b += 'YZzgYRHxtYgqayJnpfAbnH05q9EaLu8636YcXYdskzo33n/2krTxqdDG8VPRxrt9VCbyjYSnpPT'\n  b += 'yYbR1mxq/Dj6/MwVE4ncHpPDuKOCGs/1V1x8MwQwcgShTD9//25xxoHr4BO9xZwlEPwVNGy5b9v'\n  b += 'xcW/b8jJZxPHpXr2N096Mn4Au13hdKaV36QrH2UF9oBl+opS9UGG7RnnnNGTVUfaF3l2tQlZTCq'\n  b += '+YsBqpOD2pSG4HNCwvhwaBplIjEABNUHrBEIBdWgq6JF31TKRTgnWdZ7CReCqWXj6YMo5Y8y4qg'\n  b += 'ozzP+VFDckcHSzrluGyk5JR6HQTmjX7MiqtMm8nM9JYclHl25dDMRJuZeC1JaeZM5uRcB7+kK8Z'\n  b += 'gQG5d+bYalFYl4WssH1jDyuqm+omCHOpOsZNEAdBk06kv1cQjpboCsBQ7Z1zDV58zHKAYQQWiZq'\n  b += 'e4rfd2t/Xx1Jf2aevjJ9PWDRJvml2KLMrGE82SZ9xjNjJerqmVjPd4ac1y67Md0+qATBfQnYDVC'\n  b += 'waYUO0LHmGSWWWzjDpR76gTdY063mvO2IIcLJafjzaQz61SL04ua8OCQUB693lZkFogIlEPgiWX'\n  b += 'kq0EOeKSamm8pHfiQd5HoLvxk7GJWJwIsZSRm8nCOxBLHeIosDMDG/ROWPUZvEvbOKY8toIe0xE'\n  b += 'O66TiKG/fmTAJTJiEJkzSY8LYIrm6bcV+GQP42lkxAtub3YqJYcW4bhRDJi7N1xNsz5KXsjn3dw'\n  b += 'HsvNsKmn/uT66aG+4qF3g5yYZS7iMxRIbzTEbz46hANit+Ap7tUz0yT5B/6H3uDTtHKDQ2jrvtD'\n  b += 'fcphcY1VJgqkyz42RR1DLNGgP8JKilURbzRUY0WsRNL4ZakLdTWpkzuJ331MqKVGrJCpGLAk7pG'\n  b += 'dbvW96ZsoT+YnkVwBz74SPI7W3NKxkqqyVhxJRkrEZisaK9IAlu/ZKwYLeIUP2mPrcazRTOmAP9'\n  b += 'x97rVCJPBFkNLgA7viQqwpg+jxmDYWzJqdCvoTNq+Hxljwr9EH9lx2/OSfmRrSscFgysJXgeYDf'\n  b += 'sGO5LgFwH6aNdAwAOQRUnbQqitYAwG77N73SmV46Y+hA6vIZ+RpO6leV19OQgwdAkwMJDWdf3nW'\n  b += 'uX1t7d+Ltf3L+x4/dgv7N5YX9hP/P/MfQlATen78Dl3qXTDQcg2roQsLXayngjZiso+cqtbbsut'\n  b += 'brcIQyiy78Rg7Hsm29gpO2NfZqyjsY11hOwt37uee+6pkOH3/8xwz3POuy/P+7zPijbnTTlesFf'\n  b += 'lpgWbCUY4Xf6pBUu+FrVgl1nCGZkt5c0Rp/TEXpLscuSbHpwq2Qpsi4kUIKywWakczTZyiIY94y'\n  b += 'PdCDkm2mXErLs6jo8q46tD1eT3Fsg6g6XODrDYk2xrVpUoRHqeSZctsrJUjCZ0O7asTJZaViZIL'\n  b += 'SvfMYVaVkaZnN1iX+vcn3J3QNArVMTDA1qrs0z0G414ag91SbBOi0LwcU4j6RFZhwIJlBgZDjRH'\n  b += 'InIWEitAJoojQtRWYNkwLDNSlmMF6yOT73J0pRFprC/HasLEghGbCmHfUaaABlgVnQQ0kFGsjwI'\n  b += 'aQDtDdDoITi1Z6LLyy5XSFxPsAokzLPCHaNTMLQUK5yZ+ATUYC3dLkcIStxS7WJNbCuiHIxO5MW'\n  b += 'NCMRMYtMuVLvQaGNUgHxMsImcRPQa1YDqpJlA3E0Kstkxzjp2csPBEK+Y8g9UUhRWDDaS7YHYYi'\n  b += 'uHGvVYQf0TcJiV+BSFML6I7EEy0X46XFpi179WOLZZf0I5MUzummmvBy7HBX2GeqKkzaxmONaag'\n  b += 'scZkaNUIVn5I0V4mmP/hZWtS48VsVeqEAjMzBQM0KMDG7ntphCusZYVu2iyxLmWxaSkxoABpS3i'\n  b += 'UZMxMTEtCM1FEV+Rgk1Ezm0+Ap8nmwg5HiUdPc7NQQJtZqXDF8EI/Q2LTJ/Z7hX1f8pY9FO2xiQ'\n  b += 'kKzYzNuaQmK7ICJisQvXN7ZPZKGP8FOrBci3YXRP/bZGaW8hhTk4H6P2nQcfb/swZN+cQIzTaT7'\n  b += 'gvyIeSJkRCnEFtmyxGKRkEnSfQCeKwRq2FbexYa9PGJK9IZ/urydIZLUMBTvBClZJEVlFStT5Ah'\n  b += 'fWGbXn1RmzZ9mzYZBXkB0sWDcZMxEwimVmN+U1Xwc2kRVkwQTOC5aXLko90KeRhQEJ/rdlhdrYG'\n  b += 'aoSZvDUK5oTjZBQtkAQcqTTKXUjDkNk2u5qartWsof36PcE8vkh0oo+xAhlNhvhw2ZOGUqgLpxN'\n  b += 'zAVRLtVGygZYv9SIhNaxTQ7AtqdpWEZLIM+TNESxhrfeLgQMQTmgryXoj3WcIk5xMyM/CJCf0vo'\n  b += 'FBEz2SMyTqZ+Pbnn94uLNlEaiZAuR0w7gsDyR2yZNqHcY+VVMmew3FW0amO6DLu0SeJsF9ZSoX9'\n  b += 'yhZGhmGrdwdoJjdJdLPCDYEhaRgYXoK0BJJNT8RNySlOUw7KaFMOyopoCrpQ8XDVWo6h13ErpEM'\n  b += 'pkExK7LQM3iT5IYhjOiQUhpiQI6U+aKdr5oUKO2mHcjAYsxEGaeyMqAY5dKSH/fao2TDo3BUqBb'\n  b += 'DikDiSoM7YT0lYKQuZXKG0YEhQ4X37wTYtxz1U2ljgFzugWrcNfKHEL1bBF2XgCwV+MQ2+qAhf4'\n  b += 'CjG/Jv99AUJZXxbeEFqOQdfcOAFALlrckobIj48pjU5RKpxFCFbEf1l7B+Ah14IojAykvcoSZYE'\n  b += 'lBxjWhCFsMRSdKjezBDZDuXEllbx6adBA1ryq05TlXjYhhwI7YfWzPtQeD9+6hny+X/XsGUrM2D'\n  b += 'Dpq7MEDXsJoRQwxavyYANe0o/90O3DNiUVPeZ7Gh7OTx1IA96LSR2uyOTL2RSDw4sGEYeebOwQu'\n  b += 'aNvJXIoxOOyakHTSHuDvuICnb8b+U6iooNJ1pKjGCa0wDQQGO6Y/V5wvGE7mv+YbGrLbNTQqait'\n  b += 'x6BtymYdAtOFlWC4JtURtiuBSpLZ2llSz5dWTr7ycow+9RgbjIs3G82y4XbDYt5344yk29FbK2D'\n  b += 'vYJ98Z2Fbpeiqvz1s1Uu/doqhwOyST7adAaxkB1YmupxQ4tMqGqNyaZUd/UEbFRcGqpxMdi3Lws'\n  b += 'JJ2QzQZ2bY9eZarYhU9rdakIN6IMfMSWQkxOl2gLpZU+i6ngg/UnWU9GePwHDpGJfAdBZH/iRIV'\n  b += '/s8DKFblly5JcN8teZGJE3NoI7Te7YkXeDE2D9C1EvoJc1BB2Aey7tVxQ6/uqvZM+NMBe2gvXzh'\n  b += 'AjjECcRxd2UQV9xCsxbQExF5CsO2SRAFjEUUsuIrzhAImI+FYv5VDCdqHWg+AuCs44kQaZv8tHJ'\n  b += '3YTGtnIsKWdpmB7BPR+S+QtEm5qGFWorwwJ3BQrkiN1O2mDNCBk3Ti5wM9FeUFH5OVkFiYU148Z'\n  b += '/bwZy3im0YvdnWjHeLDhDEWZ+WGP3BWwbtnghLDIRo4neUQUHX4JLDAQRlXa8/RUiW4biNuLld2'\n  b += 'vEdDP1Py5NiZXtoPE7rHi3wOsXjqoC/Ppze00BbXPg8719gpMlfLjJpHnQLlaEcjcVkpi6qhS8P'\n  b += 'mTt+bSlR4ho7LZbD3ReYDehAOwErgXbwWf0j+BBF+WAQU5C+fx8eTSf6RZFbku8zMinbTvEhjZF'\n  b += 'xKcIAngmEYdolCPFxUw3fnsiOcrhYeDGH6FgvJQ2PYFIQkSc2mG9glBMnXIkuFauBaEPaXhLQhV'\n  b += 'aYarQBlGFREaA6L8xMaGpo9zZUdQmlVCj8VJi9J2JGLUjTjQxMUprzvmPNVPisw82DoCjChXP5N'\n  b += 'HYogxq9Zsf5QrTUY49IPAKyVEuizMd5X5mxbYjpSqNxScQlKJSR1O2qeABR8xahnd0tInkNDwf9'\n  b += 'xeSzdvWIAJ7Du8pajOiMAvup2iOnF4WzktGK7fY1d/6ptXHmTlEJKb+5m4Eod4bI3gNQRpQ0Npf'\n  b += 'jn0hylOhDQG5ljiGghF/j287vMIAcPRExPu2RcLwzUrBkWGieZgbeEkBF2t7OXGVjd0IgSMQLRA'\n  b += '5OtXQ0KC7LRdOLklIXEfMEx3JCsLXKYXJjzR/CLrbaIQt0LJ2g+fzuwmiGV/A9xFyGYTd42F1DT'\n  b += 'hOaLzDsC4G8RoE2dJo/Ufz1eN4NiYMGS86wtwwHq0cBsZBBzGMnwFnCdoSoRHnq0cb4TkUDU786'\n  b += 'tFxBlWC1CYFV4vDMsjVxJcGVDHkLbFeemusUgqeGoRidrocRo2Gzo6ezsZMCLp4XFFWDnm6w5Yp'\n  b += '2Ak82Ox5MqpjE1MYVQfuzOMhmk1kzck6GzOy7o7FV5J1ozFJozZxVfnpcnslNw0NlxUeNehvQg7'\n  b += 'e4x5Z4HFRwHGxAG+7oWXPwYzcPCUec6wmUwObiYJ99LdS0MSlvqHVhLssUV+HWjtir1dmCuzUJR'\n  b += 'ZRWmcLV1o/cYiqyZ8+VJiaPXLHhb7fpO64hhMcrRDGXgGHmlrZqKPx0kfhpcC/ZaGYqQcOv4xVs'\n  b += 'o2YkcWFFkyE79tqA2Jm0WMc6UJ8rwF4N49q3efMK0xrH7nxQt+nzida+VpWMRqiJnd4UJQeDy9H'\n  b += '9FExGtLayKTSXjbaHsoPWPhsMXqUPXiYMAqfwChYkW8q1Mkc7c6MgqSdL7wIoMSJo8DZZKWKLiC'\n  b += 'u+2ZuUxEXJ1khEbOrIs32FCvGq/gSz3LZCszBtMGnqxUOuQVFq/L2UC/XAwpMqaRU5GmVgW5moW'\n  b += 'AKLHJhPyXR2IxOjIJo98LuOYYSVSEsRgM4tYCaBUnpKqRE2FclfIA+nuQUshfwA7lCwZMXqlWdY'\n  b += 'MGtBq9nigtgNxXt/5OsDZ1H6EKH0AoO1ElkggrBVB0K1fpIKqZSGBtzKQxEfD/Lv1xWF4+nMU2g'\n  b += 'oZCvEd6Vy2KJqxE5djVSQ1GYs5ECImaR0xHTuSw3J7CxT5HBImMwQkex0Wpimy+nNI8aWdNDOif'\n  b += 'bAnYZytwRVVM07SOHtI8qVmJvQPW5AFkxBl5gh2DfvEVxnakOmCtWAcNWBKGCuhhIrhIzpil/RP'\n  b += '+NdwWYpKcKJFVGO0O6KaLFHgqwrSlihyrCYIfDABlor/REF3io0j5Nic3AFGTdKUncVCzkw1ETF'\n  b += 'MgNuoJcX5GQRS3nsmT0uiw6zJWIl4COSiXW+FbCmbYFPzJ4hCmF01sJT/QZaPaV+CBX8lnjD6GD'\n  b += 'XMlPYaEtpxI84cNbiYzG4IGuRPZqzWSuKH6sWsFNsmAQqhN1VU66OpPV2ytwX2GIwmTSVzkysu5'\n  b += 'M7QGQdS5xG0qoRMTBUFADfRTIFbsJIyvXCqC6QmsEg/tNKlRL64sQRCOftZV1lNjKqnHyqiIXBM'\n  b += 'RXMPanxM2Ri7TxEaVaxdyDnDvDTZLTW+dI1HNYlAPeYVVFElsGOYokuw7QJrA+9GRrr4DLAMdLg'\n  b += 'TZQnMhVHJX7IrsnFsuJQJvCoDIRQoBqplsVsAxURrFaGQnK+5FF2KEqObBgrea2s48yJNa2Yw9h'\n  b += 'J5u41wlsSRqNBpRFjrLSVBLGs6phRPqsqMFS18Us1fJGsmcZ3K7khBACRaIJsauBGWM4UCRDnRX'\n  b += 'LiAdihgaKlFHxskIkXo4yD4qJoyuYn9WwRcjehKrNocESqdiwJpEKSYkuFJIrLIdvsGF41meyph'\n  b += 'qhywWZVH1GJlWfkUnVZ2Qm9Rl6QmDdGeyHF5Hf5mGKMIpSQ5YjVluSSSI7yySRnQtRecACYIDn5'\n  b += 'FweKzC0rKiDVdVOHBoPCleI4ZGsjCW8PcIZscTCPaSXY26LJDeBvZHB8MyriKQF9CbkaZqMiHqj'\n  b += 'SNsyM8MilAPK+v4EdzCUg1+1F0s99lODffJisfCC2Bht2k9sjEZAlXuZWN+eWHAhxSIrZMaFDQR'\n  b += 'I0HBuoZzaciFNMXSlI3cronq/RYYDNSmIeJI11z+jY1b8qn/+bNVbv7xqE/3K4jjvLDa4gWcPG2'\n  b += '0vd2Ms1eimLNrwdqH8pl+IdSfd86t+ofaflqF8wi80jOLUZYAiP4ocmoK9dUogZAeKCSuspkIIO'\n  b += 'ez5ksXiYOJ7mStWWLgIIZ44ODM8ETIZE4p4jmOI2hKMiAPDdlHONWRSQ51KJNZDai2E8c6SFITX'\n  b += 'To4RIT3oFUAiCokij8BqwWr3iI+uwO2QGaF3DMw/R24t1NiA1ULNIl8ZFvBWmWaDjhcUJQUbCpq'\n  b += '5pixuhSmViqpwZiVcYabdJyvUm8RPhJVElPTlprjsVJCFjT/tFZwVdliBH5COFXqayeInBquHkW'\n  b += '9y7hcSTAGKZiTKGugMq4Y0vUU+dRGSNoWEJdzf9OOI+4uW6FP4/PSwELiVBBc2JVeYiGP1f604C'\n  b += 'wYJJRUvhm6jFi/I+OKKR5izamAZu1LSGRFy5tPEMNhX68TwMjGghgO83JJ6kRmOX0HXuLNYNU7A'\n  b += '/aWgTBqdGQqgjDoRl44jXDqGxAsQHYXUaFFOjRYxb+4DHiIRbw51Mhipy9ODiIaJtyK3FXglzBq'\n  b += 'NxVqACkbBjdA5e1yJkA/htoMkUA1HJdi0yDxpVHcZVhYYhPwIw6UEWZkoCisKmwW3OzpAa7BC2C'\n  b += 'zokgIaldRA3EyS1p66YzVLjlTekaAS4qMG2EO+I/aP74DEYCzvgG4tAo1FopC0QHYKlGSTQboae'\n  b += 'bVvgHGyI+YkORROkLVGXDRYSXtcZWtcZQtSZQvzKn1xld2hgR0jrrMjrrM9rrM1rrNF4XV6i3ST'\n  b += 'sGg0YWE6sVp9l5JOYs5UDaUqtw0I35CFlwzoBe70bOI6hS+B4mXAa4pajZk7RPaCgmXAsywPxc6'\n  b += 'F6+NHjNYyRa61UR5X6Ios7Xo6dPo1ANFf4MLDjUT3ReS5DIKtoCIUVIECSUheGXpNr4hhiMSkBj'\n  b += '32lDHBQ40uWDi0xoYcI2Q98D4dojWuJDZlglZbyHvHaHwFxVZc/LKEDCFVFtSVUTM4FbgrSbzuu'\n  b += 'DEVKTMI8Vpl8GZmixEAva3J8BVNxqcvTTfzY+aKEE3FUBq1Gl/XEKI5D5JybwA9MwgpAcqwGAM2'\n  b += 'j/W0V1Sxx16S1HJk+ZeqVqaOtrcg+g9IVlkFDIHFWp6NQ/ErvZBsDhMLMpGefDg1R0NHqIz4DcQ'\n  b += 'MhFJyGQuS8OcvpEPR8q7LgmdGJD0l/EEcn5KwvGC4V8JeAaTa1cuIMjtBM47+gsrSNyI59tTUjK'\n  b += 'IrE6qzp/wghrCCGMwKwtVvSkVqKItpUUPJpRNrwzDU1aHcCE9QgV7BJnc4GpOJ4cQSJpGCEC1Wl'\n  b += 'amxDlaPZpCSJaYbAN6VaMApsPNwdOmkoVvkZsHkoRQW+eU2cT/Ngq1jZylIyZ3LUArmhMWrCUV4'\n  b += 'L05Nh0w1acnthgZxIawdrDjHYtkkirsC/Sc8pP4T0M0DBnGZz5rp0vGuIgW2nTDvTBnuD3YCoTD'\n  b += 'VgrRtiFociyWRKEIKfEGDEpKKYLyVjayZphzILq0pQSGie9QmXhbL3bUokiTevifdnCTetCfdRB'\n  b += 'In76ER1OeCy4iJJF6iNB2Q5txku1AUMryA52WOUB7QQZygvArvnfCUFlzDCdFfBBeHpBp/qYgMb'\n  b += 'RErzIlGyx3GkbVAxARVE8TnPBLNzJZRDQ/RKpFxky0odywMm8Vhbik/piuOAIh8oCBP5/CohQoW'\n  b += 'iNZG7BQWSeM8oNM+qNpKQtkwNB4Ma/J7QGSrKA/kQkZInG5gv2tqEu2ZHlFIoGUpCLTgzerEOMK'\n  b += 'hgO8dCK1EJFzUB5sCBTAlRi6QB/bVtZ2eVHRtqBpHXO+3qS1h8v+ytk1f07e+5hdPKWvJjgR1pe'\n  b += 'GOOBLTle4DhnggF/hLdG2bl8sI5TJCuayk3EI9mxcoN6pQ3qCa7H06OjJhdGTucowCcshcyPDoY'\n  b += 'Ffp5HSnXvUUQqBcfu4f4ByCA6QRuyfATExI3pDQJ3aEWUNCnwg4gIZCkZF+KPin4GBDXE/6hHzl'\n  b += 'Z7LfroYcoYac71TD1M20BvIk1BAiubCl3MhgzGbmSydcxp++loG1gOgT9BH2D5gNWE+QUA++n52'\n  b += '/hesR9od5PXJJPXLTwuL3XcvAEjf6hPZEIZVIdqD5cMklwyUXhkvOXwWoDddAnmBPHpOeDDHfIG'\n  b += 'LOJtKskhmxyhciwBDuR8xvytp0V+OkkFkAuSGjhAMAs3IZ1QDzKSGhFhTFmgsFiZwn2YQ9BdqMN'\n  b += 'dFmUGgFWyoYYnuYorATSlMmosBYSIEh1QKVPyNIweAhhX3P0igeMHgHid0BCDakQwuhgtIwfA7R'\n  b += 'oLKsSQX6W43EkT8zmMLQnEgqySFi1ZxxhieRK5608xs1Of2fgk3+RkUnTzxUoGiqCien25OBMaq'\n  b += 'RmxuLVux5qCGbDCbmNEuUoG7IUHAld6Y5g+3k6JMVfcI/chjTGv1LDF8gyHAPoAAvTY7nQdKpb9'\n  b += 'SjIZL7tyuxXBWUdVB0SVMIShiuMhuFoOQIiwYpT6GgkfBswYax3CEFvWtrJBVkMt+6hh9xDSYJt'\n  b += 'xVmFHIvWCK/NrHUGMJSE1tPcULICsbM7zaWYg/CpS9jzUqH4vMvLdwkLBcVvgzxHyO+KzcOWYNy'\n  b += 'h1jKgBtsHsgT21bQmy+8eiJ/EiREYrEd7IOREmv1juGx0BBS20xlQbPXjo4gtuOowmXKxDIwzBK'\n  b += 'Qi+QHsv9S+N9fVvhgM4tvIpxLYs2EcyQ8JTHqVhLtESUyjWCodEpw4Y1rIcUPKPS4pcz0CUjnni'\n  b += 'whOXKz58SU4NLwrU0Ow7eZImvahgrWtGj79scWtjROm52ZaE8wzBXHcTMJ9gRvECyOsoK+g0lGU'\n  b += 'dxVnU2egbDMRCGowRRLQgKlL1AnFp1+KGgQDWLI8iNDS8lkLDrc4kPxVY3HlqP05sYra8ikvqtM'\n  b += '/tF9MANWMNsgFhVIpRaJXyivVS0jXcQxwmigeiiZl6nlRDaPjSZ9iVqJnFpLIo8+CMVDPzvEBKY'\n  b += 'yiiQs5y6RGAPIEdg8VogzkE5DAmYi7N3HZL9PfDNJAsV1wmq/oSZ3S18ytt2JMBuQH51IzO4iHb'\n  b += '/IxI5fZCLHL7B0WNiqAgEHE8Bahq45X5y7tGze6/OPldg157gj1w/PnnF5egnsmnPPjuW7Lp94e'\n  b += '6IH4h+63/746OXWKclH14yBaFvm/jzpw9Ptu/fNhTC4erhvXrno0pyjt9fXQHHL3bNS9h3+Z9re'\n  b += 'KRUQs8H9/osTd7csnj7dC0d9Ih6x98mFMIO9yUiqEVufRz6uhejNavBkEYe49/lsD4yRoR1ZXTT'\n  b += 'z7aJTk2HYA6QOoOC3XyEGYrRI18KKdBUVKft0kRYFi2xfWJHtRUXKP12klanIL19C54qzhPoxEq'\n  b += 'qiKlxQNtgeuWohmL8T4UZxjxQmtYrSKv7hvQyGr8Xvuw/au8iCQcKRIhQerHCkDOQFjMTTIHdno'\n  b += 'vgs+J6Uo31FPBtQC2oHYZO6ij0SocsDddxH3oVS6sFcuVuM6IiWDLhP9AKF8lVFIXV5pOWCIndb'\n  b += 'iQPsClHMRMbWOBQ4iw0SqxJNbpMGHHaFjgNLfs5/+V3FF/gvh77yfvwS8y505EHhKBjFz1htIR9'\n  b += '0yyjUDx0ASDQCliPvGs5npWdAkQRnjYUVavyUJTxhCa1FFHgIB43OPASScw2whAyKQ44jWNVfML'\n  b += 'ElervIfgksOuTnjvsZ285AGLOFC6dAOpHzCK1DQoFIidnKmJLJmkOFRAUIzRykPgQITaSk1kBEZ'\n  b += 'tIg7I6ocDXmlfQqZN39t0XnJgwGUcdIJRdkRO6BfMjbotl1j8rK/SQsCTuJXg8nUeuxKlSrBzvZ'\n  b += '2WJJLwS+5Ny3LdJDn20od0+JVqhdkWnsSBqIKFLkaC2ZWb7xlzIBurDiHirNeb6IVcHNklUmgmH'\n  b += 'Rl5uZ9IvI+hlhRTMrYXq5RhZjAIHi7YzlNHKRKT7Dr9qMWSsM2bZQ05Rs3N4CsiVnKp495AZKgT'\n  b += 'Q9xiANNxn3FHsEgE6EUAZM02H1BDn28Q0ttBhVt4IS/887UStCNbuf+TpXQ3vSwlb3siXkGgUlg'\n  b += 'NLFXVpY3HwCFe71ZITI2FjUbiaewziOELhUQ5LFWoEK5D7YTLhrW+zi5ObFySXF9caWo49YipZw'\n  b += 'BCjGpBqCwZkI3YB/MYixTzoFsxCYhUBa5ANxkQ/Mi3xgXuQD8yIfmBf5gC12pxXmnVZIOv2fVnh'\n  b += 'mkSvcswCHS6CbkZoyuRrICrkaULoZa+5QpGvuMUEaYgU6clqfzvAlRR4Oxm8AL0qLPBy8hilKFf'\n  b += 'BwMBDHxEtSIpV77J933R8gaW3+/B9CnFHutExQE6GoTggUI2i0OsLBQ+cN/GkPKGisv8UfYUhEH'\n  b += 'qTOAB47E38T5CSGlDCSRXa0Z/En7oUSk3Xozt9RzRba0GQoQK7Np23MEBp66GsaOkjMh6M+yFlS'\n  b += 'v8IeCwU8FO0FMxnqeITyLjGRUhIsiqtYDn1TEGmrukoOIex6Zw6xz2Po1ZQIueFKkyNlaWyuJic'\n  b += 'GbIhP2UWC6eHumioTTJuprYpQkExUkExcUOFtmvit2jTh27Vp+te0qfCikr9dUa+/pqhOyJQTem'\n  b += '/knilrkNjg4EaAosCpm0OchqlhBmufg6pS7WXQVEmWSCjjVky1Qgd8xtcMeGEFTfq6mSMa/oVdy'\n  b += 'BToQkaUsUBZhVzEWNNFrAMWOkPuP3FNAFWD4I8S0z4s5v4jLU6ivok90EDVKWg+IKfEACc2mP0N'\n  b += '+14g0+XEsNxHgQWkELGAbAS3bRg9FjZG2+RfNdjF4iYo8B2RMBXEnITOprOl4GBbiQf70yOtNjN'\n  b += 'cQNcxaKHB0ED0qq446EVCwhGIrrG/DDukLkM097kyMuwMDmsD4HuVHXZeaeYNDo0iHrNMOxywES'\n  b += 'NSk30TxMQu7MxK5OpHjMz4E5X4lEpqtgocDdh5U0FpNp8qKNNGUlBKSf6hjaSggkYp9oT2hJ6gp'\n  b += '2OLFBiJSUJ7YtUjRHtaqVpBDhwxmlO0505Y8GwM5KqBNcsiN6dylbnqA+FdQ5/FnqJjRybyAS5D'\n  b += 'fLRPKiTJ8GqgikmdzSeTUNf4Ao2sacRmlolXqJ1p8hVTOCc0596SO7WckdFLNaZSPqsmpUD6WPg'\n  b += 'a/bO8eA27mkrtP2+mZpg3jNj2I7/GL/KPQYwA3RejZ6TnLmvPz8SzgHYlPxcDSCsVfcEBXtF7NX'\n  b += 'bgxqo8qHG9WAeb2kNx77Fefg2FiSehIH7gwEqYraA4omORpSjjPlPInC8r5OEnC5kpFOJiLk9UU'\n  b += 'CtHqwJSVLxs2pBRBVBJ5tOzTGZXTSYc7qEeZpcuhI0eQsfaNfh7ywWCjLgD4BnBzYoC++3DV+Ox'\n  b += 'QtD5DmhHyognYRG1hTjtiMLiTUQZcoGGSjiGRNtWKnBifnUZx8VlQLkhS0xksIcFbKtlxvu3k/D'\n  b += '+OfH1X9URBaCREYHa1wkQ6NEjKCvQ+F5yYqfFqeU4vpcc26whFQOsrmMXSjyPIr5KGylLiDuipM'\n  b += '5IqWGGQrRQKmNLfML26YllQ8RpsMT+iFoR0eh1XKqcaIGDLe2FEyBtbsEBsIklwziAux12CMNjq'\n  b += 'yu4kdGlgFcRtzs2oVx/bL8Osjb7DHIS1rgIBS0E5ABTwMOcXCZncDORX8XZbGkTsJUyCKGLgz1y'\n  b += '0ZcMuaodlduAj/YslwQZqPeVX84Q/nxbJovbsk3clr3ithySq7yKKotPO4GUeNNPiZV4Ya5r4vI'\n  b += 'WicvbLftUeeuQnu7D9RmfKm+xuLx9MhWPxgoMUJaCBnzEALyN2iA+Jp/5ewbS2IZ8zARoy4OeMv'\n  b += 'GTqgXR9RbUI+SKMZinAhZ3FcF/HahSCZC5SGWjrXTFkxiOCu5npZx4RGKo6yE4NT/Da7Kw5IvOv'\n  b += 'qjw7IvMsrdmzMw8ya6X+vMVvpuZdtLMX4cy3CmXC92bQ8kNF21G8E8o4ZdQNE7cnckICcqEmg8d'\n  b += 'ZSau+xPMvnVBZuL2PwthGXYiDBVFDWJmK+KhwHh51AuLuYNPKTNF1QqehqOIvwFkPlpfTvQKiUM'\n  b += 'bFqE3bxTvAQWGxuoynLuqtUmngOK7BOyk3J3tRcILil8R9WisM9DapO5AM48tmHmsNDPWZmiJY7'\n  b += 'Vxce0ZqpqNLnOIih4VDe8rnezZKkSuAYfMqIYgxorSQwt5z6AK9CRMIJJmzWTDRUPViKIk4vhU0'\n  b += 'JE3ndqIR4HvFAgLFePYL0jcqVyxVXMmg63RWDPX4cjmwOQ6HLkMHyxVXLdBvaS8ktO3RWgF+yKl'\n  b += 'n24Kn1isRMyqGbFfWC4ZHG+NzXcrNs8QtHRYomQKU19U0i3aFEqjCqHaBakTIdHVyJoS0Kid0Sw'\n  b += 'xXxsTR9Uc3UWwxIQLFbwtCEhAeCdBB7BzWLv/yw0ZUV3W4TDO3UNZuJqBvMVlC2XoOIYP/JGJ1B'\n  b += 'cZw19dc4TFgTIB9ShldWD/WaHcKiWSx8+Adjm5ShO1+Zn0p8zTuzLCYuQmWBIPw6eRhzRuIoXPy'\n  b += 'PGFlptviWeJE6EPzoQ+GDJ0ZvMNYXBqsGZWjjz2vYzuVesWQSsVTo3ueMhkkXMR7BWL174lFqqm'\n  b += 'hWU4JslwHGVoyGCjomesqrkoKhTcU8TzstrkMwVNsDgFYgU3I54CbHirYRizI01PCFgRTiUCFOT'\n  b += 'IRAAjymYpzmYpzmYpzmYpyWYjzmYjzmYjzmYjycaJs3HibJw4GzeMnjrcbQsYPxPFgkf3hUw7cs'\n  b += 'HZCJHpdpmwRWAYehndPvJ1Mpz9Jsl+xwZnT7Mh2TfB7KtYcfZlrJA9hYXz+OkNc1m6YcAmJOQom'\n  b += 'uO3crj5EG8kTQ6ITgUCiWCDe4e+QlEjND0UZbtjnu2C3CzbXbNsNQvH2WKaV1WfGAnamG496YTo'\n  b += 'qIdqyYLkRCcYtEzlLI5N5sRAZQHwUMWNsVFTk07kdc0ulFsqU6FTpjCFA0xekJMJ6+dRUsDJ1OI'\n  b += 'voIzrYIE4kRQweE9ASoaBLH2QxJ5Bu8CZaBCJNQYZqtpJ2vUX3OqZaE/Xob4vjrCEu8L9ZsnNtC'\n  b += 'yJg5ti5AyQRhPqhgOxr8yCGbgxVoJ4SS33cGNKUDGAi0h6hN1i4OjBgrdbhAxXKylZ6mwKWSHSd'\n  b += 'iQGVER5FBlP4dASJPl5c+XIE6w4OTKBOs/S8ZZI/tGBiQwVbLD2yh/CCegKcasN8bAIcauNyUEe'\n  b += 'K4QhVahJRFsZWFzCtQ0hq53QbZ6KW2uBL8jQKYqM3tQam5xNmUXuwnwH6FeKBu+Cg8Rwd8EkSMv'\n  b += 'fDm4vfInCy0eNt8WNRywhW9p4xFPniN4lniewhAoUngUtu4tofKMiaDGR40TBLTMm6r9oplJMM1'\n  b += 'X3y08YKTVu8lsIQ4tfJWYSyJ8+mibuhLJgb7NvFd1bFxQPRkGwXlZdjPSy6vL3RDjv3cFjLOFZO'\n  b += 'uMzHidPJzgyXcYnJpuSP3xkntyVlJ4px8kz5fwqUfJ1T4XkLliJmaRPtyTFW/JHROmTsz5bfOIk'\n  b += 'U/Kst0JytYCSCK+VRDmWUQxaVALH8M8kUNISahSRABDtnylCQOONird7YMecCqeByZ1TTAPPt0C'\n  b += 'jTEVMUOD0OVl6kX1aJvtcn2xogi9v4M8WxenO33LmM5skEVkIKgT3RnSTwFFGrlORSzyw45WCDa'\n  b += 'UdPzMJeR+SiDHqFiDGRV68zUhwp6J2VbZ0V0FKokERe2qudE8JiQtZ8tulOwomdipqP12W7qdPF'\n  b += 'T1Xuptg4jpm+u5grJpju2J0ORFdtSjhQgVe2K7HSnAKgw5/Shrw0IedgZcZyDoMtafv4RtVLQli'\n  b += '27URev+BrAkG8iAISqssNj2HmeVGoo6raiA9I4kFBxI6nFiSAa/lQtwQR6n2GHaFZWbPxY23QPj'\n  b += '8yyKwoI66C6wdd4GpY9IDQU9fVvVEUPUnO7Q907xD0uF7eicDHrGS4RPUAVORB9tN7uwo+NDVnq'\n  b += 'mCjiVwhUEdznQjC8SNv5xoWiDUDTbmTsAO89Y4oTV/L9ks3QmEmVksjGHHmJnlM6YAWWzhGEayh'\n  b += 'mqZ1ZRdSE3Qg1Idc8ddDPFZh8O77lRg4ttBSLdMJk5Hw8DuYDFD0+Ez5T1khfJqMsTxMD86mqxt'\n  b += 'vKaJgxI4BrVB/lSkDMC5M1TaKjNHQlUS0eCbJ+PzEwuiK5ASmc6q8ZCo+XuiSXq47BAUaMKjAwd'\n  b += '2w4lc+cQkEV5YLiSqjSacIRMOblOiZLtMyeohuQcYepwQPvFHRElTVpgnTZlEk8In/p446YZxrL'\n  b += 'jyhwQtPgQYfYKo8qVHWHFHhN6uEiVattw8kdDbI6JE6aZEqMIUBWmZgr8nSpa1vIgKE0WYPXlNE'\n  b += 'RWuEiVaZ0pUDawiM2MRsSUFbA6LA0PyEM08XS2Uga/Q2ARKVY+gPY560OCwTG7xfLDLK/NTFwi8'\n  b += 'NFVVZLxE2KjcYVyWDCuDg+8wekZdOdRZk7m3m2gvH6WWJ4HHMX5499ub9Ttbuqzg4WBv1uu50kX'\n  b += 'lRAdGtKS2S5cUTORYyIK6LF1QQkLJcsqWLiehWtFimitdTELzhR5uly6lgj28LF1IQlWiZZQtXU'\n  b += 'YFq5orXUQFq9ouXUJOhLAVqTPIwqh4Dk7qVKXq0wmmfS7BdCXBr2m7yVGGHO/wmbtF/E5w8g8Ba'\n  b += '5V/mC8Swz/FgAe0YQCPSLDKs6ofiK/ZIs75GjhwNVIPWJwMcJuC64p8SS+DgJLrqipP3FfLhLjm'\n  b += 'FyxUquoMDplDOLiYiS1E0GFUZXEuon+DslQ158OaqQyqqjE0RDwabnOd5iKyEsZtGdwhwkmBB1Q'\n  b += 'lxiR2JmwxzB4oUI25LKQS3df2LCFTsahDparAmBgTLIpHAdkqoJcAS1SCIxEXBv6t3qkKSVngxK'\n  b += 'mKeR78rrFgWFWSGI7042H4sZTkY6WiDigh27uFcKok2eBxyT+0wSEYSJBq2GekO2BDXBKrSbqUk'\n  b += 'oWmQ6/F6U5UKjQdem1WXuHpUkTpKorsT8SukyqShSV9X4Zcyk7L6DSXQ7PlhEUHbpDrG00GC3sw'\n  b += 'wuJEhaPMoQzIz6FkMBQPlBKFRatsyFwCtDyEzBrirylE3IZyJIoV2ncsJhjLkXyhosaVF1eLRfK'\n  b += 'cDypU/BaKsNdbkrrqyqyaY0YtWcakrvZhonJJUujTysokrFSVRmNktEckZ5gBJXNHtwKGz1mVzp'\n  b += 'DW29LLIRkHGzoO+KUMWWWoSjCEa0ef/lHiwRKPfinx7TpUJb6Nh9KpEXWxFB4jOErcYiVMIBbtX'\n  b += 'rcQWkGy+KAykE21UCWHcLHohfj+Lm6CgjSBT5dmV8vIuMFBE1WJp6dcIdJQHKZVwcuiwZaGWcTt'\n  b += '7ko+A+o9mlfECZA6mldiyCSFwoE/CccRrTV6UyELDwBzlB4UUCOAZLqKM5ECE2QolzWebDUTrVK'\n  b += 'RRsqjhfwIvQtjAlsbapoz7hq4LEJctQ9cy/ky/PlHhD4hKSrL29swKgw2lQnSk1KilbITg3Xlwl'\n  b += 'drqhPVArUBVzRfBpOx/Il5gCiwhRNt+pahEAFbLUXAbRkqDaLpMaEqS8grBucFriCVmyQXJT0lL'\n  b += 'jGR5lPww6OFR5Y+2pg9xqkq46HKwYowYPP8A15UKcOAQ92aKpx2FRX/kVVZ4R3hSx9s6UNH+uAB'\n  b += '28tyVxT497KCfmhPt9NvLOoSwD3kNwz9gvML/w4PhXNLAiGpLGDvA/EgjGcxaMA/vfDb67g87hj'\n  b += '5PUdStcHgPAv8+1yJf8dZqJTw5gj+5cayoHvuRyad2Xny6MGXP0BA8CIMAcFBMFhJ7tnvlz74d+'\n  b += 'WG93lwV7ifffPv+A13Di3aNQZCf8/Le3R18/lj68aooNoK/Ku6PkvmClZrQjqjypVrYmK0BqMuU'\n  b += 'q8O1ujCtUFuam1QiNZ5qFYXMtSobtNGHaMND6agk7qhiyE2xhjo0rRxYEDzANeWAa6ugQFaTYvm'\n  b += 'TZsEBwc0b6FtrgVfmjZqGBjQQhPcJMAlXBdg0BjiXTTh4ZGBLjGGQJfAyPBwbSCsMsYlwGjQal3'\n  b += '0kUFaZ0MM48pwzEAwy3EyhikBfgu2TRc0XN1a3YH35jt4+van6UcUmR7U5xyu1TvWhT0JijFigO'\n  b += 'ZbbcEwSvBLYUcFw1QQwVoCf9kYoV6YBkpUznw5bl8gGARtkHqIVxQszM0tVj/MoIlyrDtEDYrWq'\n  b += 'If0jNRrh6jjNOGxWpq0tzYmNtwoTapXD/EwGEhShmEZ018wFAyoDv2BMOgC6qOC/LUg7+EfK0BQ'\n  b += 'J8JVoIZvYLiEvIF5+bJV+32UV5eXsLrasnGXn5bU9Vn7LAbOG5hJOEmQ6mKsQfrzoCoXxgRflMC'\n  b += 'eDO41hb0ksC/4W0oE95d8Hyz5Hij5PlTyPULy3SD5PkzyfZTke5Lk+2TJ9xmS73Ml3xdKvi+VfF'\n  b += '8p+b5O8j1V8n2r5PtOyfd9ku+HJd9/l8AXJfA1CZwpgf+RwP9K4NcSOEcCy1lzuIQELsWat99W8'\n  b += 'r2KBK4lgR0BzIvg+gC2E8GdJem7StL7AriSCPYHsLMI1rJwB5vgWMn3nwDcSAQnSOqfLKl/mqT+'\n  b += 'uQBuL4JTAFxdBC+StG8lgJuJ4DUAriyCt0jK2wdgdxF8XPL9tOT7OUl9VyXwDUn6vyT9fSQp/xm'\n  b += 'Au4rgLABXE8FvJXA1gD86iWC1zLy/gPpmSornG8CtRbAzgFuJ4MYy8/oB1WjW3jYy8/61B3ATEd'\n  b += 'xBZj6+nSWwJ4A7iuDuEvzXSwJrJO0PBHBLMf6SmY9vlKQ9Rkl7x8jM19c4yfhNkpnPxxSZ+XqdJ'\n  b += 'kk/S1LfWgD7iNeXpH27JOXvBXADEXyAtFejNsZGhWvVkcHqGN0IrTrIigPnIsC/Vhw6hTTqjrqY'\n  b += 'qHBNvFoXAdJFaPVGDTpsDVpjrEEPTkFw3mkNhkiDOlavHR4FaAdtUHj8fydEYowGnT4EnWl7QVu'\n  b += '6gbY8sMI4yUZ0gpYUnZg6PThydUH44HVTN1DT9qgBrijBMaVBmnbgVyVKC0iOEONQNTNI8t1laG'\n  b += 'SE1kUzItagjQX0hYtzoMYQEuli0IboQMviURNDdMahsQHOgZERTg21gYHNGrVsGRTQUhvYolFjl'\n  b += 'yiNDrbfydW5YTNnV5Q8IDymYSP/xi0augQbUL9GgboCCEWA1lRkeLw+MkKnCVcHaUMA7aU2Rkaq'\n  b += 'hwKa5b+2BlRtNAY6NXIGzUGJYVWoDdbWHNMP1H0GrAdIFVH4LIDriOBgyfcQ8p3Ow6foE7BCNAY'\n  b += 'DWEJgkZHxbqLTG7UGPegpWjuAZoMwmKlYvUGrCRyqCQBrMhDQbG5g7m6COuuBOtx9wZj00ESph2'\n  b += 'pi1EG64GCQQ28EYxVlHAq6wnDgpglx1nehgjVxuhCNEVHCLUA9/oTmKYsoNfynOGRhaQkVyImow'\n  b += 'DJfOK55MIQWpCq7yJkPOxP7vfba9/S519SFkcqjm/pvcbDrGRsRoDWoI2ONMbogtMWjDLoIrTpY'\n  b += 'pw0Pcu6D1r/ojVqL97fzYBsO4VLaN9imct9gTxRYhYRonQnq68vAECAYZ3bUBhriERXuM1Rj0Ar'\n  b += 'fx0C8D/5SOIHA7t19/H08O/uD34aNwP7q3Mi/X4+Obj5deKdGTZv5+/j09fPv7eXf06+7v5B3Hm'\n  b += 'te1gIW49dATZQmUGcEazVOawgOjxz23xdTnBb8AkTkH2yIjPDXgXXur9fGALQE+55UkkO0dFPJW'\n  b += 'vqG1WqHG7V6WFkOqMuX1AXx5ufWTyd0nwJISB0INqVRqzZo9EGREeoh3gB7DHFTJ5SCzKDvsC4I'\n  b += 'dlpXCuOaH0Aja4DfItvjrovTGFCj4CInuNNNzZXmEE3YFvzCmxctr4nMdG58an/RM8Jsd4CDL8q'\n  b += 'gjaHnYHnRvoW30YoMpmOKcZv8HugqQhPlAppoQEj+H9D/IaBNHoRGDgLNN4BTBpz3QeqAeKMWYN'\n  b += 'NIfR0jQMIQ5YLmhRgiY6NojxGdQPERxAtVRHBVSPsgCgJMdWygUd1BFzUU3MfBolMPA3OubkyLi'\n  b += 'WHWcRw6M6pJ8ArJCScQ52koVM085DAuoqVHRkTojGgezFPalMFr8QdR2yC93gGMbWQEg77ReYJr'\n  b += 'yUcbHQu6q+0BvnfRxGm7o3PJBwxJdx2ooaNpiHh9fM9Io09sVFQk6FaQJ14UvpoQDzha4Ixn7EV'\n  b += 'l14S0J07SASAvmoa8co+MDBeyMQ6ifLVM+fyMwS2ERLVFaeDYeUYy0ORZeFfXlA8TcG7oJ0YdAT'\n  b += 'oGVq5RrYPrLRZ9c3SFm6euY1kOrf+m4Be2vS/4pXtBIXAf6Djyc1enM6pntt8L+88tizGwTvZtT'\n  b += 'hmIFPwBBQH+B9RXI+dGOAc4BBHBw+SA+n6EFDUZ0eLs1G/StEiDFjSsKRmFALCJw2DLFpTjmEGg'\n  b += 'PTvA3/KF89f0QVrIYUMMLQMiMmKcNTH+Bm2wY13MPIMnGSlnDVNsvtZ3IHrxJA+z5RAHSUMoXUq'\n  b += 'xd0So2jcysgsgcjsCNKILBHjdAyIusOc89JGxIUMRDRDjO1RLEbsuRqCL1cHg3mEcCklFbXCwLl'\n  b += 'AH8Qxc4wFaPFoIweHVDzFf2fIcOvV9dCF6Dbi/AKyFSgf5AT5HOyWItiIIl8AMAXnqgzygQQBBw'\n  b += 'haBHWaenZkL0lQx7cTvuoQPlv/q9Yv6YUMwR4PvfsuJRhtuaAV8yznA4rn/Esr2u260inh/XCYn'\n  b += 'BIX/kMDpjOmGs3EDau3u/HyfLXn5G39weJP2ZtlF15CDZZNeJXYbFvTnpm4dfltbpduiB2NaPi7'\n  b += 'DVv7avUvrpns3IjIoNjw2Bi75EETywNUObhKxzZq4ufXg+31znAyuZZH++HrqaIf545Aqdfgf4O'\n  b += 'W5dv9/4mWXSt8GL9Ny6Nw6iagg52LeHl1E+8j1G1HgoO+NnZuIT2ZQdmWO8YN7QYnlFA3JvoDth'\n  b += 'tyqxuDvEAI3ITcLSplA7mCQLkYDbjqGgmPmWA/g2/C6zqg/zroYfz2YTse6X0sLxxiDMNcoXh/o'\n  b += 'EhEVg//xBzReLLyyv6+MaYzB5HZdWHv0gGQVtScGjCiaN5rXn+RtLupjCwZzCb9JsyMBOQramla'\n  b += 'FY7pDuRDhYBdjH3hH6mIi9R6Qo+I7FOCLIG9Ab7q5gWMwMBZcl2L1iK0CjkdwfQlSh0YGqOF+V+'\n  b += 'NR+q9ryIhqjAI1OjV0bmFO4xmrYlyylUgV3BgTFQu5wq1Fe6EN+uUn7QFU57qygRq9PhJeugJjD'\n  b += 'TG6OC24ImgCo2N14OyNAH0aDjdTNXIN/c+TEOMyTBMT4eLs7BKrj6EEvwuqB/SiSTV8jarIfF+B'\n  b += 'YVvRYLT7jpvb5ge8ue3IlWzYUA340054P4ewCSh8lUwchW9L4LskvXt3H19/727+nj7+nj07efb'\n  b += '09O2PXvXx6O3Zqb9/J96zO4L5zp17+/v29/bw7+Hp04P37dAF5/Ty7Onr39PLF+T279zby89b8t'\n  b += 'qrp38Hv959PNBrd76jv0fPDl4dPXt2Ri98/Dp08PDxKbjDo4wGdY02atdvh2LA6Gs1EWgwB1bnE'\n  b += 'Dt+AVkb8A99N4LF40LhkRI4mcAFmwzWvLotaLIp7VRJ3lUsRkpfyk6l+XYQ8VTBOvWoRppuWpEI'\n  b += 'M0YLaOYgE+Y2tWlckXnqoRMSoxuQOyY2Qmvw1wQF6WAqcFSCo0ITHuMcojU61sUdp2W+JocvhX8'\n  b += 'h40zhTaROCqtZgY2aQN8dZc3zHGOLUkz4DksF3hOC8L6bUIP0gdRPYT/CmqDwAXIAMKJ3Z75grd'\n  b += 'C0F4pMWy8yPAhqRriqR40SAKeGonr+IuNHYX+ytyk8hMA6PZxHgIcgR6ZNW7U2IsoYL0rnymJEX'\n  b += '9RaKDjjprydWDznX7q2ab4+LCZMKPyRKWoc8Fqn6axIfQGaILWesM6D1aACvV4bHqMO1wYb1aNq'\n  b += 'cojlRfNEsZhApnA8GbfiIPz2InzPkzVLy3sqWSPPJPC/BP7SMfqG9FUkXM79HDjGG7IB5XjtUri'\n  b += 'cHF8wKRwJOldfBIdK4CAFTl+cyyzN6ymnLD19EKJ9ROUOJN/+O4/VoBnmH6cNBH32NegwFzpmKL'\n  b += 'j8hsEnjTocnMlgwVDxgXctTMSdIPPzDTEJeMJ45Dyooxf43c9C1jOffhoQTPflGqMRbkLEJdeEB'\n  b += '8aGQ0Y5ZJEYtBEaeFMxYM6pRh2kiwPkIlrkI7SGSFGJEPNUEcEHWUz1fOkqo/l6kt1PYahUUq/Q'\n  b += 'nRgSqzEEOQfEAoygG6GFuAAjJ8cgQFOG6/Qiklxdu7a6xrDIMK1/bJS/JhiKU4ZpwAmiD6lL63E'\n  b += 'go07hcaReCkNlDgcRPE/SznFEeYfCEwiDlsLRku+xjPmu/9YUobsIQ3TA5HHaeTDb50vQFqyV9H'\n  b += 'jdZ0Yan8FBWvQLTl7RMS6Usb7I8xGXAUjzQC2AxZlp3g3/Z3gJNCRmaKQRbJF3jljcVYnFohl46'\n  b += 'QGrBM8FSQbZKcY6MWpNOLy8xMOLkREmoHn7MkUpGTriAyxIY9Tg48tsEGn+/uTsoXAog9UuKBxM'\n  b += 'LpGxUSEGDWqdJgTsUuH776R+Ch+QwJsIzUDhHMKwofA7wiAoDl6VifK3LHINFHFh/oaITnyBz6i'\n  b += 'HL+EbizzLQXsKcBMYhuYbx3yZyK+CjU/uzInbBr3Oj1sYklNxeMbyVrbH53mV7/zP+VdnQjdntc'\n  b += '++UeO0/uyz2I+qpfwwtmy0/T82V+Zs2jM91y6+cqD91LO1LPuW8+9/a26v9t51+23qld6fSW03t'\n  b += 'Wqp0BVW3jlt96ly8+HoloiTMTZHVEz2kz39jvv0Teni79G3d5RPv7PDIp72WbGgsuWgOfcSPhwe'\n  b += '/KY8Zz1XtmLGy9eV52+fWPvj620J9+u13TFn3fJHm1tXXrJwbkpYs0C7wJ0hkX/u8+4we9ZYpcW'\n  b += 'bmktj09evPjzkzL4lR5dtsBg+4Y7d6C2tQrbxSad/q1ylc1L5l6We/Xbo1bMhMSXqzS7TtbvnkH'\n  b += 'fWMd0HLG42uPqHUf0HBFpvCE968I+/Z0n9ox3P966o9Twrdv0ly/vXE0ZPzx3P/JgWdHt2TnrqT'\n  b += 'Y1tfes6G+yWPbnXKnRT6gS3lW1O9hzkGf/sVOtV3v0q/vOyyl+Byw/VL3Z/cUh01ZDiMlyLX8+y'\n  b += '26CeLZU6VWxStUn129kvFBdKrHkQZ33lt3ndwzvfn5Y+fsmc9clPQpzmVdqR1DZ+0Ya7p2bfn5F'\n  b += 'SJsVlsvusjs2jz31M37H6xo5HAw/1afmizIv+q8a1m31lcNWNKRssr7IDx5c9kNTQ4fBPNn7GHw'\n  b += '8Y8rb8lbDW4ubPxhc/Z2Tofr43ofOB58eWZJQ+vdzGIbLBI6cNicauN9enDbqe/D6ud6+2KRHHG'\n  b += 'q47UUeednxM/4OvVJnHOs9ae6VX4CmLkLp1bZOsd9ZpUaOKc05Egx7lSrbw8Y2x1u61Do1zPnlo'\n  b += 'bFIDw+zlDw+u6BZceV3UlG6HVvYKP17p4ewLDhYL/0hqWio7alkoVyFjVSWr8OY/dB/Wpc6OfWl'\n  b += 'NttlUbdl1w9WeXqcWD3wV6Tz033EzjJGBq4fbDj+RaCU7PvVD/oGZT8K9V71d+f7Ay+HRx17lQ/'\n  b += 'lBnQ3WTJOcRsxpnzEJ1mEjHs3o/KfDngcHRl/a4rJx+MFWMSenj/5rfJteHn+UiM6KnnDvpPzMx'\n  b += 'dVnqney3/jjvCpJl351j+q39Pc97IFSv02/6H1+vP6n93J+YqCvVp1l12vD60WlNmhdDldI/MGp'\n  b += 'e6cJdxru3znr/qBdo3q+3DGr6t91mtrlhF3XN3dMqmZ5/7Cfb/kBjLX2hd/Cya0fnZt9YZs2hT/'\n  b += 'yqm3pZ5c2ux+Z3eaV8/zWK+Z6/XmjxT378ieH+9bet0lxMx9KaMOTqzEzXacxUaUPO/Z7VtEhZF'\n  b += 'j7ijc7PKq5aUmN8uUWV2nn5/3wN+sDLtFTLav717h0KnpHh0NOUVWfD9l+WsUt8PJKdjLWb7GyR'\n  b += 'aO2DW4kzzjbbnm70vfyV8xO+XVFDJO53D4vWrfwY6STceC2tusXHTm68K9yQzpPjb5fY8XhOm0n'\n  b += 'Jl/tPeDeDsOpsBaTeU37cRZVyzG/vvrNrsfUO3lzFtT4UGlzpTGdXiQ5tlNsy3/Z5PHNmr5Mev7'\n  b += 'FfgMvZB9QW6sPlCsxZf+NQS2SJk3aEHzteOt78a3dap7JnvP3gvKpNYN7/PC8+YSR40pe/Ndpa5'\n  b += 'nUxIkLj44sYdktWNXFrZ/76mND79dO10XnrNlxtWfD5ysG/pMl65U+y3dgPFPvp6iF+tsOfkP+/'\n  b += 'KF8oiVf522UY42enjVcV+13uf/zxjbd786N7/u69pD9z+s9zFuimNTb23H4revaJ5XZxw0vzynl'\n  b += '0WPtH92G/TszactBfnLV6yOCsmtt85lUufSghHtVajh052aMeFzpUstZFd7U95meWupliZ21m2X'\n  b += 'fmXMrYv+fp5cvatBl9f7s8XaBHo1sb6SPfnt6rrXzL136lOri5JhWd1Kz7b8fzLbLdWrvczLraM'\n  b += '1HXmf76fI7jAi8vdqpTcmWDUr/+f7vlEG3zy/YalitS7man/ewlsvx/GFl16yzKO2ZlR0/Ntc1Y'\n  b += 'd3cd0lc0JQtvq7Xy2pLJiu1Y1bfecHcG/LSuGyv4/kab+IDdlqp0q4M3+NheBAbZFd90Z4+idtb'\n  b += 'bXvw5mDy8N8nlF65O6n8nX/z/J7fXLxGuWn17UW3Fj4oYRn9+mDfw/dLbuUqh23eXtJ62plt20L'\n  b += '29rnjtXVJz759Lk+O53O9/Wd1UMQGTvnrbbepJY7XvfbTaE3ag9gYH/fLzfV5S7uMKHf9r1+rPR'\n  b += 'kV1y71wvN75/4uPSb4aq+uVcdVO9jttpdyZNw0rXe9G4Yr2/qu+DDr4OTOG4Oaj/9D9+hJCa6eb'\n  b += 'RTfyeWA640NrNeWH6PbRyaFbrbzeJ+WO2xZwO5l5a4/L21cv6bj0T/aTu3TI6NtuSkzRx5ut73C'\n  b += 'zP51T7qpFvuXSZ0TvkHLXsuwWN1qUZ2aoRW1c61PnZudn+XXfEvXuq3mbI7yrno9ooyH+mn32a4'\n  b += 'ez86+GPvsj/GNrXKe/tJxzaGklKzGwy6d9q3f1T2jxcTcX65XzP2wrVGdtR+XlR3a7X4zr2b5d2'\n  b += 'oqg1tn1C3NZw0fV+a0592PikYuM+wnXvbu9deixFqXTt4+VH7xH/XXd7g3kt/XcXiDqjYdLbMTe'\n  b += '8nKjlT+HrpZO6ZfdXX7Xo2ed7T1vB5V9p957z+6h3YwDLG4fnprmF1pr5lWxvLpb54Ftt5dTl3J'\n  b += '9oz9hFkft9861dY9qHvX2h/f1qlb84nqUBu3d296vHdNfpXwp8PlZ5uf7J17xan9aYsZ7bb2KhN'\n  b += 'X/fK2Sn07aB3WN9rd4Fjyw2bZQfeO9X27fH3U7bHd+w+ctrKxziJ4e3PDmEibtyfihhutWuuyEs'\n  b += '69VyWdtHfI8N59PXrm9Jq/jqz6R8C+STVHXbl+9U7YPvvlthsm6mZVzK1QbnGH/LtV1t6OjnVz0'\n  b += 'C4ce+Z1QN03b49XbTb31aINxxpl1zn0t92/h/Y22dvw6J4GnI3lwU0jT9rGLUyfPWu3IfCd5nC7'\n  b += 'prY586YOdPGcWC/cov6pMhN1BwfOqFjhYWZ21p8315QNMYy/82pMn/oha/vt7ru0R7WYmP2KxzN'\n  b += 'kZ29fCldZr2x4ek5t3bg1diN/4uT1Lne0dC3ZztN9tb/foYXD3xm7AOycN3nIghlThmT9eMKzvr'\n  b += 'JRi0zbVVd+mremdmCUnwd/6FrqNGu3N4PqzXa/Vu6nH2rr7zYe3XSaVZ/EUSuU57K89/xTbT/D/'\n  b += 'FV9qovP8fPjlXUPTnmleltu7/5fD87L7TvIsqLv4DX9VzpGqJq92X52fEufiNHv3/zy969v61fy'\n  b += '9pjRCazeKUvunflN1a7X5PzjAar+uWdPGe5279aQWbdr7tlGz8P820TPW5Z4O2JWjZS07mcfB01'\n  b += 'LrqJtXWOC/Na+KmUaWjdcPW6S7fXX6V2XP7pY0/fk4tT3a++1dZyXrt9gOauqs6z6wHNzKiY/G3'\n  b += 'A7l/W+tvbPNMNqbSW3zuPHOg26s/+nib//8yTnUNqkRXHhl7YqPy7VP6wyv+ye6n/dzqhb5Ymlw'\n  b += '5kjbw3zMufM8o6Pmzm7Z7MdvX4dOrqTLql0k9ct5677aVVQj3vjEmZ9yI4foHuwsv4Va1//kj0T'\n  b += '69rOarw1rNfKXu3OB+t92vcZ3a/NuCZr16+8OOFDc79nL1KvlFo/J2ZwaKPFi20rzy7bOu1A/U4'\n  b += 'Vu9ax/vB60c1nT5o93D/db1GnzV6VX7xbGhRws3V97d/M2N+vzzoUsD/ArnaDF5NO7Tqp9Nq0e3'\n  b += '3pCnPZBh/ihw5oExS65O9OybcGBtsefNPuV5+S1fbeD5i09fDfx8tWbDtZNfPg4B1H2NmVnw67m'\n  b += 'Zfdo/Jj7oZl9R79Kx/58cLHkrN8ujZ+2Xlei1XR/Sqk/MLL1DkelsyvFba/Pr/mhyVt+0zvbeEW'\n  b += 'V7Ft3Kjne5eWz5ruwZbbO7+6e16n8Rcd7i4eN9KpZPlOf7TYEVZijtu4avMq1a4XucqrV//H24J'\n  b += 'nuJR4q2j+IPD1h2svu4eX62bwPHj+3Ln+OkUnn/b6btOMj2dckTVYbPloVv+fI+ZqPS34f//ee/'\n  b += 'FFw5BlVdqtDLmz4J2lf6kalUrUrcgt8E75KWNNvYn1+gSVreBz+l+Z9+v8EXd/tWwx9MD94TNjf'\n  b += 'dednnyjvNPuI7vLVdtxYWIEV7X+/c5LmoY/GdIjkJvs/9xu9MAlycuiP9yqWS7n6M3otgbdoJI7'\n  b += 'mb7ZvV/Mirv3Q8oU64+7m/p5tQ7VlLl2Y16M3D/yunbQ3aPd/V/2q31sZd5t77Zxln1qrr7ZOLR'\n  b += 'tXtjIt89TSy9WRmVH/PaovnvIpZX9M1Y4NK9nc2HEgR/L9Ei+76ztGvhbduWru7ZOyVPwi/P6rF'\n  b += 'h7iJ2wMrbV83cjX7azPBlnbDZlkn9Pl6lhzl0cLKzK5P2xN/PE5I4N48ZkpPXff7DNlCuj5GWO/'\n  b += 'RuywnnW8YbMzjP+VSMPVtuSO2HPXa+Sl1ateHRgRu/NrRelrg/9+cHpLR/nOgXundNB8fD4jn+f'\n  b += 'v9Ef89truDXpkENKtZRKLy6u2hJ9ulKJjxsyvDjHNe7X2NuepS4bGg0r4RZeIvt5qv+TMvsWZTn'\n  b += '2TbZefbNR9xhdecPK6h+3WWgfRwfsPDLdcHah39rgy89+6+4fdHmszcB7UwaWerGQd41/uGXeva'\n  b += 'Dr+fca/5zXtunvxxyCNjh8XLpUa6xpPbTxtCwLY/e2suGNS66+ZHw6e/P20QuabPplw3b+8MS4m'\n  b += 'UsnyR8MfLJ/0NrT1w7K53wIW9+0bvc+O3LvRDc+/KqU86Y3nperPxrtOqLp7kH7r9xPKBdWafVU'\n  b += 't2E1z/esaFieez51c9za0oN3h+ePemqz6op9yUpJuUmzM+u8HTmpous6vyU3N88drtx/1TP23dW'\n  b += 'ZbTSVEitae4KqBj/KWXqk3cvN+SGKKv4tRoUujcuQV01/XHLOvvgdd5/VHHBc4+thU3PQ0nFq/R'\n  b += 'mfesN+KD19XP7Isp5rn4eWsc7oWOcgV5XzbRjqppz2Yq/sTe2spa+eLvPpdXO+5xIm55LV/islZ'\n  b += 'Mzu1n/adL7nv9Tu4uC+y8N994/2q2JVLWXAT/dqnLr8W63ftvY9rU6yV+xZnvZqDHdo/KSYlD/G'\n  b += 'Lok/cuNWuaae41s6/9KwRI1BafsbzFsqnxP0dsX6YXv8QoKsjt2+q8h1Ng7/yXn8vI+lBv96uue'\n  b += 'h96Uyl3e/Frapy7N3qWvlP4z3b3ir7mBNvaY+izQVf5g9uGd6E8fOBm3Ty2Vr9fgxdtaQJmusuz'\n  b += 'Tq4OTVx6O3j+cAD6eOPr5ODJ/5Dt6QikuIFzc9w2e9B/W4HvaIBQR8yUlXVic18rF/Va/B6J9dg'\n  b += '62SvR245NFTq5RcMXTmjTteWfds3ZKCyreLuG/L8Oc/wHzuvSEP2O1+kuzdX6VtrNj9b9rfvbE0'\n  b += '+R/WomHtXs17qTZ2PF6xb8ofshDfx/GPtqvLgpvfR5BvpkLX72lOfv6Ry/G5Ay/++2pltZD8yHJ'\n  b += 'HG68bs9/G90xj29r9GwxNrO9f2qNL49nzDjI/ZloO8nsPropPJn7In3H9fn6k9qLbJY85xvOls+'\n  b += 'O0FoEPel27lPCIb1O57l8lFXk/dQ8ub7V5Ayg+/3WH3PzOz17m72ykW/JohafbQ8sRexuNb/hq3'\n  b += 'VNdevayH6bZPreQ5betvc1a8STlteOgGay2wjX7rIoK2YPjuvGO5WIa/RFZvvP26c+cAqovO2T4'\n  b += 't169+/fyxyZ+LJti9Ytm1w9JT4y1FH1ml41/tOLG9OX/lFg/717I210eY1utcLodcbBUQ8fmP56'\n  b += 'rkJHdLKDjgTKZVklPeu0avcE4J2XIq1zfqs7HKvxzzGXMibV5S6t/3OzADprQ8WHggXdbB7waPW'\n  b += 'DYmO1W1m+njt9fv9y9Sg2Gjd+k+5P1cD5kfPRHm3X509KG/XN4+r6VP55zVhxqmn7Q22rMo7otL'\n  b += 'Ys7ERfTroIBnbT+1Yedq27907nV2bzbtSeHeOePqLRuUYhj9639zlv1PfDD5JnBDvXHsHvSS29d'\n  b += '8g6srMf2q6xbRN9udEKvX7OjTfu5VfR7Yuau9Wl9MLaJdQNet/pSmwteN42DbwwqW9z0YCHmQ16'\n  b += 'nrLh3/AuLBq3+sZ9L2/FjMya0qTHXvVHzgCknOjq2sGvLVcqtlzp7d9aoTV4946udGDzup5zZV1'\n  b += 'TXS68csGLtuZGjRs+ul/FXxZsvDvQMuzrNymXtZeP1iepTF6rtOzs/uP8Kp4sTc/c+G12/1PdOH'\n  b += 'zA4s+rx6Ded27a0KGvZ95bFiujcV/XOJIwKOB++9LF8rOJN8/MnNlXwOMo/Vpfwm5FQrrjpwcCO'\n  b += 'y2BU6ez56O5+fn73/VduCK15K7/dRLv3+q2VOoWFenhOtEpMPlTj6MapsrVnmjnuH5C7lmt83Pp'\n  b += 'wdH+Q3sZ684al1TnG5saC+Phqc10+bqmq55+7W86/lN1HeehOe2Znq5Zj72uGL7F92GLNhg0bXv'\n  b += '7ay2/HrH/zf+kwdVTzazYrm+5YsaqDwr3j3zPv+HUaeym4ytzBqXk+yQsDlc9qHY+uenxD++l3E'\n  b += '0f4+ZWodHgjP8NaWfHqlsgxJy4nBV3tfz7pXfx2ve6iLKGRsfL0Sgw/Mwl0JItdsLEc2Npu1dvm'\n  b += 'r6ymyRn40mprpRa/921+yu7p1MhmdYLaTkqbN+TEyAXy3utbttuy5I3C2Q8qmsV1VDNdOixidt3'\n  b += 'sP0Xf9eyj0ZHHBq5P3+kq37LT94ePOVvaa/7erhpT4sBY+U9+V0H5ybG381X6oPxX/KlQ900XH2'\n  b += '55++63G43OVDZuq97Pqcvu19cf7Wpo3JPpM6bCgWE5+xPfXJ1/53xwq+x7rjtye89vnp/c1e5vx'\n  b += 'cMPT2v+3nf9k5WpS+9eLH34ytGGg5UnrIqbHuDMiWgGLbbPAlNvfTC3RdyUi34RPf4doPaf/n7c'\n  b += 'kit2lauNXDFixYTpcy5u3XpYNiahhMq93E82xqo+YAbf/7luw/Uub/PP1eh04OfwCRcWDeh1sYa'\n  b += 'sxoqoLi/qrUzXbSvZ9dc++XWPnN4iaz59E5hB5Z0+fvFDLZmbObeal59cmZ1vo28f+CJwvUXVB2'\n  b += 'PXjeueXZJ9MiOhdG0Pr4qDXoW4LN8ftarW9jqN77TIS58WknXs5flLJ51TBgycc9KvalCIMetO+'\n  b += 'ps6vjM3OOoHjyrD8MsmgY4MuT0g7kN+fgAb+3E80+XxyBllmj3qb9+6Sp8rsSfWZ/zyd5khcc2Y'\n  b += 'nLbRp3qVuc63WXZMXtz0YMAmg3qWyY7KWuXm56f9uCf3Sb+ar8v9WblCj3UayzWDux5Z03NlbIO'\n  b += '9P5fJqNE/5pj1m4+b9pe7drfU0Xyo6bIl2JV5GvQPY/u7xYXVkTsGt127vkTesnInEyeVG5M6/K'\n  b += 'P132V6z5jVttQSd+WDDUfASunhcy4/pHvF/AU+1WqpJj6JeXmwfImJvaPHvbx+2GnpqT2L3Vp26'\n  b += 'fvvhxvGA7bay5W29Z5nZVluvPWO2f66YzPsK1443frhgn/r3tx6avPAlT3Obvjx8Zy7VZ8Ef0wr'\n  b += 'bf/SqtMf97unhr7Z+nSUZ07YMvd+cy8trHV5Xpdz5x+ua79ncZWMSX8tu/97uRbOv45JTL7+vFQ'\n  b += 'Ztz3T4qs0+/i0wYAJs3bdYjKmX69f88WM9FI1Op96cax1xhXFoJEHO9ez79zfv+r9xBccy/AJ0+'\n  b += 'CEfG8cCrbudFhPcdmED4Mmg/68cK034Ozojbd2vXo7rPwxt1PrKvwsyzW+cwk9pK8aNSR4Z7NmQ'\n  b += 'zRVHDauqqIEVMkMUM+OisU9RIpL/hS3I8WlRvr5gXWb//Zcbv4vk1/n+79Wb5m4w3LehJYf5zku'\n  b += 'rjNoT829wT9W3trmVr+LTfJ/7zXD6vwhywtR50eN9j9RbvGRRYvGP1U9z+4YObyxbvyjsJDFUw7'\n  b += '+YfHxbI8NG1IvxWbUv5pRZUjZ/7HeFGPtWVBxir6jilMUHimBv0RxiqadKslbXMUpmu9zilM0XX'\n  b += 'EUp2ieb6k4RcukilMUpopTFKaKUxQWK07Rd1RxisL/V4pTzbqZK05RmCpOUVisOEXffYniFE37N'\n  b += 'YpTNC9VnKIwVZyi8OcUp2i6r1GconmLqzhF81HFKQp/TnGKpvsSxakGPbDiFM1DFaco/DWKUx0L'\n  b += 'UZyi5T2VrJFnEpgqTnmIbK+hvwWRCvX/tdI649Dz67XWaV6qtd5ZNFZdiP+frqJ30L9C30hDGLI'\n  b += 'wgboQIm1xaAkBtcX9DdpArS5Oa/iOquLlvbCmeDbx58F8gQL4WK//jQL4Ji9zBfDukvVXnLXbQ5'\n  b += 'S3Z+F7LDbCHw9UDNSG+o5jPskbj/kF0i8/YebByOuCwYCHh4P51+mhfgppEs3jRfYxhUvIsZXX9'\n  b += '1B4a9FLrPCG//wXdTdaHlV3o3Bx1d1oPqruRuHvre5G66HqbhSm6m4UpupuFJ4naSdVd6MwVXej'\n  b += 'cLTk+/dWd/MS7Q1vrO42cy2g3s/Y0haslfT4v6i70TK+Rt2N5t3wf62G6ytRs/WVqNn6mqvZUpi'\n  b += 'qzlKYqsv+X6t71fD7OnUvmm+cQGX936kfPvQzVz+UqvjR71TFj8IHJDBV8aMwVfGj8Neq+NH8VM'\n  b += 'Wvl8iurTeDvUtR2JdQ2RTuQ34ZoiJJd2u/b2CuBFBbvFMYeKsJQ4apjUQnVZO+2IayBYupNgr3Y'\n  b += 'PG6LrhOBLeS6tZtTA4nab7ehNKnMPTiphbBG1ns4YLC6SzGjBQ+QTyTUHv2cQn4dzL+TUD/gd8p'\n  b += 'CYK9JnoaS96XIOkmk/zJ5LcE/g5PUvQ7hcBTCJU7ieSTk18Z+U2gNzfyQPIn0PpIggTaDivynnj'\n  b += 'XiNMYdBrkdaMfhzA+9uwhvGaY/thzhF47zBgfZfpi1x97z4rV64RSXME7KHLSAkKmI3iG6yNCE8'\n  b += 'V4g2c5UsfFHjgGAdhKVCZuC8OE98dtwOsZL9xEUiapB50WKf2xRzPoyAT7mQJ7hrzDTsTUTDqAL'\n  b += 'eEeAbdJTSA0ox4y5Hx/7OnrRn/s/SI4PFIDj1V1FKB0jOohT/tjT2j0O8QlUMUfUoA2Azi0Z+i3'\n  b += 'AEBWaeExBu0aJd++1yk5WEJBCp6DvqdNPzKAGA5wZqQBoDJIazkGutaVvGhYd/sAbPP/SIm97FH'\n  b += '4sQRWWmCFdgpbELi4wkqa35bYKX+vMfeXjPn/dqwBbhqE+9mKmNdQ2FuOvf19b/Xl4s4Lbd8wGZ'\n  b += '6X4nJfi6sGXJwzEFCVj/YCqnINQp4JjO67Tiam05isHznkNm4AgwkzCsOF5SKCQ/6D84lgwU1Ws'\n  b += 'A5c3IYNBbhJDe4awVoDs2swdlRiSjPMoAObVpzo5mDMqnGFd2t/7DoLvuNTDoDhKqEme0DG8Jvg'\n  b += 'ixssJ/JqXFx96uJ2rrj88uKuONjpd6TTiiGg0zPTJZ1eBV88lYk7HbH45auZjxaerDlo9sTfn4X'\n  b += 'Xn9HS1zDf9pKyTH7/X65d62L5OauD4jayuIPwvQft+2vrZx3+30iJ0o7CeorbvuK2C/TnGKynuO'\n  b += '0r/rglnMj4Kh2eTJSv+P1KPwnzFXe9MfyyUzBf8ecr4XeYr/jSzUyUr/jjmX4a5JvJ/n8orj2LG'\n  b += 'va95bXFn6H0c6hh4cfcX1ofrt08Ku+3Cxsy6o1aYdttz0fL9svq2jYJbjSq1/Mw+4s9tXvmMbfe'\n  b += 'Tjj9NOqurN29fSVft746bga75LZP27Erxv6tbb36VNaxeXne03qfqxUbNjk+2/tZUtf9/74Lz11'\n  b += 'WrWLxl1zCBdSw4k5Ncaf+K/bQRdSw4k5Ncae++Egh4TIklyoWd2qKO/X/lQ4LDgYkmLn/OWZIqE'\n  b += 'k0VvY/sKehkyjM8QnXBWopVccwR0D5kKX/RIUZCoEiZkkQ+f3eDrRahGEHWidIUImekUZPfSfou'\n  b += 'xRcwkXtCSbhGSisI3apYZL34ZChQuxiAyINhshh2iAKR8QaNQHhpvdDRQ6pIorJjBLn1UMmpkgk'\n  b += 'F0XaRL9HF1PMYhBd2GIk/TNK4FgRI0fK4MNSDzLfJuI5RKvXGjTItZIuOlZLRWeeHd3UATpjTJQ'\n  b += 'mUKvWDh+qiYXufu+FY/fUr+SYfU7h93LMvCaZ9ZoIrTpCEw+FL4JfQsTI1EUa1PpYQNIjn61C/s'\n  b += 'YKnJ9BUsswnT4I94sGHYmDc6KNidGE4LGm4wFDbnQDqb1iIAvUfCwg6R8vchY4opAxKUxE8y6CQ'\n  b += 'wwxKH6tU1Qe4uiqENUIIxhLf7jMESNYXVvt48v7evj34H26QUl7b7+ePT17QlFmAz2+o6wnomcv'\n  b += 'UCQYJFAAfID+waMM2jhdZGwMXKRarR5ydWLAogsy5U0meWWi8p4TZiiFP7LYqZlILFyI1NAf7Ne'\n  b += 'ISD1ZJf46fXAk6F8+KKMuUb+ADF0KVyA+lyhciaShsCNxuFeIqoIz3m/mEgxxvsqicuBf+0LmIE'\n  b += 'qj1wWGYef6aZG4n09IeAsKw/mDrnRHivYiDMnyE9kzdA2NJm65xWslQZJmrASGzPnxSMwoiFh7x'\n  b += 'oZjzx3iNZgImYfwLfHhK/6WJNm7E1B51N+/R2Swl3Go1uAJd40hNgq86guvuQO0hkhfXYQ2yCvW'\n  b += 'SFx1dtQYNeTRUx8Va+wbGRse5A4l3jxGdR7DAXaOcTdEhmn13rooLR8UZACYlY8DcwLlBxD21Pv'\n  b += 'FaMHLDpF6PWoAeQBzxwegDppeAKylNYrBYHAYBHlrDRG6mBjwoqNWrwMDEmnsFBmrD+qtDYz7wl'\n  b += 'UXpYHSexeEknRwO8ZGc0idA+7H2lKVE5ga7zeGpnMhom3TJ6TDEYLkJabQDkwmSA/XCs3XgKGqV'\n  b += 'KLycX6AuWL1sDyaNpgILyhsJE43I6MgHoVrPSY2MBAgq2CA2qFneogEhcgToCUghXGoDmzvcI0x'\n  b += 'ONIQ8aUyfFgYGJNpBg71syQRdZvqhRUJyQtUcxrkg/sLqm7FaQxqKII1z/KlDSElgLZUiOGQmpL'\n  b += 'Jn9ynNR36xWA1h+KqLSSAfK6ieiaK9g0UOEwi4ZT+M00UHGGkFNHVGByyYxCLnTpPlITs0EDPvR'\n  b += 'EaI2K4Gw1wND8XX6SgSx5QH6xrmJFD+NRDhoU1n/LdU8C9P0i/zIhxnj1hUroWFlFMG27UIKWnA'\n  b += 'r3Wx0a4BOni/ZH8ALYnz4jPwO5kvCnck8AscYIM6cKH4OznwEG5bALLtHcvzSTMT2GYv18rmVOL'\n  b += 'WsFzyZbQc+ctGUYNCmhfUs4kJALM7NSQZQ4BanNuU9CFjMiXE2qi8R37fFPSQD7C6V/oIuYJINf'\n  b += 'LsdVDDwY9a6F/tmDt9ez37R7JvcAV4zL8VJttO8+5xMLb8twW5Uu73DPWfPr63CWrm4oj19PO7K'\n  b += 's0pvEaee3qj3rKGH7xU6gzbc2Ock4ZOPHSAcMv165OdClf9pj3X2FR+q7nSl+dd0UfvbV2WvCxV'\n  b += 'Idm5asNuOTeupRvfmB6jN/pis/fa1867vN7e/xmws1n+uyzz2/6v/VRMoWOYnC4sVGQFumHAuQR'\n  b += 'Eu8SZNCEROoLJRWCnCM0AM20VbsyQ+Pwno4ldG+hiXX6WKRGA88Nkj7uE+mjwnFymnbYp8oGDXE'\n  b += 'OHKoNDNMGQaVMR5y9rlgfi5Yz/EvLiYkNcCTNFhdEy4kvshyoVIIFnmC19uD7ocgYHT07e/r6iP'\n  b += 'o+guSncAZZmxR+T4S+FP5A9i2FWaIqSGFr1rw8lQS2kcAlJXApCdyN0CMU1rLm9Uez+EwT5pI1b'\n  b += '+940r7bHpXbyM9VfpDx8XQe3B+nji06XjEvauPNj5cR7HVz34GcLcPy33y8iWCbP8L457P6HCiT'\n  b += 'cw/BrXPGzEytfn5ag5ynCB6/yK+h46BelzrlZCN4x8k1qTM2RS/R5OQg+Pcp/9YcZr/48cgcRT7'\n  b += 'iDPsMbz/L8/Tm+Tk2CO579rcf48u2HrclxxbBzft87NFsLnfo95yqCPZK6dIi8vH8mQ9yHBB83G'\n  b += '1crd+TjH8yuQ0QnL3g4IIz5yYsq5LbBMH3N9WrmGLd5HnT3NYInr61ab2PIS22eud2RHCrdscu3'\n  b += 'r58IjEstzuC95y5VLlOx1tHk3J9ETz/ZK29Z38Jm7MsdxCCE1cH/OQQvunGntwgBL+57l+yX/DG'\n  b += 'lVdywxFc+8Xhv+a8u/Pqea4RwbsS8jesS92xwzpvFIKndB0VrvQPmFgrLxHBPq4ZTYbk7zvZLm8'\n  b += 'qgv1q75k1Nann/AF5cxG8f3TdKIdh728b8xYjeMau+7t+2X97zYy8VQie+5Mx+Zz/+nfr8zYh+N'\n  b += 'zP62bMieq4+0jedgSHlS998F2W1eTbefsQ/FvDhlq/Wmln3ucdQfCmMSPPH7vTbqFt/mkEW7SqX'\n  b += '+8IN+iec/5lBF+aHaNb6OCwwTP/JoJLnWLGv9wxMTcw/x6Cn1QuMzvI6v6+0flPEXw62TuyxOl9'\n  b += 'UxfmZyO4gbbSnX4Vd17Ylp+Tz/DH3gBEqWy/+Gw+QL+XIZBYj1t9+eHDfBqyKmDT0SfDU+UIr4P'\n  b += 'RLjH33fCW7cb+gM4fhtlW3vLkyLML0lsg+h9QYoMejzzbaPQMH0RjgdWd8GjjqhYXr0QgZ8vgxL'\n  b += 'NfVLF2Ha9fkpEDXXDj+njkcsMVgc9WINVYhlmXemJqC+1fafvRWcQw/6+0KwGPosrWdZdauzvdC'\n  b += 'VnISoVh6Wyd6rW6k7DIEgNkAsgmEMhCOhgkCZN0BIdhrA6JM8rOqCABDMoOgvMGZZ6iMI4szjgs'\n  b += '3wORRQmLz5mnHzA6OjOi5N1b1T0TEPR73+t8X7r+uveee86tu51zT/W5ENyVslw4uvgDfawwzLr'\n  b += '0nwz7Z/qMdz7XnRkY5uFPUrfm1v14tQXU6Ph/ls1LqbkOzg8Ec3U8ev6Ndc+/VP/iMKA7AzDtjy'\n  b += '7at3CB+Hk5+JmO5/f+8PFN1ybumw/adPz24Y7pq5+c/uRqsFTHg2Y8d+zwBO+x3eAZQ97ONV+X7'\n  b += '8t+9ihYr+OrFZ3Pv/lC8UeXwWYd918auOB5u2PLN2C3jstfWPtS07ojXyXCfTo+/tZfJk44eHG/'\n  b += 'Ex7Q8ZUH+n6e9MU3vyyF7+h4y4Ly/+o4Lr9XC9/T8aUJmQu/mJa4NgxP67hA6bPm4qudVzrgRR0'\n  b += '/95ur5RNOndv+Grym46IR2zaf+1nHrZPwMx3bRmzeVlr62Bufwr/pOGX90NduLN+1hEPf6Di3bc'\n  b += 'pW240+J2WEdUNClnPVXz7ebOsoRGYdbzCv33Srw/bJJBRvpP+tsPqcbN89D6XpuP3Etp/OHDNCW'\n  b += '4L66Tjvw91o6LXMg1tQro5XdI+Ymb9+9vJDyKPjB367dP2GJPfp86hIxztSr+5bfSF545dohI7P'\n  b += 'zb/0esPB5z614lLQ06rx/avu7Ka65hZdne9aZATQWRTRUKN4R2T1iOKdd+Fdd+Hdd+GX78J7fmB'\n  b += 'VlHOiS3KRbHfKRUWyz5nVo/zeu+iZIs7kPZxDqfdnTZAGg4g4f0bzxkQ0/ihOigRSjOLhd6WPjq'\n  b += 'R/l9dMuvSSpVp35bf35K8L/IB8PcSKlrkM7pTpyl14IDRkjOJseCeflXfhQ9BwAo/is9Bw+o7iq'\n  b += '5H07+0jkd091mx6oBsZfM8uZLoyg+ygqssHKuXUEhQtkxkpozgceTl1DbVlVWU/sImpr1pArqPl'\n  b += 'r0aCNzkI07s146B2mG4V0fVk4/LHLSEd/R/MkF0hI+Dhqh6aympdq6U/7t/YEqKOw9VUJ28u0B2'\n  b += 'MCU80LgPhNaRjIyO5Q3btYUNT85DvuAjNqMZFf1U7c9CgQd8VutKuvykhN9EgxVmVkqy/OUHuV+'\n  b += 'ZKxk16TQPizSV0qdWoPUJ/Tdhwi3opbLhWUTek++U5FjbckiidqMyfhY12vKdGV91SN7cm2ESNz'\n  b += 'Kt6WHnoDP4snTNpPyAfptWQ2RWxOESxO6LxywulXClXlhfKDoe0KJf8lxfpgHwtskv23Cxpes92'\n  b += 'oi+EzbgnQ6RDUl5aDU+GYERLUhYoiuJUXIpb8Shexaeoil8JOBWn0+lyup0ep9fpc6pOvzPgUlx'\n  b += 'Ol8vldnlcXpfPpbr8roBbcTvdLrfb7XF73T636va7Ax7F4/S4PG6Px+P1+Dyqx+8JeBWv0+vyur'\n  b += '0er9fr86pevzfgU3xOn8vn9nl8Xp/Pp/r8voCqqE7VpbpVj+pVfaqq+tWAX/E7/S6/2+/xe/0+v'\n  b += '+r3+wMBwmKAVB8gpAOkWIDcurO/rI0EL153v+cTGZOdi432OMwaljvl//mJ0jvIGqEqQk0twdqq'\n  b += 'uc20vaNpcYJRVxQnC4Z1836nJcH6WY9Qy0dJm9E3pkXm7SZqZaImo6ZQZBhFB5yRQqP86CR6RJB'\n  b += 'c0Gb066fbjCBWRk4a18CgcKDNcN+LphvljTS9pma5KmSMXlJIB8xFkpfy/3mb4eYYWT8MW3+kqE'\n  b += '6mZR69QyamuvqWeiO8UHNjSxNJMdIjPJL5q6Yx2KwbiuqrQrMekWuCzSHqy6Vbuu7IWtRu09fY8'\n  b += 'e1GuKFFrcY4ne5wOGbovo2RliEzzB2zEb0iA/75dsOdcXO7IUN0nFcHZ9c1UOdX2jR2epElz38k'\n  b += 'aFRPrS+k7Ol2w9XySrvhpvnf7UbbRWnQOqkMVdQg2GTUS55voUzNNs3U7k7XVtluxJLL0jmK8tP'\n  b += '7SZuuqQ1+0nDzLCbfXA/a3+krLQ11ukv2vKa6BnrIFDROFkKkXP+I5SStB06JhBphAGJZjkM8Jw'\n  b += 'hirJRmSjbHW2wxFiu2obi4XmIiSGJ7w2SUwqfBdNAnUUY5KBfmmRxAQU7oAtvgDrgT7xK+hrfYb'\n  b += '/Ft1C2+vODxJcteVKY8vGTpyrT0D2OsY0pvfePIH1I+o+LVK23Llq9avePXr79x+Mi7f/jo2sfd'\n  b += 'DI6Ny3J61ILCQaNGz2hbThL3vf7GkT8cP3HtYwZbYvTUgsKRxaNGz6wJtq3q2PDu8ROW2KyRo6b'\n  b += 'UBJet2kEyH3730rWPb1piR46qCWpt/3HgrYNnzt786+L2JZu3vnXw8NHjJ85fKFn75p+OHD8xqm'\n  b += 'zslKkzK55avuLXr+0/+LsjR8/GJiZNL//q77e7NUv9Tz66FGPt09CYll6x6Od79r5x4OvEpIw+x'\n  b += 'Q+WjX14WvnMnz/x6uHTZy7e/OuXTc0rQi3P5VcMcORv27v/4NETZy+tG7pmrbKiz6HfHe8uGztt'\n  b += 'Oi9YbQPzr99oaFQHDRk2cuWq290TZrcce/fkqQ/OfXK7m5Er+rZewq0jhFTMxYZ3x2i7vHaT1oW'\n  b += 'SBYDzsQfzCPAcHyuNs8bxk3iE0yQRCYhHECFkxiwycSAmgS1AsTzH2vgpPOQTLOPwcJSHAI7lrO'\n  b += 'YCnN6/Qq7Hc/prx9jWV1AK1/otmsonmJLEeHO8eQ4ncSncVD6HLZZysRkD5DTl4hTOhLTdJClzS'\n  b += 'CnOQyGhCFlREe8XctjW7tjeQn5sHpJtmVZtKW5dk2xK+OUzbD5byMOY3qL2m7yQWXs/xcxq3ax2'\n  b += 'yXzdgtqWIVUMl8drvxW0P2b7kcT5hWLBzIVMGWganipqi3unSYliKdae5nZtNidh5yYcPj+AN7O'\n  b += 'stiU2XG9bYM/mSOoyrL2FUpHVwnAAEPEg6aZQYk0wBttALIxje8XGgwSYBJMtaWy60A/MQY/CA/'\n  b += 'AUPG0+I74Pz8LzoIu9DP8Mr8s38T/gPyHpqMA8sHBw2dgVGze+wPGib9DgyV+cPIXje/vUyVOe2'\n  b += 'Lln75verrhfPLV847+6H+19ZWNrguWv7U9N4wXJFJ/kCxRs3/HBOVFduWo7LxUOrq1bsbqx4vqN'\n  b += 'adXrOgbaJ23o3PTS5m3bX379wDucyZyQXjBk5Pit2977UyefnNK3/+Ahh49g+Uf9B9jd/oKS0aX'\n  b += 'jJkyaTPtY5axg7aPNCxY98fTmnXtfOXRyz97H32to/NXMvgtZRB5JLQL5Dq01HTmtabifmMHmsC'\n  b += 'NwTLa2k+uH+2G74DEBbWVYFRMlQVsbQLMEUUlkM1EqC4b68Rg2H0u8yA+VB2Kz6EMFbAqPzfy4U'\n  b += 'arb4uYdghQe8FCZXcienBafJJbhDOvwmGRe4kqEgWKLacgD2VwhK3HjOcDaEKstqc4oESRt68y+'\n  b += 'I00SZ+kV4CVfLrZph4pqJphLRKl4ZGqJMCE9EOaLpXT04CgVxQgSR3KFfcnafmB1WRZ31LaYtHe'\n  b += 'ePtCWv+JU64Ob/rM1wGdjWDlAKpbsbK/WV6YHx+AAHzuUPuo1/xDa3s8WX/x7uI8TxWIhvPQp/C'\n  b += 'hrQSJv+1Wl9pXULDQkFWvr4s1TxGTtF+EHUfswa0L7uBztTB5KwTA8r4AF7Yx2NqsUSxgujh1RO'\n  b += 'kh7u4gDeBKb6oHhmFxcY54saXv86ZZcLJIuzWnrFn8gWJAFhcxTeTJksJ/wbxf6loUnmhMQYnkx'\n  b += 'medFZOGztD/2l9q4+07Hke8K/QevyYyMlhonImMiJ49RHP3F7Cimr5IMvp9eUV0329jNEd2e5Kd'\n  b += '7iTPA2Hvf44XIRuP08x5aVN3suhBVDj33sN030pNAw/Tbc1/VQa1TjfVBqgLouoIedpNe6IeB9G'\n  b += '27UKN+8FBBlug7y+rWCrLRXoxlZhVbyczo1cnEJXVmmOWujBu5ck620pnTuLUyF27vys241ZXH3'\n  b += 'O70buzu8n4LqnxA2uTrZ6lSd8Vc9uf3zgwoaVXFX2RsGn1zTlXZ2MZNZRsOZI4Nnro8ljmfOY7p'\n  b += 'ujxeuVw14bMrmyae/PPliTLjmHQTHJzEzGN4Jg8AAMkfKDEpCTYQ5CEHIcA/Ahmp000Fogh6YyC'\n  b += 'SmYbNQfOtQFZJdiyQKZKXyPpXQAtjgWSQYAqAMEAmJAzJtAwyIAImilmSAcTDRDJdFdCaSG4eST'\n  b += 'ADFJKyZlLSTogHEEvmMh6adJqUHVIhpDgNBuC/60gHJQADQhoIYDyAvFmoBlA0caNhKqAfNQaQ+'\n  b += 'lgT6CeCWgw4whJMhhjZsIVccsAKSHujdJQOM+BQCHgBQJMI8tB82Bc8hjAUAYcuEPEJpzylBwVO'\n  b += 'gkCJHYIVgllgF81QJgIC5Ac6G6hAgHAtAhbA0+oQPFIAWAb8PpNBy0ClzHB1kMFAkuE4yNDpGiR'\n  b += 'DFqyBKXEWMEBINjmQAmiDDQTDSatDaCZy5QM3oQshS+TOhgK4ThsNkM5ss1H1ClwBz7IMIlJiO8'\n  b += 'JgC6HPwOdNrwCf1Y+chNZI1I8FwmBghh6RjG5QgWgDcqATICFBb00AEkEMj9jfC1SEJNqSHH00t'\n  b += 'OE/Jfxw5DsVThLonTlALwyCiDxGlhEB/JI8B9IHwEpSFwayZOf0p8NB5CCNzPCkGcBDiZCn1H7K'\n  b += 'IUqVtF0JrQoQ/skSyYAheDy9JnJiVhAgn4GfQYyKXQKIAYkssBIqsToFlvRQzPD1PFOp3WQe6Op'\n  b += '8mzERMh8CcV5TY03LLKJQQmEu2bO3VM0OQvxQS3OIQcOJ8mMm6fQAOFiTV/04ZvUzyXSnw+t2KL'\n  b += 'L9X2eTMlXi8hRfnlPNYmdROpOdJAfN80goNK+5IL+HK1X+3LmPGf/yCPE5wVkhmShrHtXlq1L9Q'\n  b += 'bfqd7mrnUQhq1Krqvw1Tr8vGHB6VaW2NujK4uZXzSU8cIrDGXAoZnrOmldNduKzgw1x1AlL9ch2'\n  b += 'lzpLrfLUKL4spq81RAOBhCpqg3qA0GaQYzV8pYJ5s+c2VhMF6n8BYuo33A=='\n\n  const input = pako.inflate(base64ToUint8Array(b))\n  const imports = {}\n\n  const { instance, module } = await load(await input, imports)\n\n  wasm = instance.exports\n  init.__wbindgen_wasm_module = module\n\n  return wasm\n}\n","// import 'babel-polyfill'\nimport Libp2p from 'libp2p'\nimport Websockets from 'libp2p-websockets'\nimport WebRTCDirect from '@lit-protocol/libp2p-webrtc-direct'\nimport { NOISE } from 'libp2p-noise'\nimport { FaultTolerance } from 'libp2p/src/transport-manager'\nimport Mplex from 'libp2p-mplex'\nimport KadDHT from 'libp2p-kad-dht'\nimport PeerId from 'peer-id'\nimport Bootstrap from 'libp2p-bootstrap'\nimport pipe from 'it-pipe'\nimport CID from 'cids'\nimport secrets from 'secrets.js-lit'\nimport uint8arrayFromString from 'uint8arrays/from-string'\nimport uint8arrayToString from 'uint8arrays/to-string'\nimport all from 'it-all'\nimport naclUtil from 'tweetnacl-util'\n\nimport { mostCommonString } from '../lib/utils'\nimport { encryptWithPubKey, decryptWithPrivKey } from './crypto'\n\n/**\n * A LIT node client.  Connects directly to the LIT nodes to store and retrieve encryption keys.  Only holders of an NFT that corresponds with a LIT may store and retrieve the keys.\n * @param {Object} config\n * @param {boolean} [config.alertWhenUnauthorized=true] Whether or not to show a JS alert() when a user tries to unlock a LIT but is unauthorized.  If you turn this off, you should create an event listener for the \"lit-authFailure\" event on the document, and show your own error to the user.\n * @param {number} [config.minNodeCount=8] The minimum number of nodes that must be connected for the LitNodeClient to be ready to use.\n */\nexport default class LitNodeClient {\n  constructor (\n    config = {\n      alertWhenUnauthorized: true,\n      minNodeCount: 2,\n      bootstrapUrls: ['http://127.0.0.1:7470', 'http://127.0.0.1:7471', 'http://127.0.0.1:7472']\n    }\n  ) {\n    this.config = config\n    this.connectedNodes = new Set()\n    this.serverKeys = {}\n    this.ready = false\n    this.subnetPubKey = null\n    this.networkPubKey = null\n\n    if (typeof window !== 'undefined' && window && window.localStorage) {\n      let configOverride = window.localStorage.getItem('LitNodeClientConfig')\n      if (configOverride) {\n        configOverride = JSON.parse(configOverride)\n      }\n      this.config = { ...config, ...configOverride }\n    }\n  }\n\n  /**\n   * Retrieve the symmetric encryption key from the LIT nodes.  Note that this will only work if the current user is a holder of the NFT that corresponds to this LIT.  This NFT token address and ID was specified when this LIT was created.\n   * @param {Object} params\n   * @param {string} params.tokenAddress The token address of the NFT that corresponds to this LIT.  This should be an ERC721 or ERC1155 token.\n   * @param {string} params.tokenId The token ID of the NFT that corresponds to this LIT\n  * @param {string} params.chain The chain that the corresponding NFT lives on.  Currently \"polygon\" and \"ethereum\" are supported.\n   * @param {AuthSig} params.authSig The authentication signature that proves that the user owns the crypto wallet address that should be an owner of the NFT that corresponds to this LIT.\n   * @returns {Object} The symmetric encryption key that can be used to decrypt the locked content inside the LIT.  You should pass this key to the decryptZip function.\n  */\n  async getEncryptionKey ({ accessControlConditions, chain, authSig }) {\n    // ask each node to decrypt the content\n\n    // combine the decryption shares\n\n  }\n\n  /**\n * Securely save the symmetric encryption key to the LIT nodes.\n * @param {Object} params\n * @param {string} params.tokenAddress The token address of the NFT that corresponds to this LIT.  This should be an ERC721 or ERC1155 token.\n * @param {string} params.tokenId The token ID of the NFT that corresponds to this LIT\n * @param {string} params.chain The chain that the corresponding NFT lives on.  Currently \"polygon\" and \"ethereum\" are supported.\n * @param {AuthSig} params.authSig The authentication signature that proves that the user owns the crypto wallet address that should be an owner of the NFT that corresponds to this LIT.\n * @param {string} params.symmetricKey The symmetric encryption key that was used to encrypt the locked content inside the LIT.  You should use zipAndEncryptString or zipAndEncryptFiles to get this encryption key.  This key will be split up using threshold encryption so that the LIT nodes cannot decrypt a given LIT.\n * @returns {Object} An object that gives the status of the operation, denoted via a boolean with the key \"success\"\n */\n  async saveEncryptionKey ({ accessControlConditions, chain, authSig, symmetricKey }) {\n    // encrypt with network pubkey\n\n    // hash the encrypted pubkey\n\n    // create access control conditions on lit nodes\n  }\n\n  async getEncryptionKeyDecryptionShares ({ accessControlConditions, authSig, chain }) {\n\n  }\n\n  async storeDataWithNode ({ peerId, accessControlConditions, fragmentNumber, val, authSig, chain }) {\n\n  }\n\n  async getDataFromNode ({ peerId, accessControlConditions, authSig, chain }) {\n\n  }\n\n  async handshakeWithSgx ({ url }) {\n    const urlWithPath = `${url}/web/handshake`\n    console.debug(`handshakeWithSgx ${urlWithPath}`)\n    const data = {\n      client_public_key: 'test'\n    }\n    return await this.sendCommandToNode({ url: urlWithPath, data })\n  }\n\n  async sendCommandToNode ({ url, data }) {\n    return await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    })\n      .then(response => response.json())\n      .then(data => {\n        console.log('Success:', data)\n      })\n  }\n\n  async connect () {\n    // handshake with each node\n    for (const url of this.config.bootstrapUrls) {\n      this.handshakeWithSgx({ url })\n        .then(resp => {\n          this.connectedNodes.add(url)\n          this.serverKeys[url] = {\n            serverPubKey: resp.server_public_key,\n            subnetPubKey: resp.subnet_public_key,\n            networkPubKey: resp.network_public_key\n          }\n        })\n    }\n\n    const interval = window.setInterval(() => {\n      if (Object.keys(this.serverKeys).length >= this.config.minNodeCount) {\n        clearInterval(interval)\n        // pick the most common public keys for the subnet and network from the bunch, in case some evil node returned a bad key\n        this.subnetPubKey = mostCommonString(Object.values(this.serverKeys).map(keysFromSingleNode => keysFromSingleNode.subnetPubKey))\n        this.networkPubKey = mostCommonString(Object.values(this.serverKeys).map(keysFromSingleNode => keysFromSingleNode.networkPubKey))\n        this.ready = true\n        console.debug('lit is ready')\n        document.dispatchEvent(new Event('lit-ready'))\n      }\n    }, 500)\n  }\n}\n","import 'regenerator-runtime/runtime'\n\nimport {\n  zipAndEncryptString,\n  zipAndEncryptFiles,\n  encryptZip,\n  decryptZip,\n  createHtmlLIT,\n  toggleLock,\n  unlockLitWithKey\n} from './utils/lit'\n\nimport {\n  connectWeb3,\n  mintLIT,\n  checkAndSignAuthMessage,\n  findLITs,\n  sendLIT\n} from './utils/eth'\n\nimport {\n  decryptWithPrivKey,\n  encryptWithPubKey\n} from './utils/crypto'\n\nimport {\n  fileToDataUrl,\n  injectViewerIFrame\n} from './utils/browser'\n\nimport { LIT_CHAINS, protobufs } from './lib/constants'\nimport { kFragKey, printError } from './lib/utils'\nimport { init } from './lib/bls-sdk.js'\n\nimport LitNodeClient from './utils/litNodeClient'\n\nimport { litJsSdkLoadedInALIT } from './utils/init'\n\nimport {\n  listenForChildFrameMessages,\n  listenForFrameParentMessages,\n  inIframe\n} from './utils/frameComms'\n\nif (typeof window !== 'undefined') {\n  // only run this in browser\n  if (inIframe()) {\n    listenForFrameParentMessages()\n  } else {\n    listenForChildFrameMessages()\n  }\n}\n\ninit().then((exports) => {\n  window.wasmExports = exports\n})\n\nconst functions = {\n  zipAndEncryptString,\n  zipAndEncryptFiles,\n  encryptZip,\n  decryptZip,\n  connectWeb3,\n  checkAndSignAuthMessage,\n  createHtmlLIT,\n  mintLIT,\n  toggleLock,\n  LIT_CHAINS,\n  LitNodeClient,\n  protobufs,\n  kFragKey,\n  encryptWithPubKey,\n  decryptWithPrivKey,\n  fileToDataUrl,\n  findLITs,\n  sendLIT,\n  litJsSdkLoadedInALIT,\n  unlockLitWithKey,\n  injectViewerIFrame,\n  printError\n}\n\nexport default functions\n","import { sendMessageToFrameParent } from './frameComms'\nimport LitNodeClient from './litNodeClient'\n\nexport const litJsSdkLoadedInALIT = () => {\n  sendMessageToFrameParent({ command: 'LIT_SYN' }, '*')\n  setTimeout(function () {\n    if (!window.useLitPostMessageProxy) {\n      console.log('inside lit - no parent frame lit node connection.  connecting ourselves.')\n      // we're on our own with no parent frame.  initiate our own connection to lit nodes\n      const litNodeClient = new LitNodeClient()\n      litNodeClient.connect()\n      window.litNodeClient = litNodeClient\n    } else {\n      console.log('inside lit - parent frame is connected to lit nodes.  using that.')\n    }\n  }, 1000)\n}\n"],"names":["runtime","exports","undefined","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","key","value","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","generator","create","Generator","context","Context","_invoke","state","GenStateSuspendedStart","method","arg","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","done","GenStateSuspendedYield","makeInvokeMethod","fn","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","invoke","resolve","reject","result","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","toString","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function","SYMM_KEY_ALGO_PARAMS","protobufs","protons","LIT_CHAINS","polygon","contractAddress","chainId","symbol","decimals","rpcUrls","blockExplorerUrls","balanceStorageSlot","websocketUrl","ethereum","kovan","connectWeb3","window","errorCode","message","provider","detectEthereumProvider","accounts","request","web3","account","toLowerCase","checkAndSignAuthMessage","chain","params","selectedChain","selectedChainId","console","debug","data","chainName","nativeCurrency","res","log","authSig","localStorage","getItem","signAndSaveAuthMessage","JSON","parse","address","now","Date","toISOString","body","replace","signedResult","signature","verifyMessage","msg","alert","signMessage","setItem","stringify","sig","derivedVia","signedMessage","commsKeyPair","nacl","box","keyPair","publicKey","naclUtil","encodeBase64","secretKey","sendMessageToFrameParent","parent","postMessage","fileToDataUrl","file","reader","FileReader","onloadend","readAsDataURL","PACKAGE_CACHE","decryptZip","encryptedZipBlob","symmKey","importedSymmKey","jwkSymmKey","crypto","subtle","importKey","importSymmetricKey","decryptedZipArrayBuffer","encryptedBlob","recoveredIv","arrayBuffer","encryptedZipArrayBuffer","decrypt","iv","decryptWithSymmetricKey","zip","JSZip","loadAsync","files","encryptZip","zipBlob","generateAsync","zipBlobArrayBuffer","generateKey","generateSymmetricKey","getRandomValues","Uint8Array","encryptedZipData","encrypt","Blob","encryptWithSymmetricKey","exportedSymmKey","exportKey","symmetricKey","encryptedZip","getNpmPackage","packageName","resp","fetch","ok","statusText","blob","dataUrl","unlockLitWithKey","mediaGridHolder","document","getElementById","lockedHeader","encryptedZipDataUrl","decryptedFiles","mediaGridHtmlBody","innerHTML","innerText","locked","mostCommonString","arr","sort","a","b","filter","v","wasm","LitNodeClient","config","alertWhenUnauthorized","minNodeCount","bootstrapUrls","connectedNodes","Set","serverKeys","ready","subnetPubKey","networkPubKey","configOverride","[object Object]","url","urlWithPath","sendCommandToNode","client_public_key","headers","Content-Type","response","json","handshakeWithSgx","add","serverPubKey","server_public_key","subnet_public_key","network_public_key","interval","setInterval","clearInterval","map","keysFromSingleNode","dispatchEvent","Event","top","e","inIframe","origin","addEventListener","messageIsFromFrameParent","event","source","respondingToCommand","useLitPostMessageProxy","encryptionKey","listenForFrameParentMessages","childFrameThatSentMessageIndex","frames","command","target","litNodeClient","getEncryptionKey","listenForChildFrameMessages","init","input","pako","inflate","atob","split","c","charCodeAt","instance","module","imports","WebAssembly","instantiate","Instance","load","__wbindgen_wasm_module","wasmExports","functions","zipAndEncryptString","string","zipAndEncryptFiles","folder","createHtmlLIT","title","htmlBody","css","tokenAddress","tokenId","npmPackages","scriptTags","mintLIT","quantity","contract","Contract","LIT","Web3Provider","getSigner","tx","mint","txReceipt","wait","events","args","toNumber","txHash","transactionHash","mintingAddress","code","toggleLock","publicContent","kFragKey","normalizedTokenAddress","normalizedTokenId","parseInt","padStart","hashed","multihashing","Buffer","from","CID","encryptWithPubKey","receiverPublicKey","version","ephemeralKeyPair","pubKeyUInt8Array","decodeBase64","msgParamsUInt8Array","decodeUTF8","nonce","randomBytes","nonceLength","encryptedMessage","ephemPublicKey","ciphertext","decryptWithPrivKey","encryptedData","receiverPrivateKey","recieverEncryptionPrivateKey","decryptedMessage","open","output","encodeUTF8","findLITs","chainHexId","chainHexIdToChainName","maxTokenId","tokenIds","balanceOfBatch","sendLIT","tokenMetadata","to","safeTransferFrom","success","litJsSdkLoadedInALIT","setTimeout","connect","injectViewerIFrame","destinationId","fileUrl","className","includes","URL","host","location","iframe","createElement","src","sandbox","loading","allow","appendChild","printError","stack"],"mappings":"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"}