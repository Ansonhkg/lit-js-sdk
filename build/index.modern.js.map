{"version":3,"file":"index.modern.js","sources":["../src/lib/utils/crypto.js","../src/lib/utils/firebase.js","../src/lib/utils/eth.js","../src/lib/utils/cloudFunctions.js","../src/lib/utils/lit.js","../src/lib/utils/browser.js","../src/lib/index.js","../src/lib/utils/lit-node-client.js"],"sourcesContent":["\nimport nacl from 'tweetnacl'\nimport naclUtil from 'tweetnacl-util'\n\nconst SYMM_KEY_ALGO_PARAMS = {\n  name: 'AES-CBC',\n  length: 256\n}\n\nexport function compareArrayBuffers (buf1, buf2) {\n  if (buf1.byteLength !== buf2.byteLength) return false\n  const dv1 = new Uint8Array(buf1)\n  const dv2 = new Uint8Array(buf2)\n  for (let i = 0; i !== buf1.byteLength; i++) {\n    if (dv1[i] !== dv2[i]) return false\n  }\n  return true\n}\n\nexport async function importSymmetricKey (jwkSymmKey) {\n  const importedSymmKey = await crypto.subtle.importKey(\n    'jwk',\n    JSON.parse(jwkSymmKey),\n    SYMM_KEY_ALGO_PARAMS,\n    true,\n    ['encrypt', 'decrypt']\n  )\n  return importedSymmKey\n}\nexport async function generateSymmetricKey () {\n  const symmKey = await crypto.subtle.generateKey(\n    SYMM_KEY_ALGO_PARAMS,\n    true,\n    ['encrypt', 'decrypt']\n  )\n  return symmKey\n}\n\nexport async function decryptWithSymmetricKey (\n  encryptedBlob,\n  symmKey\n) {\n  const recoveredIv = await encryptedBlob.slice(0, 16).arrayBuffer()\n  const encryptedZipArrayBuffer = await encryptedBlob.slice(16).arrayBuffer()\n  const decryptedZip = await crypto.subtle.decrypt(\n    {\n      name: 'AES-CBC',\n      iv: recoveredIv\n    },\n    symmKey,\n    encryptedZipArrayBuffer\n  )\n  return decryptedZip\n}\n\n// used this as an example\n// https://github.com/infotechinc/symmetric-encryption-in-browser/blob/master/crypto.js\nexport async function encryptWithSymmetricKey (\n  symmKey,\n  data\n) {\n  // encrypt the zip with symmetric key\n  const iv = window.crypto.getRandomValues(new Uint8Array(16))\n\n  const encryptedZipData = await crypto.subtle.encrypt(\n    {\n      name: 'AES-CBC',\n      iv\n    },\n    symmKey,\n    data\n  )\n  const encryptedZipBlob = new Blob([iv, new Uint8Array(encryptedZipData)], { type: 'application/octet-stream' })\n  return encryptedZipBlob\n}\n\n// borrowed from eth-sig-util from meatmask.\nexport function encryptWithPubkey (\n  receiverPublicKey,\n  data,\n  version\n) {\n  switch (version) {\n    case 'x25519-xsalsa20-poly1305': {\n      // generate ephemeral keypair\n      const ephemeralKeyPair = nacl.box.keyPair()\n\n      // assemble encryption parameters - from string to UInt8\n      let pubKeyUInt8Array\n      try {\n        pubKeyUInt8Array = naclUtil.decodeBase64(receiverPublicKey)\n      } catch (err) {\n        throw new Error('Bad public key')\n      }\n\n      const msgParamsUInt8Array = naclUtil.decodeUTF8(data)\n      const nonce = nacl.randomBytes(nacl.box.nonceLength)\n\n      // encrypt\n      const encryptedMessage = nacl.box(\n        msgParamsUInt8Array,\n        nonce,\n        pubKeyUInt8Array,\n        ephemeralKeyPair.secretKey\n      )\n\n      // handle encrypted data\n      const output = {\n        version: 'x25519-xsalsa20-poly1305',\n        nonce: naclUtil.encodeBase64(nonce),\n        ephemPublicKey: naclUtil.encodeBase64(ephemeralKeyPair.publicKey),\n        ciphertext: naclUtil.encodeBase64(encryptedMessage)\n      }\n      // return encrypted msg data\n      return output\n    }\n\n    default:\n      throw new Error('Encryption type/version not supported')\n  }\n}\n\n// borrowed from eth-sig-util from meatmask.\nexport function decryptWithPrivkey (\n  encryptedData,\n  receiverPrivateKey\n) {\n  switch (encryptedData.version) {\n    case 'x25519-xsalsa20-poly1305': {\n      const recieverEncryptionPrivateKey = naclUtil.decodeBase64(receiverPrivateKey)\n\n      // assemble decryption parameters\n      const nonce = naclUtil.decodeBase64(encryptedData.nonce)\n      const ciphertext = naclUtil.decodeBase64(encryptedData.ciphertext)\n      const ephemPublicKey = naclUtil.decodeBase64(\n        encryptedData.ephemPublicKey\n      )\n\n      // decrypt\n      const decryptedMessage = nacl.box.open(\n        ciphertext,\n        nonce,\n        ephemPublicKey,\n        recieverEncryptionPrivateKey\n      )\n\n      // return decrypted msg data\n      let output\n      try {\n        output = naclUtil.encodeUTF8(decryptedMessage)\n      } catch (err) {\n        throw new Error('Decryption failed.')\n      }\n\n      if (output) {\n        return output\n      }\n      throw new Error('Decryption failed.')\n    }\n\n    default:\n      throw new Error('Encryption type/version not supported.')\n  }\n}\n","import firebase from 'firebase/app'\nimport 'firebase/functions'\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyDa3JnwzrjfY5DcPz4GtywdUUUY3zqWo0w',\n  authDomain: 'mintlit.firebaseapp.com',\n  projectId: 'mintlit',\n  storageBucket: 'mintlit.appspot.com',\n  messagingSenderId: '1044454922569',\n  appId: '1:1044454922569:web:a3cf1d5637f18413f66298',\n  measurementId: 'G-NC19HWVQPT'\n}\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig)\n\nexport default firebase\n","import Web3 from 'web3'\n\nimport detectEthereumProvider from '@metamask/detect-provider'\n\nimport naclUtil from 'tweetnacl-util'\nimport nacl from 'tweetnacl'\nimport { getPublicKey, savePublicKey } from './cloudFunctions'\n\nimport LIT from '../abis/LIT.json'\n\nconst KEY_DERIVATION_SIGNATURE_BODY = 'I am creating an account to mint a LIT'\n\nexport const LIT_CHAINS = {\n  polygon: {\n    contractAddress: '0xb9A323711528D0c5a70df790929f4739f1cDd7fD',\n    chainId: 137\n  },\n  ethereum: {\n    contractAddress: '0x55485885e82E25446DEC314Ccb810Bda06B9e01B',\n    chainId: 1\n  }\n}\n\nexport async function checkAndDeriveKeypair () {\n  let keypair = localStorage.getItem('lit-keypair')\n  if (!keypair) {\n    await deriveEncryptionKeys()\n    keypair = localStorage.getItem('lit-keypair')\n  }\n  keypair = JSON.parse(keypair)\n  const { web3, account } = await connectWeb3()\n  // make sure we are on the right account\n  if (account !== keypair.address) {\n    await deriveEncryptionKeys()\n    keypair = localStorage.getItem('lit-keypair')\n    keypair = JSON.parse(keypair)\n  }\n  return keypair\n}\n\nexport async function connectWeb3 () {\n  if (typeof window.ethereum === 'undefined') {\n    throw new Error({ errorCode: 'no_wallet', message: 'No web3 wallet was found' })\n  }\n\n  const provider = await detectEthereumProvider()\n\n  // trigger metamask popup\n  const accounts = await provider.request({ method: 'eth_requestAccounts' })\n  const account = accounts[0]\n\n  const web3 = new Web3(provider)\n  return { web3, account }\n}\n\nexport async function signMessage ({ body }) {\n  const { web3, account } = await connectWeb3()\n\n  console.log('signing with ', account)\n  const signature = await web3.eth.personal.sign(body, account)\n  const address = web3.eth.accounts.recover(body, signature)\n\n  console.log('Signature: ', signature)\n  console.log('recovered address: ', address)\n\n  if (address !== account) {\n    const msg = `ruh roh, the user signed with a different address (${address}) then they\\'re using with web3 (${account}).  this will lead to confusion.`\n    console.error(msg)\n    alert('something seems to be wrong with your wallets message signing.  maybe restart your browser or your wallet.  your recovered sig address does not match your web3 account address')\n    throw new Error(msg)\n  }\n\n  return { signature, address }\n}\n\nexport async function decryptWithWeb3PrivateKey (encryptedData) {\n  const { web3, account } = await connectWeb3()\n  try {\n    const decryptedMessage = ethereum\n      .request({\n        method: 'eth_decrypt',\n        params: [encryptedData, account]\n      })\n    return decryptedMessage\n  } catch (error) {\n    console.log(error)\n    return false\n  }\n}\n\nasync function deriveKeysViaSignature () {\n  const { signature, address } = await signMessage({ body: KEY_DERIVATION_SIGNATURE_BODY })\n  console.log('Signed message: ' + signature)\n\n  // derive keypair\n  const data = Buffer.from(signature.substring(2), 'hex')\n  const hash = await crypto.subtle.digest('SHA-256', data)\n  const uint8Hash = new Uint8Array(hash)\n  const { publicKey, secretKey } = nacl.box.keyPair.fromSecretKey(uint8Hash)\n  return {\n    publicKey: naclUtil.encodeBase64(publicKey),\n    secretKey: naclUtil.encodeBase64(secretKey)\n  }\n}\n\n// this only works on metamask :(\nasync function deriveKeysViaPrivateKey () {\n  try {\n    const { web3, account } = await connectWeb3()\n    /* global ethereum */\n    /* eslint no-undef: \"error\" */\n    const publicKey = await ethereum\n      .request({\n        method: 'eth_getEncryptionPublicKey',\n        params: [account] // you must have access to the specified account\n      })\n    return { publicKey }\n  } catch (error) {\n    console.log(error)\n    if (error.code === 4001) {\n      // EIP-1193 userRejectedRequest error\n      console.log(\"We can't encrypt anything without the key.\")\n      error('You must accept the metamask request to derive your public encryption key')\n    } else {\n      console.error(error)\n    }\n    return { error }\n  }\n}\n\nexport async function deriveEncryptionKeys () {\n  let keypair = {}\n  // key derivation via metamask is more desirable because then even this SDK can't see the secret key :-D\n  const { error, publicKey } = await deriveKeysViaPrivateKey()\n  if (!error) {\n    keypair = {\n      publicKey,\n      derivedVia: 'eth_getEncryptionPublicKey'\n    }\n  } else {\n    const { publicKey, secretKey } = await deriveKeysViaSignature()\n    keypair = {\n      publicKey,\n      secretKey,\n      derivedVia: 'web3.eth.personal.sign',\n      signedMessage: KEY_DERIVATION_SIGNATURE_BODY\n    }\n  }\n\n  const { web3, account } = await connectWeb3()\n  keypair.address = account\n\n  console.log('public key: ' + keypair.publicKey)\n  const asString = JSON.stringify(keypair)\n  localStorage.setItem('lit-keypair', asString)\n\n  // is it already saved on the server?\n  const { pubkey, errorCode } = await getPublicKey({\n    address: account\n  })\n  if (errorCode === 'not_found' || pubkey !== keypair.publicKey) {\n    // add it\n    const msg = `I am saving my public key so that others can send me LITs.  It is ${pubkey}`\n    const res = await signMessage({ body: msg })\n    await savePublicKey({\n      sig: res.signature,\n      msg,\n      pubkey: keypair.publicKey\n    })\n  }\n}\n\nexport async function mintLIT ({ chain, quantity }) {\n  console.log(`minting ${quantity} tokens on ${chain}`)\n  await checkAndDeriveKeypair()\n  const { web3, account } = await connectWeb3()\n  const chainId = await web3.eth.getChainId()\n  if (chainId !== LIT_CHAINS[chain].chainId) {\n    return { errorCode: 'wrong_chain' }\n  }\n  const tokenAddress = LIT_CHAINS[chain].contractAddress\n  const contract = new web3.eth.Contract(LIT.abi, tokenAddress)\n  console.log('sending to chain...')\n  try {\n    const txReceipt = await contract.methods.mint(quantity).send({ from: account })\n    console.log('txReceipt: ', txReceipt)\n    const tokenId = txReceipt.events.TransferSingle.returnValues.id\n    return {\n      txHash: txReceipt.transactionHash,\n      tokenId,\n      tokenAddress,\n      mintingAddress: account\n    }\n  } catch (error) {\n    console.log(error)\n    if (error.code === 4001) {\n      // EIP-1193 userRejectedRequest error\n      console.log('User rejected request')\n      return { errorCode: 'user_rejected_request' }\n    } else {\n      console.error(error)\n    }\n    return { errorCode: 'unknown_error' }\n  }\n}\n","import firebase from './firebase'\n\nexport async function savePublicKey (data) {\n  const fn = firebase.functions().httpsCallable('savePublicKey')\n  const result = await fn(data)\n  console.log(result)\n  return result.data\n}\n\nexport async function getPublicKey (data) {\n  const fn = firebase.functions().httpsCallable('getPublicKey')\n  const result = await fn(data)\n  console.log(result)\n  return result.data\n}\n\nexport async function getUploadUrl () {\n  const fn = firebase.functions().httpsCallable('getUploadUrl')\n  const result = await fn()\n  console.log(result)\n  return result.data\n}\n\nexport async function createTokenMetadata (data) {\n  const fn = firebase.functions().httpsCallable('createTokenMetadata')\n  const result = await fn(data)\n  console.log(result)\n  return result.data\n}\n","import JSZip from 'jszip'\n\nimport {\n  encryptWithPubkey,\n  decryptWithPrivkey,\n  importSymmetricKey,\n  generateSymmetricKey,\n  encryptWithSymmetricKey,\n  decryptWithSymmetricKey,\n  compareArrayBuffers\n} from './crypto'\n\nimport {\n  checkAndDeriveKeypair,\n  decryptWithWeb3PrivateKey\n} from './eth'\n\nimport { fileToDataUrl } from './browser'\n\nconst PACKAGE_CACHE = {}\n\nexport async function zipAndEncryptString (string) {\n  const zip = new JSZip()\n  zip.file('string.txt', string)\n  return encryptZip(zip)\n}\n\nexport async function zipAndEncryptFiles (files) {\n  // let's zip em\n  const zip = new JSZip()\n  for (let i = 0; i < files.length; i++) {\n    zip.folder('encryptedAssets').file(files[i].name, files[i])\n  }\n  return encryptZip(zip)\n}\n\nexport async function decryptZip (encryptedZipBlob, symmKey) {\n  const keypair = await checkAndDeriveKeypair()\n\n  console.log('Got keypair out of localstorage: ' + keypair)\n  const privkey = keypair.secretKey\n\n  let decryptedSymmKey = await decryptWithWeb3PrivateKey(symmKey)\n  if (!decryptedSymmKey) {\n    // fallback to trying the private derived via signature\n    console.log('probably not metamask')\n    decryptedSymmKey = decryptWithPrivkey(symmKey, privkey)\n  }\n  console.log('decrypted', decryptedSymmKey)\n\n  // import the decrypted symm key\n  const importedSymmKey = await importSymmetricKey(decryptedSymmKey)\n\n  const decryptedZipArrayBuffer = await decryptWithSymmetricKey(\n    encryptedZipBlob,\n    importedSymmKey\n  )\n\n  // unpack the zip\n  const zip = new JSZip()\n  const unzipped = await zip.loadAsync(decryptedZipArrayBuffer)\n\n  // load the files into data urls with the metadata attached\n  // const files = await Promise.all(unzipped.files.map(async f => {\n  //   // const dataUrl = await fileToDataUrl(f)\n  //   return {\n  //     type: f.type,\n  //     name: f.name,\n  //     file: f\n  //   }\n  // }))\n\n  return unzipped.files\n}\n\nexport async function encryptZip (zip) {\n  const zipBlob = await zip.generateAsync({ type: 'blob' })\n  const zipBlobArrayBuffer = await zipBlob.arrayBuffer()\n  console.log('blob', zipBlob)\n\n  const symmKey = await generateSymmetricKey()\n  const encryptedZipBlob = await encryptWithSymmetricKey(\n    symmKey,\n    zipBlobArrayBuffer\n  )\n\n  // to download the encrypted zip file for testing, uncomment this\n  // saveAs(encryptedZipBlob, 'encrypted.bin')\n\n  const exportedSymmKey = await crypto.subtle.exportKey('jwk', symmKey)\n  console.log('exportedSymmKey', exportedSymmKey)\n\n  // encrypt the symmetric key with the\n  // public key derived from the eth wallet\n  const keypair = await checkAndDeriveKeypair()\n  const pubkey = keypair.publicKey\n  const privkey = keypair.secretKey\n\n  // encrypt symm key\n  const encryptedSymmKeyData = encryptWithPubkey(pubkey, JSON.stringify(exportedSymmKey), 'x25519-xsalsa20-poly1305')\n  const packed = JSON.stringify(encryptedSymmKeyData)\n\n  //   console.log('packed symmetric key ', packed)\n  //   const unpacked = JSON.parse(packed)\n  //   // test decrypt\n  //   const decryptedSymmKey = decryptWithPrivkey(unpacked, privkey)\n  //   console.log('decrypted', decryptedSymmKey)\n  //\n  //   // import the decrypted symm key\n  //   const importedSymmKey = await importSymmetricKey(decryptedSymmKey)\n  //\n  //   const decryptedZipArrayBuffer = await decryptWithSymmetricKey(\n  //     encryptedZipBlob,\n  //     importedSymmKey\n  //   )\n  //\n  //   // compare zip before and after as a sanity check\n  //   const isEqual = compareArrayBuffers(\n  //     zipBlobArrayBuffer,\n  //     decryptedZipArrayBuffer\n  //   )\n  //   console.log('Zip before and after decryption are equal: ', isEqual)\n  //   if (!isEqual) {\n  //     throw new Error('Decrypted zip does not match original zip.  Something is wrong.')\n  //   }\n\n  // to download the zip, for testing, uncomment this\n  //   const decryptedBlob = new Blob(\n  //     [decryptedZipArrayBuffer],\n  //     { type: 'application/zip' }\n  //   )\n  //   console.log('decrypted blob', decryptedBlob)\n  //\n  //   saveAs(decryptedBlob, 'decrypted.zip')\n  // console.log('saved')\n\n  return {\n    encryptedSymmetricKey: packed,\n    encryptedZip: encryptedZipBlob\n  }\n}\n\nasync function getNpmPackage (packageName) {\n  // console.log('getting npm package: ' + packageName)\n  if (PACKAGE_CACHE[packageName]) {\n    // console.log('found in cache')\n    return PACKAGE_CACHE[packageName]\n  }\n\n  const resp = await fetch('https://unpkg.com/' + packageName)\n  if (!resp.ok) {\n    console.log('error with response: ', resp)\n    throw Error(resp.statusText)\n  }\n  const blob = await resp.blob()\n  // console.log('got blob', blob)\n  const dataUrl = await fileToDataUrl(blob)\n  // console.log('got dataUrl', dataUrl)\n  PACKAGE_CACHE[packageName] = dataUrl\n  return dataUrl\n}\n\nexport async function createHtmlLIT ({\n  title,\n  htmlBody,\n  css,\n  encryptedSymmetricKey,\n  encryptedZipDataUrl,\n  npmPackages = []\n}) {\n  npmPackages.push('lit-js-sdk')\n  // console.log('createHtmlLIT with npmPackages', npmPackages)\n  let scriptTags = ''\n  for (let i = 0; i < npmPackages.length; i++) {\n    const scriptDataUrl = await getNpmPackage(npmPackages[i])\n    const tag = `<script src=\"${scriptDataUrl}\"></script>\\n`\n    scriptTags += tag\n  }\n\n  // console.log('scriptTags: ', scriptTags)\n\n  return `\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>${title}</title>\n    <style id=\"jss-server-side\">${css}</style>\n    ${scriptTags}\n    <script>\n      var encryptedSymmetricKey = ${encryptedSymmetricKey}\n      var encryptedZipDataUrl = \"${encryptedZipDataUrl}\"\n      var locked = true\n    </script>\n  </head>\n  <body>\n    <div id=\"root\">${htmlBody}</div>\n    <script>\n      const unlockButton = document.getElementById('unlockButton')\n      unlockButton.onclick = function() {\n        LitJsSdk.default.toggleLock()\n      }\n    </script>\n  </body>\n</html>\n  `\n}\n\nexport async function toggleLock () {\n  const mediaGridHolder = document.getElementById('mediaGridHolder')\n  const lockedHeader = document.getElementById('lockedHeader')\n\n  if (window.locked) {\n    // save public content before decryption, so we can toggle back to the\n    // locked state in the future\n    window.publicContent = mediaGridHolder.innerHTML\n    // convert data url to blob\n    const encryptedZipBlob = await (await fetch(window.encryptedZipDataUrl)).blob()\n    const decryptedFiles = await decryptZip(encryptedZipBlob, JSON.stringify(window.encryptedSymmetricKey))\n    const mediaGridHtmlBody = await decryptedFiles['string.txt'].async('text')\n    mediaGridHolder.innerHTML = mediaGridHtmlBody\n    lockedHeader.innerText = 'UNLOCKED'\n    window.locked = false\n  } else {\n    mediaGridHolder.innerHTML = window.publicContent\n    lockedHeader.innerText = 'LOCKED'\n    window.locked = true\n  }\n}\n","export function fileToDataUrl (file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader()\n    reader.onloadend = () => {\n      resolve(reader.result)\n    }\n    reader.readAsDataURL(file)\n  })\n}\n","import {\n  zipAndEncryptString,\n  zipAndEncryptFiles,\n  encryptZip,\n  decryptZip,\n  createHtmlLIT,\n  toggleLock\n} from './utils/lit'\n\nimport {\n  checkAndDeriveKeypair,\n  connectWeb3,\n  mintLIT,\n  LIT_CHAINS\n} from './utils/eth'\n\nimport LitNodeClient from './utils/lit-node-client'\n\nconst functions = {\n  zipAndEncryptString,\n  zipAndEncryptFiles,\n  encryptZip,\n  decryptZip,\n  checkAndDeriveKeypair,\n  connectWeb3,\n  createHtmlLIT,\n  mintLIT,\n  toggleLock,\n  LIT_CHAINS,\n  LitNodeClient\n}\n\nexport default functions\n","// import 'babel-polyfill'\nimport Libp2p from 'libp2p'\nimport Websockets from 'libp2p-websockets'\nimport WebRTCDirect from 'libp2p-webrtc-direct'\nimport { NOISE } from 'libp2p-noise'\nimport Mplex from 'libp2p-mplex'\nimport KadDHT from 'libp2p-kad-dht'\nimport PeerId from 'peer-id'\nimport { multiaddr } from 'multiaddr'\nimport Bootstrap from 'libp2p-bootstrap'\nimport pipe from 'it-pipe'\nimport lp from 'it-length-prefixed'\nimport multihashing from 'multihashing'\nimport CID from 'cids'\nimport pushable from 'it-pushable'\n\nexport default class LitNodeClient {\n  constructor (config) {\n    this.libp2p = null\n    this.connectedNodes = {}\n  }\n\n  async saveEncryptionKey ({ contractAddress, tokenId, symmetricKey }) {\n    const nodeKeys = Object.keys(this.connectedNodes)\n    // split up into nodeKeys.length fragments\n  }\n\n  async storeData ({ peerId, key, val }) {\n    // const stream = await this.getStream(peerId)\n    const hashed = multihashing(Buffer.from('1'), 'sha2-256')\n    const cid = new CID(hashed)\n    const msg = JSON.stringify({ cmd: 'set', key: cid.toString(), val })\n    const node = this.connectedNodes[peerId]\n    node.send(msg)\n  }\n\n  // async getStream (peerId) {\n  //   const conn = this.libp2p.connectionManager.get(peerId)\n  //   if (!conn) {\n  //     console.error('trying to store data but no connection to ' + peerId.toB58String())\n  //     return\n  //   }\n  //   console.log('streams: ')\n  // }\n\n  dataReceived ({ peerId, msg }) {\n    console.log(`dataReceived from ${peerId.toB58String()}: ${msg}`)\n  }\n\n  async connect () {\n    const hardcodedPeerId = '12D3KooWK1KtaAV5rWjbAmZcd62VYSmEz1k81jzr87JAcSS7rKdQ'\n    // Create our libp2p node\n    this.libp2p = await Libp2p.create({\n      modules: {\n        transport: [Websockets, WebRTCDirect],\n        connEncryption: [NOISE],\n        streamMuxer: [Mplex],\n        dht: KadDHT,\n        peerDiscovery: [Bootstrap]\n      },\n      config: {\n        dht: {\n          enabled: true\n        },\n        peerDiscovery: {\n          [Bootstrap.tag]: {\n            enabled: true,\n            list: [`/ip4/127.0.0.1/tcp/9090/http/p2p-webrtc-direct/p2p/${hardcodedPeerId}`]\n          }\n        }\n      }\n    })\n\n    // Listen for new peers\n    this.libp2p.on('peer:discovery', (peerId) => {\n      console.debug(`Found peer ${peerId.toB58String()}`)\n    })\n\n    // Listen for new connections to peers\n    this.libp2p.connectionManager.on('peer:connect', async (connection) => {\n      console.debug(`Connected to ${connection.remotePeer.toB58String()}`)\n      const { stream } = await connection.newStream(['/lit/1.0.0'])\n      // write data\n      const p = pushable()\n      pipe(\n        p,\n        lp.encode(),\n        stream.sink\n      )\n      this.connectedNodes[connection.remotePeer.toB58String()] = {\n        send: p.push\n      }\n\n      // pipe(\n      //   stream.source,\n      //   lp.decode(),\n      //   async (source) => {\n      //     for await (const msg of source) {\n      //       // console.log(`Peer ${connection.remotePeer.toB58String()} responded with ${msg}`)\n      //       this.dataReceived({ peerId: connection.remotePeer, msg })\n      //     }\n      //   }\n      // )\n\n      // send some data\n      // const dialed = await libp2p.dialProtocol(connection.remotePeer, '/lit/1.0.0')\n      // // Write operation. Data sent as a buffer\n      // pipe(\n      //   p,\n      //   lp.encode(),\n      //   dialed.stream.sink\n      // )\n      // pipe(\n      //   dialed.stream.source,\n      //   lp.decode(),\n      //   async (source) => {\n      //     for await (const msg of source) {\n      //       console.log(`Peer ${connection.remotePeer.toB58String()} responded with ${msg}`)\n      //     }\n      //   }\n      // )\n      // const hashed = multihashing(Buffer.from('1'), 'sha2-256')\n      // const cid = new CID(hashed)\n      // const msg = JSON.stringify({ cmd: 'set', key: cid.toString(), val: 'woof' })\n      // p.push(msg)\n      // setTimeout(() => {\n      //   const msg = JSON.stringify({ cmd: 'get', key: cid.toString() })\n      //   p.push(msg)\n      // }, 3000)\n    })\n\n    // Listen for peers disconnecting\n    this.libp2p.connectionManager.on('peer:disconnect', (connection) => {\n      console.debug(`Disconnected from ${connection.remotePeer.toB58String()}`)\n    })\n\n    await this.libp2p.start()\n    console.debug(`libp2p id is ${this.libp2p.peerId.toB58String()}`)\n    this.libp2p.multiaddrs.forEach((ma) => console.debug(`${ma.toString()}/p2p/${this.libp2p.peerId.toB58String()}`))\n\n    // Export libp2p to the window so you can play with the API\n    window.libp2p = this.libp2p\n    // const hashed = multihashing(Buffer.from('1'), 'sha2-256')\n    // window.cid = new CID(hashed)\n\n    // const node1PeerId = PeerId.createFromB58String('QmXQtURimWjx8ihhWp1jjMv3rnv8xzq1qwY6KSzMr8dSGL')\n    // const ma = multiaddr('/ip4/127.0.0.1/tcp/9092/ws/p2p')\n    // libp2p.peerStore.addressBook.set(node1PeerId, [ma])\n  }\n}\n"],"names":["SYMM_KEY_ALGO_PARAMS","name","length","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","LIT_CHAINS","polygon","contractAddress","chainId","ethereum","checkAndDeriveKeypair","keypair","localStorage","getItem","deriveEncryptionKeys","JSON","parse","account","connectWeb3","address","window","Error","errorCode","message","provider","detectEthereumProvider","request","method","web3","Web3","signMessage","body","console","log","signature","eth","personal","sign","accounts","recover","msg","error","alert","publicKey","async","params","code","deriveKeysViaPrivateKey","secretKey","data","Buffer","from","substring","hash","crypto","subtle","digest","uint8Hash","Uint8Array","nacl","box","keyPair","fromSecretKey","naclUtil","encodeBase64","deriveKeysViaSignature","derivedVia","signedMessage","asString","stringify","setItem","pubkey","fn","functions","httpsCallable","result","getPublicKey","res","savePublicKey","sig","PACKAGE_CACHE","decryptZip","encryptedZipBlob","symmKey","privkey","decryptedSymmKey","encryptedData","decryptWithWeb3PrivateKey","receiverPrivateKey","version","recieverEncryptionPrivateKey","decodeBase64","nonce","ciphertext","ephemPublicKey","decryptedMessage","open","output","encodeUTF8","err","decryptWithPrivkey","importedSymmKey","jwkSymmKey","importKey","importSymmetricKey","decryptedZipArrayBuffer","encryptedBlob","recoveredIv","slice","arrayBuffer","encryptedZipArrayBuffer","decrypt","iv","decryptWithSymmetricKey","zip","JSZip","loadAsync","files","encryptZip","zipBlob","generateAsync","type","zipBlobArrayBuffer","generateKey","generateSymmetricKey","getRandomValues","encryptedZipData","encrypt","Blob","encryptWithSymmetricKey","exportedSymmKey","exportKey","encryptedSymmKeyData","receiverPublicKey","ephemeralKeyPair","pubKeyUInt8Array","msgParamsUInt8Array","decodeUTF8","randomBytes","nonceLength","encryptedMessage","encryptWithPubkey","encryptedSymmetricKey","encryptedZip","getNpmPackage","packageName","resp","fetch","ok","statusText","blob","dataUrl","file","Promise","resolve","reject","reader","FileReader","onloadend","readAsDataURL","zipAndEncryptString","string","zipAndEncryptFiles","i","folder","createHtmlLIT","title","htmlBody","css","encryptedZipDataUrl","npmPackages","push","scriptTags","mintLIT","chain","quantity","getChainId","tokenAddress","contract","Contract","LIT","txReceipt","methods","mint","send","txHash","transactionHash","tokenId","events","TransferSingle","returnValues","id","mintingAddress","toggleLock","mediaGridHolder","document","getElementById","lockedHeader","locked","publicContent","innerHTML","decryptedFiles","mediaGridHtmlBody","innerText","LitNodeClient","constructor","config","this","libp2p","connectedNodes","[object Object]","peerId","val","hashed","multihashing","cid","CID","cmd","key","toString","dataReceived","toB58String","Libp2p","create","modules","transport","Websockets","WebRTCDirect","connEncryption","NOISE","streamMuxer","Mplex","dht","KadDHT","peerDiscovery","Bootstrap","enabled","tag","list","on","debug","connectionManager","connection","remotePeer","stream","newStream","p","pushable","pipe","lp","encode","sink","_this","start","multiaddrs","forEach","ma"],"mappings":"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"}