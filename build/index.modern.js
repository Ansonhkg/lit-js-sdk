import e from"jszip";import t from"tweetnacl";import n from"tweetnacl-util";import a from"web3";import i from"@metamask/detect-provider";import r from"firebase/app";import"firebase/functions";import o from"libp2p";import s from"libp2p-websockets";import p from"libp2p-webrtc-direct";import{NOISE as c}from"libp2p-noise";import y from"libp2p-mplex";import d from"libp2p-kad-dht";import"peer-id";import"multiaddr";import l from"libp2p-bootstrap";import u from"it-pipe";import m from"it-length-prefixed";import b from"multihashing";import w from"cids";import f from"it-pushable";const g={name:"AES-CBC",length:256};r.initializeApp({apiKey:"AIzaSyDa3JnwzrjfY5DcPz4GtywdUUUY3zqWo0w",authDomain:"mintlit.firebaseapp.com",projectId:"mintlit",storageBucket:"mintlit.appspot.com",messagingSenderId:"1044454922569",appId:"1:1044454922569:web:a3cf1d5637f18413f66298",measurementId:"G-NC19HWVQPT"});var h=[{inputs:[],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"operator",type:"address"},{indexed:!1,internalType:"bool",name:"approved",type:"bool"}],name:"ApprovalForAll",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"userAddress",type:"address"},{indexed:!1,internalType:"address payable",name:"relayerAddress",type:"address"},{indexed:!1,internalType:"bytes",name:"functionSignature",type:"bytes"}],name:"MetaTransactionExecuted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"operator",type:"address"},{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256[]",name:"ids",type:"uint256[]"},{indexed:!1,internalType:"uint256[]",name:"values",type:"uint256[]"}],name:"TransferBatch",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"operator",type:"address"},{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"id",type:"uint256"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"TransferSingle",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"string",name:"value",type:"string"},{indexed:!0,internalType:"uint256",name:"id",type:"uint256"}],name:"URI",type:"event"},{inputs:[],name:"ERC712_VERSION",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",constant:!0},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"id",type:"uint256"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",constant:!0},{inputs:[{internalType:"address[]",name:"accounts",type:"address[]"},{internalType:"uint256[]",name:"ids",type:"uint256[]"}],name:"balanceOfBatch",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function",constant:!0},{inputs:[{internalType:"address",name:"userAddress",type:"address"},{internalType:"bytes",name:"functionSignature",type:"bytes"},{internalType:"bytes32",name:"sigR",type:"bytes32"},{internalType:"bytes32",name:"sigS",type:"bytes32"},{internalType:"uint8",name:"sigV",type:"uint8"}],name:"executeMetaTransaction",outputs:[{internalType:"bytes",name:"",type:"bytes"}],stateMutability:"payable",type:"function",payable:!0},{inputs:[],name:"getChainId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"pure",type:"function",constant:!0},{inputs:[],name:"getDomainSeperator",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",constant:!0},{inputs:[{internalType:"address",name:"user",type:"address"}],name:"getNonce",outputs:[{internalType:"uint256",name:"nonce",type:"uint256"}],stateMutability:"view",type:"function",constant:!0},{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256[]",name:"ids",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"data",type:"bytes"}],name:"safeBatchTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],name:"safeTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"operator",type:"address"},{internalType:"bool",name:"approved",type:"bool"}],name:"setApprovalForAll",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",constant:!0},{inputs:[],name:"tokenIds",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",constant:!0},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"uri",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",constant:!0},{inputs:[{internalType:"uint256",name:"quantity",type:"uint256"}],name:"mint",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_owner",type:"address"},{internalType:"address",name:"_operator",type:"address"}],name:"isApprovedForAll",outputs:[{internalType:"bool",name:"isOperator",type:"bool"}],stateMutability:"view",type:"function",constant:!0},{inputs:[{internalType:"bool",name:"enabled",type:"bool"}],name:"setOpenseaProxyEnabled",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newAdmin",type:"address"}],name:"changeAdmin",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"string",name:"uri",type:"string"}],name:"setURI",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"getAdmin",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",constant:!0}];const T={polygon:{contractAddress:"0xb9A323711528D0c5a70df790929f4739f1cDd7fD",chainId:137},ethereum:{contractAddress:"0x55485885e82E25446DEC314Ccb810Bda06B9e01B",chainId:1}};async function v(){let e=localStorage.getItem("lit-keypair");e||(await k(),e=localStorage.getItem("lit-keypair")),e=JSON.parse(e);const{account:t}=await x();return t!==e.address&&(await k(),e=localStorage.getItem("lit-keypair"),e=JSON.parse(e)),e}async function x(){if(void 0===window.ethereum)throw new Error({errorCode:"no_wallet",message:"No web3 wallet was found"});const e=await i(),t=(await e.request({method:"eth_requestAccounts"}))[0];return{web3:new a(e),account:t}}async function S({body:e}){const{web3:t,account:n}=await x();console.log("signing with ",n);const a=await t.eth.personal.sign(e,n),i=t.eth.accounts.recover(e,a);if(console.log("Signature: ",a),console.log("recovered address: ",i),i!==n){const e=`ruh roh, the user signed with a different address (${i}) then they're using with web3 (${n}).  this will lead to confusion.`;throw console.error(e),alert("something seems to be wrong with your wallets message signing.  maybe restart your browser or your wallet.  your recovered sig address does not match your web3 account address"),new Error(e)}return{signature:a,address:i}}async function k(){let e={};const{error:a,publicKey:i}=await async function(){try{const{account:e}=await x();return{publicKey:await ethereum.request({method:"eth_getEncryptionPublicKey",params:[e]})}}catch(e){return console.log(e),4001===e.code?(console.log("We can't encrypt anything without the key."),e("You must accept the metamask request to derive your public encryption key")):console.error(e),{error:e}}}();if(a){const{publicKey:a,secretKey:i}=await async function(){const{signature:e}=await S({body:"I am creating an account to mint a LIT"});console.log("Signed message: "+e);const a=Buffer.from(e.substring(2),"hex"),i=await crypto.subtle.digest("SHA-256",a),r=new Uint8Array(i),{publicKey:o,secretKey:s}=t.box.keyPair.fromSecretKey(r);return{publicKey:n.encodeBase64(o),secretKey:n.encodeBase64(s)}}();e={publicKey:a,secretKey:i,derivedVia:"web3.eth.personal.sign",signedMessage:"I am creating an account to mint a LIT"}}else e={publicKey:i,derivedVia:"eth_getEncryptionPublicKey"};const{account:o}=await x();e.address=o,console.log("public key: "+e.publicKey);const s=JSON.stringify(e);localStorage.setItem("lit-keypair",s);const{pubkey:p,errorCode:c}=await async function(e){const t=r.functions().httpsCallable("getPublicKey"),n=await t(e);return console.log(n),n.data}({address:o});if("not_found"===c||p!==e.publicKey){const t=`I am saving my public key so that others can send me LITs.  It is ${p}`,n=await S({body:t});await async function(e){const t=r.functions().httpsCallable("savePublicKey"),n=await t(e);return console.log(n),n.data}({sig:n.signature,msg:t,pubkey:e.publicKey})}}const B={};async function K(a,i){const r=await v();console.log("Got keypair out of localstorage: "+r);const o=r.secretKey;let s=await async function(e){const{account:t}=await x();try{return ethereum.request({method:"eth_decrypt",params:[e,t]})}catch(e){return console.log(e),!1}}(i);s||(console.log("probably not metamask"),s=function(e,a){switch(e.version){case"x25519-xsalsa20-poly1305":{const i=n.decodeBase64(a),r=n.decodeBase64(e.nonce),o=n.decodeBase64(e.ciphertext),s=n.decodeBase64(e.ephemPublicKey),p=t.box.open(o,r,s,i);let c;try{c=n.encodeUTF8(p)}catch(e){throw new Error("Decryption failed.")}if(c)return c;throw new Error("Decryption failed.")}default:throw new Error("Encryption type/version not supported.")}}(i,o)),console.log("decrypted",s);const p=await async function(e){return await crypto.subtle.importKey("jwk",JSON.parse(e),g,!0,["encrypt","decrypt"])}(s),c=await async function(e,t){const n=await e.slice(0,16).arrayBuffer(),a=await e.slice(16).arrayBuffer();return await crypto.subtle.decrypt({name:"AES-CBC",iv:n},t,a)}(a,p),y=new e;return(await y.loadAsync(c)).files}async function A(e){const a=await e.generateAsync({type:"blob"}),i=await a.arrayBuffer();console.log("blob",a);const r=await async function(){return await crypto.subtle.generateKey(g,!0,["encrypt","decrypt"])}(),o=await async function(e,t){const n=window.crypto.getRandomValues(new Uint8Array(16)),a=await crypto.subtle.encrypt({name:"AES-CBC",iv:n},e,t);return new Blob([n,new Uint8Array(a)],{type:"application/octet-stream"})}(r,i),s=await crypto.subtle.exportKey("jwk",r);console.log("exportedSymmKey",s);const p=function(e,a,i){{const i=t.box.keyPair();let r;try{r=n.decodeBase64(e)}catch(e){throw new Error("Bad public key")}const o=n.decodeUTF8(a),s=t.randomBytes(t.box.nonceLength),p=t.box(o,s,r,i.secretKey);return{version:"x25519-xsalsa20-poly1305",nonce:n.encodeBase64(s),ephemPublicKey:n.encodeBase64(i.publicKey),ciphertext:n.encodeBase64(p)}}}((await v()).publicKey,JSON.stringify(s));return{encryptedSymmetricKey:JSON.stringify(p),encryptedZip:o}}async function I(e){if(B[e])return B[e];const t=await fetch("https://unpkg.com/"+e);if(!t.ok)throw console.log("error with response: ",t),Error(t.statusText);const n=await t.blob(),a=await(i=n,new Promise((e,t)=>{const n=new FileReader;n.onloadend=()=>{e(n.result)},n.readAsDataURL(i)}));var i;return B[e]=a,a}const E={zipAndEncryptString:async function(t){const n=new e;return n.file("string.txt",t),A(n)},zipAndEncryptFiles:async function(t){const n=new e;for(let e=0;e<t.length;e++)n.folder("encryptedAssets").file(t[e].name,t[e]);return A(n)},encryptZip:A,decryptZip:K,checkAndDeriveKeypair:v,connectWeb3:x,createHtmlLIT:async function({title:e,htmlBody:t,css:n,encryptedSymmetricKey:a,encryptedZipDataUrl:i,npmPackages:r=[]}){r.push("lit-js-sdk");let o="";for(let e=0;e<r.length;e++)o+=`<script src="${await I(r[e])}"><\/script>\n`;return`\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>${e}</title>\n    <style id="jss-server-side">${n}</style>\n    ${o}\n    <script>\n      var encryptedSymmetricKey = ${a}\n      var encryptedZipDataUrl = "${i}"\n      var locked = true\n    <\/script>\n  </head>\n  <body>\n    <div id="root">${t}</div>\n    <script>\n      const unlockButton = document.getElementById('unlockButton')\n      unlockButton.onclick = function() {\n        LitJsSdk.default.toggleLock()\n      }\n    <\/script>\n  </body>\n</html>\n  `},mintLIT:async function({chain:e,quantity:t}){console.log(`minting ${t} tokens on ${e}`),await v();const{web3:n,account:a}=await x();if(await n.eth.getChainId()!==T[e].chainId)return{errorCode:"wrong_chain"};const i=T[e].contractAddress,r=new n.eth.Contract(h,i);console.log("sending to chain...");try{const e=await r.methods.mint(t).send({from:a});return console.log("txReceipt: ",e),{txHash:e.transactionHash,tokenId:e.events.TransferSingle.returnValues.id,tokenAddress:i,mintingAddress:a}}catch(e){return console.log(e),4001===e.code?(console.log("User rejected request"),{errorCode:"user_rejected_request"}):(console.error(e),{errorCode:"unknown_error"})}},toggleLock:async function(){const e=document.getElementById("mediaGridHolder"),t=document.getElementById("lockedHeader");if(window.locked){window.publicContent=e.innerHTML;const n=await(await fetch(window.encryptedZipDataUrl)).blob(),a=await K(n,JSON.stringify(window.encryptedSymmetricKey)),i=await a["string.txt"].async("text");e.innerHTML=i,t.innerText="UNLOCKED",window.locked=!1}else e.innerHTML=window.publicContent,t.innerText="LOCKED",window.locked=!0},LIT_CHAINS:T,LitNodeClient:class{constructor(e){this.libp2p=null,this.connectedNodes={}}async saveEncryptionKey({}){}async storeData({peerId:e,val:t}){const n=b(Buffer.from("1"),"sha2-256"),a=new w(n),i=JSON.stringify({cmd:"set",key:a.toString(),val:t});this.connectedNodes[e].send(i)}dataReceived({peerId:e,msg:t}){console.log(`dataReceived from ${e.toB58String()}: ${t}`)}async connect(){var e=this;this.libp2p=await o.create({modules:{transport:[s,p],connEncryption:[c],streamMuxer:[y],dht:d,peerDiscovery:[l]},config:{dht:{enabled:!0},peerDiscovery:{[l.tag]:{enabled:!0,list:["/ip4/127.0.0.1/tcp/9090/http/p2p-webrtc-direct/p2p/12D3KooWK1KtaAV5rWjbAmZcd62VYSmEz1k81jzr87JAcSS7rKdQ"]}}}}),this.libp2p.on("peer:discovery",e=>{console.debug(`Found peer ${e.toB58String()}`)}),this.libp2p.connectionManager.on("peer:connect",async function(t){console.debug(`Connected to ${t.remotePeer.toB58String()}`);const{stream:n}=await t.newStream(["/lit/1.0.0"]),a=f();u(a,m.encode(),n.sink),e.connectedNodes[t.remotePeer.toB58String()]={send:a.push}}),this.libp2p.connectionManager.on("peer:disconnect",e=>{console.debug(`Disconnected from ${e.remotePeer.toB58String()}`)}),await this.libp2p.start(),console.debug(`libp2p id is ${this.libp2p.peerId.toB58String()}`),this.libp2p.multiaddrs.forEach(e=>console.debug(`${e.toString()}/p2p/${this.libp2p.peerId.toB58String()}`)),window.libp2p=this.libp2p}}};export default E;
//# sourceMappingURL=index.modern.js.map
