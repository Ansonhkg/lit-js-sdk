{"version":3,"file":"index.esm.js","sources":["../node_modules/regenerator-runtime/runtime.js","../src/utils/crypto.js","../src/lib/constants.js","../src/utils/eth.js","../src/utils/frameComms.js","../src/utils/browser.js","../src/utils/lit.js","../src/lib/bls-sdk.js","../src/lib/utils.js","../src/utils/litNodeClient.js","../src/index.js","../src/utils/init.js"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","\nimport nacl from 'tweetnacl'\nimport naclUtil from 'tweetnacl-util'\nimport uint8arrayFromString from 'uint8arrays/from-string'\n\nconst SYMM_KEY_ALGO_PARAMS = {\n  name: 'AES-CBC',\n  length: 256\n}\n\nexport function compareArrayBuffers (buf1, buf2) {\n  if (buf1.byteLength !== buf2.byteLength) return false\n  const dv1 = new Uint8Array(buf1)\n  const dv2 = new Uint8Array(buf2)\n  for (let i = 0; i !== buf1.byteLength; i++) {\n    if (dv1[i] !== dv2[i]) return false\n  }\n  return true\n}\n\nexport async function importSymmetricKey (symmKey) {\n  const importedSymmKey = await crypto.subtle.importKey(\n    'raw',\n    symmKey,\n    SYMM_KEY_ALGO_PARAMS,\n    true,\n    ['encrypt', 'decrypt']\n  )\n  return importedSymmKey\n}\nexport async function generateSymmetricKey () {\n  const symmKey = await crypto.subtle.generateKey(\n    SYMM_KEY_ALGO_PARAMS,\n    true,\n    ['encrypt', 'decrypt']\n  )\n  return symmKey\n}\n\n/**\n * Decrypt an encrypted blob with a symmetric key.  Uses AES-CBC via SubtleCrypto\n * @param {Blob} encryptedBlob The encrypted blob that should be decrypted\n * @param {Object} symmKey The symmetric key\n * @returns {Blob} The decrypted blob\n */\nexport async function decryptWithSymmetricKey (\n  encryptedBlob,\n  symmKey\n) {\n  const recoveredIv = await encryptedBlob.slice(0, 16).arrayBuffer()\n  const encryptedZipArrayBuffer = await encryptedBlob.slice(16).arrayBuffer()\n  const decryptedZip = await crypto.subtle.decrypt(\n    {\n      name: 'AES-CBC',\n      iv: recoveredIv\n    },\n    symmKey,\n    encryptedZipArrayBuffer\n  )\n  return decryptedZip\n}\n\n// used this as an example\n// https://github.com/infotechinc/symmetric-encryption-in-browser/blob/master/crypto.js\n/**\n * Encrypt a blob with a symmetric key\n * @param {Object} symmKey The symmetric key\n * @param {Blob} data The blob to encrypt\n * @returns {Blob} The encrypted blob\n */\nexport async function encryptWithSymmetricKey (\n  symmKey,\n  data\n) {\n  // encrypt the zip with symmetric key\n  const iv = window.crypto.getRandomValues(new Uint8Array(16))\n\n  const encryptedZipData = await crypto.subtle.encrypt(\n    {\n      name: 'AES-CBC',\n      iv\n    },\n    symmKey,\n    data\n  )\n  const encryptedZipBlob = new Blob([iv, new Uint8Array(encryptedZipData)], { type: 'application/octet-stream' })\n  return encryptedZipBlob\n}\n\n// borrowed from eth-sig-util from meatmask.\n/**\n * Encrypt a blob with the public key of a receiver\n * @param {string} receiverPublicKey The base64 encoded 32 byte public key.  The corresponding private key will be able to decrypt this blob\n * @param {Blob} data The blob to encrypt\n * @param {string} version The encryption algorithm to use.  This should be set to \"x25519-xsalsa20-poly1305\" as no other algorithms are implemented right now.\n * @returns {Blob} The encrypted blob\n */\nexport function encryptWithPubKey (\n  receiverPublicKey,\n  data,\n  version\n) {\n  switch (version) {\n    case 'x25519-xsalsa20-poly1305': {\n      // generate ephemeral keypair\n      const ephemeralKeyPair = nacl.box.keyPair()\n\n      // assemble encryption parameters - from string to UInt8\n      let pubKeyUInt8Array\n      try {\n        pubKeyUInt8Array = naclUtil.decodeBase64(receiverPublicKey)\n      } catch (err) {\n        throw new Error('Bad public key')\n      }\n\n      // padding?  not needed for c decryption?\n      // const paddingBytes = new Uint8Array(32)\n      // paddingBytes.fill(0)\n      // const msgParamsUInt8Array = new Uint8Array([...paddingBytes, ...naclUtil.decodeUTF8(data)])\n      const msgParamsUInt8Array = naclUtil.decodeUTF8(data)\n      const nonce = nacl.randomBytes(nacl.box.nonceLength)\n\n      // encrypt\n      const encryptedMessage = nacl.box(\n        msgParamsUInt8Array,\n        nonce,\n        pubKeyUInt8Array,\n        ephemeralKeyPair.secretKey\n      )\n\n      // handle encrypted data\n      const output = {\n        version: 'x25519-xsalsa20-poly1305',\n        nonce: naclUtil.encodeBase64(nonce),\n        ephemPublicKey: naclUtil.encodeBase64(ephemeralKeyPair.publicKey),\n        ciphertext: naclUtil.encodeBase64(encryptedMessage)\n      }\n      // return encrypted msg data\n      return output\n    }\n\n    default:\n      throw new Error('Encryption type/version not supported')\n  }\n}\n\n// borrowed from eth-sig-util from meatmask.\n/**\n * Decrypt a blob with a private key\n * @param {Blob} encryptedData The blob to decrypt\n * @param {string} receiverPrivateKey The base64 encoded 32 byte private key.  The corresponding public key was used to encrypt this blob\n * @param {string} version The encryption algorithm to use.  This should be set to \"x25519-xsalsa20-poly1305\" as no other algorithms are implemented right now.\n * @returns {Blob} The decrypted blob\n */\nexport function decryptWithPrivKey (\n  encryptedData,\n  receiverPrivateKey\n) {\n  switch (encryptedData.version) {\n    case 'x25519-xsalsa20-poly1305': {\n      const recieverEncryptionPrivateKey = naclUtil.decodeBase64(receiverPrivateKey)\n\n      // assemble decryption parameters\n      const nonce = naclUtil.decodeBase64(encryptedData.nonce)\n      const ciphertext = naclUtil.decodeBase64(encryptedData.ciphertext)\n      const ephemPublicKey = naclUtil.decodeBase64(\n        encryptedData.ephemPublicKey\n      )\n\n      // decrypt\n      const decryptedMessage = nacl.box.open(\n        ciphertext,\n        nonce,\n        ephemPublicKey,\n        recieverEncryptionPrivateKey\n      )\n\n      // return decrypted msg data\n      let output\n      try {\n        output = naclUtil.encodeUTF8(decryptedMessage)\n      } catch (err) {\n        throw new Error('Decryption failed.  Could not encode result as utf8')\n      }\n\n      if (output) {\n        return output\n      }\n      throw new Error('Decryption failed.  Output is falsy')\n    }\n\n    default:\n      throw new Error('Encryption type/version not supported.')\n  }\n}\n","\n/**\n * @typedef {Object} LITChain\n * @property {string} contractAddress - The address of the token contract\n * @property {string} chainId - The chain ID of the chain that this token contract is deployed on.  Used for EVM chains.\n * @property {string} name - The human readable name of the chain\n */\n\n/**\n * Pre-deployed token contracts that you may use for minting LITs.  These are ERC1155 contracts that let you mint any quantity of a given token.  Use the chain name as a key in this object.  Currently \"polygon\" and \"ethereum\" are supported.\n * @constant\n * @type {LITChain}\n * @default\n*/\nexport const LIT_CHAINS = {\n  polygon: {\n    contractAddress: '0xb9A323711528D0c5a70df790929f4739f1cDd7fD',\n    chainId: 137,\n    name: 'Polygon',\n    symbol: 'MATIC',\n    decimals: 18,\n    rpcUrls: ['https://floral-rough-flower.matic.quiknode.pro/a17b25f97cc396bb2b6aaf85a005f579bf93dc73/'],\n    blockExplorerUrls: ['https://explorer.matic.network'],\n    type: 'ERC1155',\n    websocketUrl: 'wss://floral-rough-flower.matic.quiknode.pro/a17b25f97cc396bb2b6aaf85a005f579bf93dc73/'\n  },\n  fantom: {\n    contractAddress: '0x3110c39b428221012934A7F617913b095BC1078C',\n    chainId: 250,\n    name: 'Fantom',\n    symbol: 'FTM',\n    decimals: 18,\n    rpcUrls: ['https://rpcapi.fantom.network'],\n    blockExplorerUrls: ['https://ftmscan.com'],\n    type: 'ERC1155',\n    websocketUrl: 'wss://wsapi.fantom.network'\n  },\n  xdai: {\n    contractAddress: '0x3110c39b428221012934A7F617913b095BC1078C',\n    chainId: 100,\n    name: 'xDai',\n    symbol: 'xDai',\n    decimals: 18,\n    rpcUrls: ['https://rpc.xdaichain.com'],\n    blockExplorerUrls: [' https://blockscout.com/xdai/mainnet'],\n    type: 'ERC1155',\n    websocketUrl: 'wss://wsapi.fantom.network'\n  },\n  ethereum: {\n    contractAddress: '0x55485885e82E25446DEC314Ccb810Bda06B9e01B',\n    chainId: 1,\n    name: 'Ethereum',\n    symbol: 'ETH',\n    decimals: 18,\n    type: 'ERC1155',\n    websocketUrl: 'wss://mainnet.infura.io/ws/v3/ddf1ca3700f34497bca2bf03607fde38'\n  },\n  kovan: {\n    contractAddress: '0xA9b2180C2A479Ba9b263878C4d81AE4e0E717846',\n    chainId: 42,\n    name: 'Ethereum',\n    symbol: 'ETH',\n    decimals: 18,\n    rpcUrls: ['https://kovan.infura.io/v3/ddf1ca3700f34497bca2bf03607fde38'],\n    blockExplorerUrls: ['https://kovan.etherscan.io'],\n    type: 'ERC20'\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { verifyMessage } from '@ethersproject/wallet'\nimport { Web3Provider } from '@ethersproject/providers'\n\nimport detectEthereumProvider from '@metamask/detect-provider'\n\nimport naclUtil from 'tweetnacl-util'\nimport nacl from 'tweetnacl'\n\nimport LIT from '../abis/LIT.json'\nimport { LIT_CHAINS } from '../lib/constants'\n\nconst AUTH_SIGNATURE_BODY = 'I am creating an account to use LITs at {{timestamp}}'\n\nfunction chainHexIdToChainName(chainHexId) {\n  for (let i = 0; i < Object.keys(LIT_CHAINS).length; i++) {\n    const chainName = Object.keys(LIT_CHAINS)[i]\n    const litChainHexId = '0x' + LIT_CHAINS[chainName].chainId.toString('16')\n    if (litChainHexId === chainHexId) {\n      return chainName\n    }\n  }\n}\n\nexport async function connectWeb3() {\n  if (typeof window.ethereum === 'undefined') {\n    throw new Error({ errorCode: 'no_wallet', message: 'No web3 wallet was found' })\n  }\n\n  const provider = await detectEthereumProvider()\n\n  // trigger metamask popup\n  const accounts = await provider.request({ method: 'eth_requestAccounts' })\n  const account = accounts[0].toLowerCase()\n\n  return { web3: provider, account }\n}\n\n// taken from the excellent repo https://github.com/zmitton/eth-proof\n// export async function getMerkleProof({ tokenAddress, balanceStorageSlot, tokenId }) {\n//   console.log(`getMerkleProof for { tokenAddress, balanceStorageSlot, tokenId } ${tokenAddress}, ${balanceStorageSlot}, ${tokenId}`)\n//   const { web3, account } = await connectWeb3()\n//   console.log(`getting mappingAt(${balanceStorageSlot}, ${tokenId}, ${account})`)\n//   const storageAddress = mappingAt(balanceStorageSlot, parseInt(tokenId), account)\n//   console.log('storageAddress: ', storageAddress)\n\n//   // you may need to try the below twicce because sometimes the proof isn't available for the latest block on polygon because the node just isn't fast enough\n//   let tries = 0\n//   let rpcProof = null\n//   let rpcBlock = null\n//   while (!rpcProof && tries < 6) {\n//     try {\n//       if (!rpcBlock) {\n//         // only set the rpc block once\n//         rpcBlock = await web3.request({ method: 'eth_getBlockByNumber', params: ['latest', false] })\n//         console.log('rpcBlock: ', rpcBlock)\n//       }\n//       rpcProof = await web3.request({ method: 'eth_getProof', params: [tokenAddress, [storageAddress], rpcBlock.number] })\n//       console.log('rpcProof: ', rpcProof)\n//     } catch (e) {\n//       console.log(e)\n//       console.log(`error getting rpc proof, have made ${tries} attempts`)\n//       tries++\n//     }\n//   }\n\n//   return {\n//     header: rpcBlock,\n//     accountProof: rpcProof.accountProof,\n//     storageProof: rpcProof.storageProof[0].proof,\n//     blockHash: rpcBlock.hash\n//   }\n// }\n\n// export async function checkAndDeriveKeypair () {\n//   let keypair = localStorage.getItem('lit-keypair')\n//   if (!keypair) {\n//     await deriveEncryptionKeys()\n//     keypair = localStorage.getItem('lit-keypair')\n//   }\n//   keypair = JSON.parse(keypair)\n//   const { web3, account } = await connectWeb3()\n//   // make sure we are on the right account\n//   if (account !== keypair.address) {\n//     await deriveEncryptionKeys()\n//     keypair = localStorage.getItem('lit-keypair')\n//     keypair = JSON.parse(keypair)\n//   }\n//   return keypair\n// }\n\n/**\n * Check for an existing cryptographic authentication signature and create one of it does not exist.  This is used to prove ownership of a given crypto wallet address to the LIT nodes.  The result is stored in LocalStorage so the user doesn't have to sign every time they perform an operation.\n * @param {Object} params\n * @param {string} params.chain The chain you want to use.  \"polygon\" and \"ethereum\" are currently supported.\n * @returns {AuthSig} The AuthSig created or retrieved\n */\nexport async function checkAndSignAuthMessage({ chain }) {\n  const { web3, account } = await connectWeb3()\n  const chainId = await web3.request({ method: 'eth_chainId', params: [] })\n  const selectedChain = LIT_CHAINS[chain]\n  const selectedChainId = '0x' + selectedChain.chainId.toString('16')\n  console.debug(`checkAndSignAuthMessage with chainId ${chainId} and chain set to ${chain} and selectedChain is `, selectedChain)\n  if (chainId !== selectedChainId) {\n    // the metamask chain switching thing does not work on mainnet\n    if (selectedChain.chainId !== 1) {\n      const data = [{\n        chainId: selectedChainId,\n        chainName: selectedChain.name,\n        nativeCurrency:\n        {\n          name: selectedChain.name,\n          symbol: selectedChain.symbol,\n          decimals: selectedChain.decimals\n        },\n        rpcUrls: selectedChain.rpcUrls,\n        blockExplorerUrls: selectedChain.blockExplorerUrls\n      }]\n      const res = await web3.request({ method: 'wallet_addEthereumChain', params: data }).catch()\n      if (res) {\n        console.log(res)\n      }\n    } else {\n      return { errorCode: 'wrong_chain' }\n    }\n  }\n  let authSig = localStorage.getItem('lit-auth-signature')\n  if (!authSig) {\n    await signAndSaveAuthMessage()\n    authSig = localStorage.getItem('lit-auth-signature')\n  }\n  authSig = JSON.parse(authSig)\n  // make sure we are on the right account\n  if (account !== authSig.address) {\n    await signAndSaveAuthMessage()\n    authSig = localStorage.getItem('lit-auth-signature')\n    authSig = JSON.parse(authSig)\n  }\n  return authSig\n}\n\nexport async function signAndSaveAuthMessage() {\n  const now = (new Date()).toISOString()\n  const body = AUTH_SIGNATURE_BODY.replace('{{timestamp}}', now)\n  const signedResult = await signMessage({ body })\n  localStorage.setItem('lit-auth-signature', JSON.stringify({\n    sig: signedResult.signature,\n    derivedVia: 'web3.eth.personal.sign',\n    signedMessage: body,\n    address: signedResult.address\n  }))\n  // store a keypair in localstorage for communication with sgx\n  const commsKeyPair = nacl.box.keyPair()\n  localStorage.setItem('lit-comms-keypair', JSON.stringify({\n    publicKey: naclUtil.encodeBase64(commsKeyPair.publicKey),\n    secretKey: naclUtil.encodeBase64(commsKeyPair.secretKey)\n  }))\n  console.log('generated and saved lit-comms-keypair')\n}\n\n/**\n * @typedef {Object} AuthSig\n * @property {string} sig - The actual hex-encoded signature\n * @property {string} derivedVia - The method used to derive the signature\n * @property {string} signedMessage - The message that was signed\n * @property {string} address - The crypto wallet address that signed the message\n */\nexport async function signMessage({ body }) {\n  const { web3, account } = await connectWeb3()\n\n  console.log('signing with ', account)\n  const signature = await web3.request({ method: 'personal_sign', params: [account, body] })\n  const address = verifyMessage(body, signature).toLowerCase()\n\n  console.log('Signature: ', signature)\n  console.log('recovered address: ', address)\n\n  if (address !== account) {\n    const msg = `ruh roh, the user signed with a different address (${address}) then they\\'re using with web3 (${account}).  this will lead to confusion.`\n    console.error(msg)\n    alert('something seems to be wrong with your wallets message signing.  maybe restart your browser or your wallet.  your recovered sig address does not match your web3 account address')\n    throw new Error(msg)\n  }\n\n  return { signature, address }\n}\n\n// export async function decryptWithWeb3PrivateKey (encryptedData) {\n//   const { web3, account } = await connectWeb3()\n//   try {\n//     const decryptedMessage = ethereum\n//       .request({\n//         method: 'eth_decrypt',\n//         params: [encryptedData, account]\n//       })\n//     return decryptedMessage\n//   } catch (error) {\n//     console.log(error)\n//     return false\n//   }\n// }\n//\n// async function deriveKeysViaSignature () {\n//   const { signature, address } = await signMessage({ body: KEY_DERIVATION_SIGNATURE_BODY })\n//   console.log('Signed message: ' + signature)\n//\n//   // derive keypair\n//   const data = Buffer.from(signature.substring(2), 'hex')\n//   const hash = await crypto.subtle.digest('SHA-256', data)\n//   const uint8Hash = new Uint8Array(hash)\n//   const { publicKey, secretKey } = nacl.box.keyPair.fromSecretKey(uint8Hash)\n//   return {\n//     publicKey: naclUtil.encodeBase64(publicKey),\n//     secretKey: naclUtil.encodeBase64(secretKey)\n//   }\n// }\n//\n// // this only works on metamask :(\n// async function deriveKeysViaPrivateKey () {\n//   try {\n//     const { web3, account } = await connectWeb3()\n//     /* global ethereum */\n//     /* eslint no-undef: \"error\" */\n//     const publicKey = await ethereum\n//       .request({\n//         method: 'eth_getEncryptionPublicKey',\n//         params: [account] // you must have access to the specified account\n//       })\n//     return { publicKey }\n//   } catch (error) {\n//     console.log(error)\n//     if (error.code === 4001) {\n//       // EIP-1193 userRejectedRequest error\n//       console.log(\"We can't encrypt anything without the key.\")\n//       error('You must accept the metamask request to derive your public encryption key')\n//     } else {\n//       console.error(error)\n//     }\n//     return { error }\n//   }\n// }\n//\n// export async function deriveEncryptionKeys () {\n//   let keypair = {}\n//   // key derivation via metamask is more desirable because then even this SDK can't see the secret key :-D\n//   const { error, publicKey } = await deriveKeysViaPrivateKey()\n//   if (!error) {\n//     keypair = {\n//       publicKey,\n//       derivedVia: 'eth_getEncryptionPublicKey'\n//     }\n//   } else {\n//     const { publicKey, secretKey } = await deriveKeysViaSignature()\n//     keypair = {\n//       publicKey,\n//       secretKey,\n//       derivedVia: 'web3.eth.personal.sign',\n//       signedMessage: KEY_DERIVATION_SIGNATURE_BODY\n//     }\n//   }\n//\n//   const { web3, account } = await connectWeb3()\n//   keypair.address = account\n//\n//   console.log('public key: ' + keypair.publicKey)\n//   const asString = JSON.stringify(keypair)\n//   localStorage.setItem('lit-keypair', asString)\n//\n//   // is it already saved on the server?\n//   const { pubkey, errorCode } = await getPublicKey({\n//     address: account\n//   })\n//   if (errorCode === 'not_found' || pubkey !== keypair.publicKey) {\n//     // add it\n//     const msg = `I am saving my public key so that others can send me LITs.  It is ${pubkey}`\n//     const res = await signMessage({ body: msg })\n//     await savePublicKey({\n//       sig: res.signature,\n//       msg,\n//       pubkey: keypair.publicKey\n//     })\n//   }\n// }\n\n/**\n * This function mints a LIT using our pre-deployed token contracts.  You may our contracts, or you may supply your own.  Our contracts are ERC1155 tokens on Polygon and Ethereum.  Using these contracts is the easiest way to get started.\n * @param {Object} params\n * @param {string} params.chain The chain to mint on.  \"ethereum\" and \"polygon\" are currently supported.\n * @param {number} params.quantity The number of tokens to mint.  Note that these will be fungible, so they will not have serial numbers.\n * @returns {Object} The txHash, tokenId, tokenAddress, mintingAddress, and authSig.\n */\nexport async function mintLIT({ chain, quantity }) {\n  console.log(`minting ${quantity} tokens on ${chain}`)\n  try {\n    const authSig = await checkAndSignAuthMessage({ chain })\n    if (authSig.errorCode) {\n      return authSig\n    }\n    const { web3, account } = await connectWeb3()\n    const tokenAddress = LIT_CHAINS[chain].contractAddress\n    const contract = new Contract(tokenAddress, LIT.abi, new Web3Provider(web3).getSigner())\n    console.log('sending to chain...')\n    const tx = await contract.mint(quantity)\n    console.log('sent to chain.  waiting to be mined...')\n    const txReceipt = await tx.wait()\n    console.log('txReceipt: ', txReceipt)\n    const tokenId = txReceipt.events[0].args[3].toNumber()\n    return {\n      txHash: txReceipt.transactionHash,\n      tokenId,\n      tokenAddress,\n      mintingAddress: account,\n      authSig\n    }\n  } catch (error) {\n    console.log(error)\n    if (error.code === 4001) {\n      // EIP-1193 userRejectedRequest error\n      console.log('User rejected request')\n      return { errorCode: 'user_rejected_request' }\n    } else {\n      console.error(error)\n    }\n    return { errorCode: 'unknown_error' }\n  }\n}\n\n/**\n * Finds the tokens that the current user owns from the predeployed LIT contracts\n * @param {Object} params\n * @param {string} params.chain The chain that was minted on. \"ethereum\" and \"polygon\" are currently supported.\n * @param {number} params.accountAddress The account address to check\n * @returns {array} The token ids owned by the accountAddress\n */\nexport async function findLITs() {\n  console.log('findLITs')\n\n  try {\n    const { web3, account } = await connectWeb3()\n    const chainHexId = await web3.request({ method: 'eth_chainId', params: [] })\n    const chain = chainHexIdToChainName(chainHexId)\n    const tokenAddress = LIT_CHAINS[chain].contractAddress\n    const contract = new Contract(tokenAddress, LIT.abi, new Web3Provider(web3).getSigner())\n    console.log('getting maxTokenid')\n    const maxTokenId = await contract.tokenIds()\n    const accounts = []\n    const tokenIds = []\n    for (let i = 0; i <= maxTokenId; i++) {\n      accounts.push(account)\n      tokenIds.push(i)\n    }\n    console.log('getting balanceOfBatch')\n    const balances = await contract.balanceOfBatch(accounts, tokenIds)\n    // console.log('balances', balances)\n    const tokenIdsWithNonzeroBalances = balances.map((b, i) => b.toNumber() === 0 ? null : i).filter(b => b !== null)\n    return { tokenIds: tokenIdsWithNonzeroBalances, chain }\n  } catch (error) {\n    console.log(error)\n    if (error.code === 4001) {\n      // EIP-1193 userRejectedRequest error\n      console.log('User rejected request')\n      return { errorCode: 'user_rejected_request' }\n    } else {\n      console.error(error)\n    }\n    return { errorCode: 'unknown_error' }\n  }\n}\n\n/**\n * Send a token to another account\n * @param {Object} params\n * @param {string} params.tokenMetadata The token metadata of the token to be transferred.  Should include tokenId, tokenAddress, and chain\n * @param {number} params.to The account address to send the token to\n * @returns {Object} Success or error\n */\nexport async function sendLIT({ tokenMetadata, to }) {\n  console.log('sendLIT for ', tokenMetadata)\n\n  try {\n    const { web3, account } = await connectWeb3()\n    const { tokenAddress, tokenId, chain } = tokenMetadata\n    const contract = new Contract(tokenAddress, LIT.abi, new Web3Provider(web3).getSigner())\n    console.log('transferring')\n    const maxTokenId = await contract.safeTransferFrom(account, to, tokenId, 1, [])\n    console.log('sent to chain')\n    return { success: true }\n  } catch (error) {\n    console.log(error)\n    if (error.code === 4001) {\n      // EIP-1193 userRejectedRequest error\n      console.log('User rejected request')\n      return { errorCode: 'user_rejected_request' }\n    } else {\n      console.error(error)\n    }\n    return { errorCode: 'unknown_error' }\n  }\n}\n","import { LIT_CHAINS } from '../lib/constants'\nimport { unlockLitWithKey } from './lit'\n\nexport const listenForChildFrameMessages = async () => {\n  console.log('calling listenForChildFrameMessages from ' + window.origin)\n  // listen for requests from child frames\n  window.addEventListener('message', async (event) => {\n    // console.log('onMessage in sdk: ', event)\n\n    let childFrameThatSentMessageIndex = false\n    for (let i = 0; i < frames.length; i++) {\n      if (frames[i] === event.source) {\n        childFrameThatSentMessageIndex = i\n      }\n    }\n\n    if (childFrameThatSentMessageIndex !== false) {\n      console.log('onMessage in parent: ', event)\n\n      const { command, params } = event.data\n      if (command === 'LIT_SYN') {\n        window.frames[childFrameThatSentMessageIndex].postMessage({ response: 'LIT_ACK' }, '*')\n        return\n      }\n      //       if (command === 'signAndGetEncryptionKey') {\n      //         authSig = await checkAndSignAuthMessage({ chain: params.chain })\n      //         if (authSig.errorCode && authSig.errorCode === 'wrong_chain') {\n      //           alert('You are connected to the wrong blockchain.  Please switch your metamask to ' + params.chain)\n      //         }\n      //\n      //         // get the merkle proof\n      //         const { balanceStorageSlot } = LIT_CHAINS[params.chain]\n      //         try {\n      //           merkleProof = await getMerkleProof({ tokenAddress: params.tokenAddress, balanceStorageSlot, tokenId: params.tokenId })\n      //         } catch (e) {\n      //           console.log(e)\n      //           alert('Error - could not obtain merkle proof.  Some nodes do not support this operation yet.  Please try another ETH node.')\n      //           return\n      //         }\n      //         const encryptionKey = await window.litNodeClient.getEncryptionKey({\n      //           ...params, authSig, merkleProof\n      //         })\n      //         window.frames[childFrameThatSentMessageIndex].postMessage({ respondingToCommand: command, encryptionKey }, '*')\n      //         return\n      //       }\n      if (event.data.target === 'LitNodeClient') {\n        // forward this on to the nodes\n        if (command === 'getEncryptionKey') {\n          const encryptionKey = await window.litNodeClient.getEncryptionKey({\n            ...params\n          })\n          window.frames[childFrameThatSentMessageIndex].postMessage({ respondingToCommand: command, encryptionKey }, '*')\n        }\n      }\n    }\n  }, false)\n}\n\nexport const listenForFrameParentMessages = async () => {\n  console.log('calling listenForFrameParentMessages from ' + window.origin)\n  // listen for requests from child frames\n  window.addEventListener('message', async (event) => {\n    const messageIsFromFrameParent = event.source === window.parent\n\n    if (messageIsFromFrameParent) {\n      console.log('onMessage in frame: ', event)\n    }\n\n    // console.log('messageIsFromFrameParent: ', messageIsFromFrameParent)\n\n    if (messageIsFromFrameParent) {\n      const { response, respondingToCommand } = event.data\n      if (response === 'LIT_ACK') {\n        window.useLitPostMessageProxy = true\n        return\n      }\n      if (respondingToCommand === 'getEncryptionKey') {\n        const { encryptionKey } = event.data\n        unlockLitWithKey({ symmetricKey: encryptionKey })\n      }\n    }\n  }, false)\n}\n\nexport const sendMessageToFrameParent = (data) => {\n  window.parent.postMessage(data, '*')\n}\n\nexport const inIframe = () => {\n  try {\n    return window.self !== window.top\n  } catch (e) {\n    return true\n  }\n}\n","/**\n * Convert a file to a data URL, which could then be embedded in a LIT.  A data URL is a string representation of a file.\n * @param {File} file The file to turn into a data url\n * @returns {string} The data URL.  This is a string representation that can be used anywhere the original file would be used.\n */\nexport function fileToDataUrl (file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader()\n    reader.onloadend = () => {\n      resolve(reader.result)\n    }\n    reader.readAsDataURL(file)\n  })\n}\n\n/**\n * Inject an iFrame into the current page that will display a LIT.  This function safely sandboxes the content in the iFrame so that the LIT cannot see cookies or localStorage of the parent website.\n * @param {Object} params\n * @param {Object} params.symmetricKey The decryption key obtained by calling \"LitNodeClient.getEncryptionKey\"\n * @returns {promise} A promise that will resolve when the LIT is unlocked\n */\nexport function injectViewerIFrame ({ destinationId, title, fileUrl, className }) {\n  if (fileUrl.includes('data:')) {\n    // data urls are not safe, refuse to do this\n    throw new Error('You can not inject an iFrame with a data url.  Try a regular https URL.')\n  }\n\n  const url = new URL(fileUrl)\n  if (url.host.toLowerCase() === window.location.host.toLowerCase()) {\n    throw new Error('You cannot host a LIT on the same domain as the parent webpage.  This is because iFrames with the same origin have access to localstorage and cookies in the parent webpage which is unsafe')\n  }\n\n  const iframe = document.createElement('iframe')\n  iframe.src = fileUrl\n  iframe.title = title\n  iframe.sandbox = 'allow-forms allow-scripts allow-popups  allow-modals allow-popups-to-escape-sandbox allow-same-origin'\n  iframe.loading = 'lazy'\n  iframe.allow = 'accelerometer; ambient-light-sensor; autoplay; battery; camera; display-capture; encrypted-media; fullscreen; geolocation; gyroscope; layout-animations; legacy-image-formats; magnetometer; microphone; midi; payment; picture-in-picture; publickey-credentials-get; sync-xhr; usb; vr; screen-wake-lock; web-share; xr-spatial-tracking'\n  if (className) {\n    iframe.className = className\n  }\n  document.getElementById(destinationId).appendChild(iframe)\n}\n","import JSZip from 'jszip'\nimport uint8arrayFromString from 'uint8arrays/from-string'\nimport uint8arrayToString from 'uint8arrays/to-string'\n\nimport {\n  importSymmetricKey,\n  generateSymmetricKey,\n  encryptWithSymmetricKey,\n  decryptWithSymmetricKey,\n  compareArrayBuffers\n} from './crypto'\n\nimport {\n  checkAndSignAuthMessage,\n  getMerkleProof\n} from './eth'\n\nimport {\n  sendMessageToFrameParent\n} from './frameComms'\n\nimport { fileToDataUrl } from './browser'\nimport { LIT_CHAINS } from '../lib/constants'\n\nconst PACKAGE_CACHE = {}\n\n/**\n * Zip and encrypt a string.  This is used to encrypt any string that is to be locked and included in a LIT.  For example, on MintLIT, we render the HTML/CSS containing the locked files and a grid to view them to a string using ReactDOMServer.renderToString().\n * @param {string} string The string to zip and encrypt\n * @returns {Object} The encryptedZip as a Blob and the symmetricKey used to encrypt it, as a JSON string.  The encrypted zip will contain a single file called \"string.txt\"\n */\nexport async function zipAndEncryptString (string) {\n  const zip = new JSZip()\n  zip.file('string.txt', string)\n  return encryptZip(zip)\n}\n\n/**\n * Zip and encrypt multiple files.\n * @param {array} files An array of the files you wish to zip and encrypt\n * @returns {Object} The encryptedZip as a Blob and the symmetricKey used to encrypt it, as a JSON string.  The encrypted zip will contain a folder \"encryptedAssets\" and all of the files will be inside it.\n */\nexport async function zipAndEncryptFiles (files) {\n  // let's zip em\n  const zip = new JSZip()\n  for (let i = 0; i < files.length; i++) {\n    zip.folder('encryptedAssets').file(files[i].name, files[i])\n  }\n  return encryptZip(zip)\n}\n\n/**\n * Decrypt and unzip a zip that was created using encryptZip, zipAndEncryptString, or zipAndEncryptFiles.\n * @param {Blob} encryptedZipBlob The encrypted zip as a Blob\n * @param {Object} symmKey An object containing the symmetric key used that will be used to decrypt this zip.\n * @returns {Array} An array of the decrypted files inside the zip.\n */\nexport async function decryptZip (encryptedZipBlob, symmKey) {\n  // const keypair = await checkAndDeriveKeypair()\n\n  // console.log('Got keypair out of localstorage: ' + keypair)\n  // const privkey = keypair.secretKey\n\n  // let decryptedSymmKey = await decryptWithWeb3PrivateKey(symmKey)\n  // if (!decryptedSymmKey) {\n  //   // fallback to trying the private derived via signature\n  //   console.log('probably not metamask')\n  //   decryptedSymmKey = decryptWithPrivkey(symmKey, privkey)\n  // }\n  // console.log('decrypted', decryptedSymmKey)\n\n  // import the decrypted symm key\n  const importedSymmKey = await importSymmetricKey(symmKey)\n\n  const decryptedZipArrayBuffer = await decryptWithSymmetricKey(\n    encryptedZipBlob,\n    importedSymmKey\n  )\n\n  // unpack the zip\n  const zip = new JSZip()\n  const unzipped = await zip.loadAsync(decryptedZipArrayBuffer)\n\n  // load the files into data urls with the metadata attached\n  // const files = await Promise.all(unzipped.files.map(async f => {\n  //   // const dataUrl = await fileToDataUrl(f)\n  //   return {\n  //     type: f.type,\n  //     name: f.name,\n  //     file: f\n  //   }\n  // }))\n\n  return unzipped.files\n}\n\n/**\n * Encrypt a zip file created with JSZip using a new random symmetric key via WebCrypto.\n * @param {JSZip} zip The JSZip instance to encrypt\n * @returns {Object} The encryptedZip as a Blob and the symmetricKey used to encrypt it, as a JSON string.\n */\nexport async function encryptZip (zip) {\n  const zipBlob = await zip.generateAsync({ type: 'blob' })\n  const zipBlobArrayBuffer = await zipBlob.arrayBuffer()\n  console.log('blob', zipBlob)\n\n  const symmKey = await generateSymmetricKey()\n  const encryptedZipBlob = await encryptWithSymmetricKey(\n    symmKey,\n    zipBlobArrayBuffer\n  )\n\n  // to download the encrypted zip file for testing, uncomment this\n  // saveAs(encryptedZipBlob, 'encrypted.bin')\n\n  const exportedSymmKey = new Uint8Array(await crypto.subtle.exportKey('raw', symmKey))\n  console.log('exportedSymmKey in hex', uint8arrayToString(exportedSymmKey, 'base16'))\n\n  // encrypt the symmetric key with the\n  // public key derived from the eth wallet\n  // const keypair = await checkAndDeriveKeypair()\n  // const pubkey = keypair.publicKey\n  // const privkey = keypair.secretKey\n\n  // encrypt symm key\n  // const encryptedSymmKeyData = encryptWithPubkey(pubkey, JSON.stringify(exportedSymmKey), 'x25519-xsalsa20-poly1305')\n  // const packed = JSON.stringify(encryptedSymmKeyData)\n\n  //   console.log('packed symmetric key ', packed)\n  //   const unpacked = JSON.parse(packed)\n  //   // test decrypt\n  //   const decryptedSymmKey = decryptWithPrivkey(unpacked, privkey)\n  //   console.log('decrypted', decryptedSymmKey)\n  //\n  //   // import the decrypted symm key\n  //   const importedSymmKey = await importSymmetricKey(decryptedSymmKey)\n  //\n  //   const decryptedZipArrayBuffer = await decryptWithSymmetricKey(\n  //     encryptedZipBlob,\n  //     importedSymmKey\n  //   )\n  //\n  //   // compare zip before and after as a sanity check\n  //   const isEqual = compareArrayBuffers(\n  //     zipBlobArrayBuffer,\n  //     decryptedZipArrayBuffer\n  //   )\n  //   console.log('Zip before and after decryption are equal: ', isEqual)\n  //   if (!isEqual) {\n  //     throw new Error('Decrypted zip does not match original zip.  Something is wrong.')\n  //   }\n\n  // to download the zip, for testing, uncomment this\n  //   const decryptedBlob = new Blob(\n  //     [decryptedZipArrayBuffer],\n  //     { type: 'application/zip' }\n  //   )\n  //   console.log('decrypted blob', decryptedBlob)\n  //\n  //   saveAs(decryptedBlob, 'decrypted.zip')\n  // console.log('saved')\n\n  return {\n    symmetricKey: exportedSymmKey,\n    encryptedZip: encryptedZipBlob\n  }\n}\n\nasync function getNpmPackage (packageName) {\n  // console.log('getting npm package: ' + packageName)\n  if (PACKAGE_CACHE[packageName]) {\n    // console.log('found in cache')\n    return PACKAGE_CACHE[packageName]\n  }\n\n  const resp = await fetch('https://unpkg.com/' + packageName)\n  if (!resp.ok) {\n    console.log('error with response: ', resp)\n    throw Error(resp.statusText)\n  }\n  const blob = await resp.blob()\n  // console.log('got blob', blob)\n  const dataUrl = await fileToDataUrl(blob)\n  // console.log('got dataUrl', dataUrl)\n  PACKAGE_CACHE[packageName] = dataUrl\n  return dataUrl\n}\n\n/**\n * Create a ready-to-go LIT using provided HTML/CSS body and an encrypted zip data url.  You need to design your LIT with HTML and CSS, and provide an unlock button with the id \"unlockButton\" inside your HTML.  This function will handle the rest.\n * @param {Object} params\n * @param {string} params.title The title that will be used for the title tag in the outputted HTML\n * @param {number} params.htmlBody The HTML body for the locked state of the LIT.  All users will be able to see this HTML.  This HTML must have a button with an id of \"unlockButton\" which will be automatically set up to decrypt and load the encryptedZipDataUrl\n * @param {string} params.css Any CSS you would like to include in the outputted HTML\n * @param {number} params.encryptedZipDataUrl a data URL of the encrypted zip that contains the locked content that only token holders will be able to view.\n * @param {string} params.tokenAddress The token address of the corresponding NFT for this LIT.  ERC721 and ERC 1155 tokens are currently supported.\n * @param {number} params.tokenId The ID of the token of the corresponding NFT for this LIT.  Only holders of this token ID will be able to unlock and decrypt this LIT.\n * @param {string} params.chain The chain that the corresponding NFT was minted on.  \"ethereum\" and \"polygon\" are currently supported.\n * @param {Array} [params.npmPackages=[]] An array of strings of NPM package names that should be embedded into this LIT.  These packages will be pulled down via unpkg, converted to data URLs, and embedded in the LIT HTML.  You can include any packages from npmjs.com.\n * @returns {string} The HTML string that is now a LIT.  You can send this HTML around and only token holders will be able to unlock and decrypt the content inside it.  Included in the HTML is this LIT JS SDK itself, the encrypted locked content, an automatic connection to the LIT nodes network, and a handler for a button with id \"unlockButton\" which will perform the unlock operation when clicked.\n */\nexport async function createHtmlLIT ({\n  title,\n  htmlBody,\n  css,\n  encryptedZipDataUrl,\n  accessControlConditions,\n  encryptedSymmetricKey,\n  chain,\n  npmPackages = []\n}) {\n  // uncomment this to embed the LIT JS SDK directly instead of retrieving it from unpkg when a user views the LIT\n  // npmPackages.push('lit-js-sdk')\n  // console.log('createHtmlLIT with npmPackages', npmPackages)\n  let scriptTags = ''\n  for (let i = 0; i < npmPackages.length; i++) {\n    const scriptDataUrl = await getNpmPackage(npmPackages[i])\n    const tag = `<script src=\"${scriptDataUrl}\"></script>\\n`\n    scriptTags += tag\n  }\n\n  // console.log('scriptTags: ', scriptTags)\n\n  return `\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>${title}</title>\n    <style id=\"jss-server-side\">${css}</style>\n    ${scriptTags}\n    <script>\n      var encryptedZipDataUrl = \"${encryptedZipDataUrl}\"\n      var accessControlConditions = ${JSON.stringify(accessControlConditions)}\n      var chain = \"${chain}\"\n      var encryptedSymmetricKey = \"${uint8arrayToString(encryptedSymmetricKey, 'base16')}\"\n      var locked = true\n      var useLitPostMessageProxy = false\n\n      document.addEventListener('lit-ready', function(){\n        var unlockButton = document.getElementById('unlockButton')\n        if (unlockButton) {\n          unlockButton.disabled = false\n        }\n\n        var loadingSpinner = document.getElementById('loadingSpinner')\n        if (loadingSpinner) {\n          loadingSpinner.style = 'display: none;'\n        }\n\n        var loadingText = document.getElementById('loadingText')\n        if (loadingText){\n          loadingText.innerText = ''\n        }\n      })\n    </script>\n    <script onload='LitJsSdk.default.litJsSdkLoadedInALIT()' src=\"https://jscdn.litgateway.com/index.web.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\">${htmlBody}</div>\n    <script>\n      var unlockButton = document.getElementById('unlockButton')\n      unlockButton.onclick = function() {\n        LitJsSdk.default.toggleLock()\n      }\n      unlockButton.disabled = true\n    </script>\n  </body>\n</html>\n  `\n}\n\n/**\n * Lock and unlock the encrypted content inside a LIT.  This content is only viewable by holders of the NFT that corresponds to this LIT.  Locked content will be decrypted and placed into the HTML element with id \"mediaGridHolder\".  The HTML element with the id \"lockedHeader\" will have it's text automatically changed to LOCKED or UNLOCKED to denote the state of the LIT.  Note that if you're creating a LIT using the createHtmlLIT function, you do not need to use this function, because this function is automatically bound to any button in your HTML with the id \"unlockButton\".\n * @returns {Promise} the promise will resolve when the LIT has been unlocked or an error message has been shown informing the user that they are not authorized to unlock the LIT\n */\nexport async function toggleLock () {\n  const mediaGridHolder = document.getElementById('mediaGridHolder')\n  const lockedHeader = document.getElementById('lockedHeader')\n\n  if (window.locked) {\n    // save public content before decryption, so we can toggle back to the\n    // locked state in the future\n    window.publicContent = mediaGridHolder.innerHTML\n\n    if (!window.useLitPostMessageProxy && !window.litNodeClient.ready) {\n      alert('The LIT network is still connecting.  Please try again in about 10 seconds.')\n      return\n    }\n\n    const authSig = await checkAndSignAuthMessage({ chain: window.chain })\n    if (authSig.errorCode && authSig.errorCode === 'wrong_chain') {\n      alert('You are connected to the wrong blockchain.  Please switch your metamask to ' + window.chain)\n      return\n    }\n\n    // get the merkle proof\n    // const { balanceStorageSlot } = LIT_CHAINS[window.chain]\n    // let merkleProof = null\n    // try {\n    //   merkleProof = await getMerkleProof({ tokenAddress: window.tokenAddress, balanceStorageSlot, tokenId: window.tokenId })\n    // } catch (e) {\n    //   console.log(e)\n    //   alert('Error - could not obtain merkle proof.  Some nodes do not support this operation yet.  Please try another ETH node.')\n    //   return\n    // }\n\n    if (window.useLitPostMessageProxy) {\n      // instead of asking the network for the key part, ask the parent frame\n      // the parentframe will then call unlockLit() with the encryption key\n      sendMessageToFrameParent({ command: 'getEncryptionKey', target: 'LitNodeClient', params: { tokenAddress: window.tokenAddress, tokenId: window.tokenId, chain: window.chain, authSig } })\n      return\n    }\n\n    // get the encryption key\n    const symmetricKey = await window.litNodeClient.getEncryptionKey({\n      accessControlConditions: window.accessControlConditions,\n      toDecrypt: window.encryptedSymmetricKey,\n      authSig,\n      chain: window.chain\n    })\n\n    await unlockLitWithKey({ symmetricKey })\n  } else {\n    mediaGridHolder.innerHTML = window.publicContent\n    lockedHeader.innerText = 'LOCKED'\n    window.locked = true\n  }\n}\n\n/**\n * Manually unlock a LIT with a symmetric key.  You can obtain this key by calling \"checkAndSignAuthMessage\" to get an authSig, then calling \"getMerkleProof\" to get the merkle proof, and then \"LitNodeClient.getEncryptionKey\" to get the key.  If you want to see an example, check out the implementation of \"toggleLock\" which does all those operations and then calls this function at the end (unlockLitWithKey)\n * @param {Object} params\n * @param {Object} params.symmetricKey The decryption key obtained by calling \"LitNodeClient.getEncryptionKey\"\n * @returns {promise} A promise that will resolve when the LIT is unlocked\n */\nexport async function unlockLitWithKey ({ symmetricKey }) {\n  const mediaGridHolder = document.getElementById('mediaGridHolder')\n  const lockedHeader = document.getElementById('lockedHeader')\n\n  // convert data url to blob\n  const encryptedZipBlob = await (await fetch(window.encryptedZipDataUrl)).blob()\n  const decryptedFiles = await decryptZip(encryptedZipBlob, symmetricKey)\n  const mediaGridHtmlBody = await decryptedFiles['string.txt'].async('text')\n  mediaGridHolder.innerHTML = mediaGridHtmlBody\n  lockedHeader.innerText = 'UNLOCKED'\n  window.locked = false\n}\n","import pako from 'pako'\n\n// Contants\n\nconst skLen = 32 // bytes\nconst pkLen = 48 // bytes\nconst sigLen = 96 // bytes\nconst maxMsgLen = 1049600 // bytes\nconst maxCtLen = 1049600 // bytes\nconst decryptionShareLen = 48 // bytes\n\n// the number of bytes in a row derived from a BivarPoly\n// which varies depending on the threshold.\nconst row_sizes_by_threshold = [\n  40, // threshold 0\n  72, // threshold 1\n  104, // threshold 2\n  136, // threshold 3\n  168, // threshold 4\n  200, // threshold 5\n  232, // threshold 6\n  264, // threshold 7\n  296, // threshold 8\n  328, // threshold 9\n  360 // threshold 10\n]\n\n// the number of bytes in a commitment derived from a BivarPoly\n// which varies depending on the threshold.\nconst commitment_sizes_by_threshold = [\n  56, // threshold 0\n  104, // threshold 1\n  152, // threshold 2\n  200, // threshold 3\n  248, // threshold 4\n  296, // threshold 5\n  344, // threshold 6\n  392, // threshold 7\n  440, // threshold 8\n  488, // threshold 9\n  536 // threshold 10\n]\n\n// the number of bytes in the master secret key (Poly)\n// which varies depending on the threshold.\nconst poly_sizes_by_threshold = [\n  40, // threshold 0\n  72, // threshold 1\n  104, // threshold 2\n  136, // threshold 3\n  168, // threshold 4\n  200, // threshold 5\n  232, // threshold 6\n  264, // threshold 7\n  296, // threshold 8\n  328, // threshold 9\n  360 // threshold 10\n]\n\n// Encoding conversions\n\n// modified from https://stackoverflow.com/a/11058858\nfunction asciiToUint8Array(a) {\n  let b = new Uint8Array(a.length);\n  for (let i = 0; i < a.length; i++) {\n    b[i] = a.charCodeAt(i);\n  }\n  return b;\n}\n// https://stackoverflow.com/a/19102224\n// TODO resolve RangeError possibility here, see SO comments\nfunction uint8ArrayToAscii(a) {\n  return String.fromCharCode.apply(null, a);\n}\n// https://stackoverflow.com/a/50868276\nfunction hexToUint8Array(h) {\n  if (h.length == 0) {\n    return new Uint8Array();\n  }\n  return new Uint8Array(h.match(/.{1,2}/g).map(byte => parseInt(byte, 16)));\n}\nfunction uint8ArrayToHex(a) {\n  return a.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\n}\nfunction uint8ArrayToByteStr(a) {\n  return \"[\" + a.join(\", \") + \"]\";\n}\n// https://stackoverflow.com/a/12713326\nfunction uint8ArrayToBase64(a) {\n  return btoa(String.fromCharCode.apply(null, a));\n}\nfunction base64ToUint8Array(b) {\n  return new Uint8Array(atob(b).split(\"\").map(function (c) {\n    return c.charCodeAt(0);\n  }));\n}\n\n// threshold_crypto wasm calls. Since they operate on single bytes at a time\n// it's handy to have helpers to do the required looping.\n\nlet isWasming = false\nexport const wasmBlsSdkHelpers = new function () {\n  // s is secret key unit8array\n  this.sk_bytes_to_pk_bytes = function (s) {\n    isWasming = true\n    const pkBytes = []\n    try {\n      // set sk bytes\n      for (let i = 0; i < s.length; i++) {\n        wasmExports.set_sk_byte(i, s[i])\n      }\n      // convert into pk bytes\n      wasmExports.derive_pk_from_sk()\n      // read pk bytes\n      for (let i = 0; i < pkLen; i++) {\n        const pkByte = wasmExports.get_pk_byte(i)\n        pkBytes.push(pkByte)\n      }\n    } catch (e) {\n      isWasming = false\n      throw ('Failed to generate')\n    }\n    isWasming = false\n    return pkBytes\n  }\n\n  // s is secret key uint8array\n  // m is message uint8array\n  this.sign_msg = function (s, m) {\n    isWasming = true\n    const sigBytes = []\n    try {\n      // set secret key bytes\n      for (let i = 0; i < s.length; i++) {\n        wasmExports.set_sk_byte(i, s[i])\n      }\n      // set message bytes\n      for (let i = 0; i < m.length; i++) {\n        wasmExports.set_msg_byte(i, m[i])\n      }\n      // sign message\n      wasmExports.sign_msg(m.length)\n      // get signature bytes\n      for (let i = 0; i < sigLen; i++) {\n        const sigByte = wasmExports.get_sig_byte(i)\n        sigBytes.push(sigByte)\n      }\n    } catch (e) {\n      isWasming = false\n    }\n    isWasming = false\n    return sigBytes\n  }\n\n  // p is public key uint8array\n  // s is signature uint8array\n  // m is message uint8array\n  this.verify = function (p, s, m) {\n    isWasming = true\n    let verified = false\n    try {\n      // set public key bytes\n      for (let i = 0; i < p.length; i++) {\n        wasmExports.set_pk_byte(i, p[i])\n      }\n      // set signature bytes\n      for (let i = 0; i < s.length; i++) {\n        wasmExports.set_sig_byte(i, s[i])\n      }\n      // set message bytes\n      for (let i = 0; i < m.length; i++) {\n        wasmExports.set_msg_byte(i, m[i])\n      }\n      verified = wasmExports.verify(m.length)\n    } catch (e) {\n      isWasming = false\n    }\n    isWasming = false\n    return verified\n  }\n\n  this.set_rng_values = function () {\n    // Warning if no window.crypto available\n    if (!window.crypto) {\n      alert('Secure randomness not available in this browser, output is insecure.')\n      return\n    }\n    const RNG_VALUES_SIZE = wasmExports.get_rng_values_size()\n    const rngValues = new Uint32Array(RNG_VALUES_SIZE)\n    window.crypto.getRandomValues(rngValues)\n    for (let i = 0; i < rngValues.length; i++) {\n      wasmExports.set_rng_value(i, rngValues[i])\n    }\n  }\n\n  // p is public key uint8array\n  // m is message uint8array\n  this.encrypt = function (p, m) {\n    isWasming = true\n    const ctBytes = []\n    try {\n      wasmBlsSdkHelpers.set_rng_values()\n      // set public key bytes\n      for (let i = 0; i < p.length; i++) {\n        wasmExports.set_pk_byte(i, p[i])\n      }\n      // set message bytes\n      for (let i = 0; i < m.length; i++) {\n        wasmExports.set_msg_byte(i, m[i])\n      }\n      // generate strong random u64 used by encrypt\n      // encrypt the message\n      const ctSize = wasmExports.encrypt(m.length)\n      // get ciphertext bytes\n      for (let i = 0; i < ctSize; i++) {\n        const ctByte = wasmExports.get_ct_byte(i)\n        ctBytes.push(ctByte)\n      }\n    } catch (e) {\n      isWasming = false\n    }\n    isWasming = false\n    return Uint8Array.from(ctBytes)\n  }\n\n  // s is secret key uint8array\n  // c is message uint8array\n  this.decrypt = function (s, c) {\n    isWasming = true\n    const msgBytes = []\n    try {\n      // set secret key bytes\n      for (let i = 0; i < s.length; i++) {\n        wasmExports.set_sk_byte(i, s[i])\n      }\n      // set ciphertext bytes\n      for (let i = 0; i < c.length; i++) {\n        wasmExports.set_ct_byte(i, c[i])\n      }\n      const msgSize = wasmExports.decrypt(c.length)\n      // get message bytes\n      for (let i = 0; i < msgSize; i++) {\n        const msgByte = wasmExports.get_msg_byte(i)\n        msgBytes.push(msgByte)\n      }\n    } catch (e) {\n      isWasming = false\n    }\n    isWasming = false\n    return msgBytes\n  }\n\n  this.generate_poly = function (threshold) {\n    wasmBlsSdkHelpers.set_rng_values()\n    const polySize = poly_sizes_by_threshold[threshold]\n    wasmExports.generate_poly(threshold)\n    const polyBytes = []\n    for (let i = 0; i < polySize; i++) {\n      const polyByte = wasmExports.get_poly_byte(i)\n      polyBytes.push(polyByte)\n    }\n    return polyBytes\n  }\n\n  this.get_msk_bytes = function () {\n    const mskBytes = []\n    for (let i = 0; i < skLen; i++) {\n      const mskByte = wasmExports.get_msk_byte(i)\n      mskBytes.push(mskByte)\n    }\n    return mskBytes\n  }\n\n  this.get_mpk_bytes = function () {\n    const mpkBytes = []\n    for (let i = 0; i < pkLen; i++) {\n      const mpkByte = wasmExports.get_mpk_byte(i)\n      mpkBytes.push(mpkByte)\n    }\n    return mpkBytes\n  }\n\n  this.get_mc_bytes = function (threshold) {\n    const mcBytes = []\n    const mcSize = commitment_sizes_by_threshold[threshold]\n    for (let i = 0; i < mcSize; i++) {\n      const mcByte = wasmExports.get_mc_byte(i)\n      mcBytes.push(mcByte)\n    }\n    return mcBytes\n  }\n\n  this.set_mc_bytes = function (mcBytes) {\n    // set master commitment in wasm\n    for (let i = 0; i < mcBytes.length; i++) {\n      const v = mcBytes[i]\n      wasmExports.set_mc_byte(i, v)\n    }\n  }\n\n  this.get_skshare = function () {\n    const skshareBytes = []\n    for (let i = 0; i < skLen; i++) {\n      const skshareByte = wasmExports.get_skshare_byte(i)\n      skshareBytes.push(skshareByte)\n    }\n    return skshareBytes\n  }\n\n  this.get_pkshare = function () {\n    const pkshareBytes = []\n    for (let i = 0; i < pkLen; i++) {\n      const pkshareByte = wasmExports.get_pkshare_byte(i)\n      pkshareBytes.push(pkshareByte)\n    }\n    return pkshareBytes\n  }\n\n  this.combine_signatures = function (mcBytes, sigshares) {\n    // set master commitment in wasm\n    wasmBlsSdkHelpers.set_mc_bytes(mcBytes)\n    // set the signature shares\n    for (let shareIndex = 0; shareIndex < sigshares.length; shareIndex++) {\n      const share = sigshares[shareIndex]\n      const sigHex = share.shareHex\n      const sigBytes = hexToUint8Array(sigHex)\n      const sigIndex = share.shareIndex\n      for (let byteIndex = 0; byteIndex < sigBytes.length; byteIndex++) {\n        const sigByte = sigBytes[byteIndex]\n        // NB shareIndex is used instead of sigIndex so we can interate\n        // over both\n        // SHARE_INDEXES[i]\n        // and\n        // SIGNATURE_SHARE_BYTES[i*96:(i+1)*96]\n        wasmExports.set_signature_share_byte(byteIndex, shareIndex, sigByte)\n        wasmExports.set_share_indexes(shareIndex, sigIndex)\n      }\n    }\n    // combine the signatures\n    wasmExports.combine_signature_shares(sigshares.length, mcBytes.length)\n    // read the combined signature\n    const sigBytes = []\n    for (let i = 0; i < sigLen; i++) {\n      const sigByte = wasmExports.get_sig_byte(i)\n      sigBytes.push(sigByte)\n    }\n    return sigBytes\n  }\n\n  // s is secret key share bytes\n  // ct is ciphertext bytes\n  // uiShareIndex is the index of the share as it appears in the UI\n  // derivedShareIndex is the index of the share when derived from the poly\n  this.create_decryption_share = function (s, uiShareIndex, derivedShareIndex, ct) {\n    // set ct bytes\n    for (let i = 0; i < ct.length; i++) {\n      wasmExports.set_ct_byte(i, ct[i])\n    }\n    // set secret key share\n    for (let i = 0; i < s.length; i++) {\n      wasmExports.set_sk_byte(i, s[i])\n    }\n    // create decryption share\n    const dshareSize = wasmExports.create_decryption_share(uiShareIndex, ct.length)\n    // set derivedShareIndex\n    wasmExports.set_share_indexes(uiShareIndex, derivedShareIndex)\n    // read decryption share\n    const dshareBytes = []\n    for (let i = 0; i < decryptionShareLen; i++) {\n      const dshareByte = wasmExports.get_decryption_shares_byte(i, uiShareIndex)\n      dshareBytes.push(dshareByte)\n    }\n    return dshareBytes\n  }\n\n  // Assumes master commitment is already set.\n  // Assumes create_decryption_share is already called for all shares,\n  // Which means ciphertext is already set\n  // and decryption shares are already set\n  // and share_indexes is already set\n  this.combine_decryption_shares = function (totalShares, mcSize, ctSize) {\n    // combine decryption shares\n    const msgSize = wasmExports.combine_decryption_shares(totalShares, mcSize, ctSize)\n    // read msg\n    const msgBytes = []\n    for (let i = 0; i < msgSize; i++) {\n      const msgByte = wasmExports.get_msg_byte(i)\n      msgBytes.push(msgByte)\n    }\n    return Uint8Array.from(msgBytes)\n  }\n}()\n\n\nlet wasm;\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n  if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n    cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n  }\n  return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n  return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n/**\n* @returns {number}\n*/\nexport function get_rng_values_size() {\n  var ret = wasm.get_rng_values_size();\n  return ret >>> 0;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\nexport function set_rng_value(i, v) {\n  wasm.set_rng_value(i, v);\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\nexport function set_sk_byte(i, v) {\n  wasm.set_sk_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\nexport function get_sk_byte(i) {\n  var ret = wasm.get_sk_byte(i);\n  return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\nexport function set_pk_byte(i, v) {\n  wasm.set_pk_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\nexport function get_pk_byte(i) {\n  var ret = wasm.get_pk_byte(i);\n  return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\nexport function set_sig_byte(i, v) {\n  wasm.set_sig_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\nexport function get_sig_byte(i) {\n  var ret = wasm.get_sig_byte(i);\n  return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\nexport function set_msg_byte(i, v) {\n  wasm.set_msg_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\nexport function get_msg_byte(i) {\n  var ret = wasm.get_msg_byte(i);\n  return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\nexport function set_ct_byte(i, v) {\n  wasm.set_ct_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\nexport function get_ct_byte(i) {\n  var ret = wasm.get_ct_byte(i);\n  return ret;\n}\n\n/**\n* @returns {number}\n*/\nexport function get_rng_next_count() {\n  var ret = wasm.get_rng_next_count();\n  return ret >>> 0;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\nexport function set_poly_byte(i, v) {\n  wasm.set_poly_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\nexport function get_poly_byte(i) {\n  var ret = wasm.get_poly_byte(i);\n  return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\nexport function set_msk_byte(i, v) {\n  wasm.set_msk_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\nexport function get_msk_byte(i) {\n  var ret = wasm.get_msk_byte(i);\n  return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\nexport function set_mpk_byte(i, v) {\n  wasm.set_mpk_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\nexport function get_mpk_byte(i) {\n  var ret = wasm.get_mpk_byte(i);\n  return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\nexport function set_mc_byte(i, v) {\n  wasm.set_mc_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\nexport function get_mc_byte(i) {\n  var ret = wasm.get_mc_byte(i);\n  return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\nexport function set_skshare_byte(i, v) {\n  wasm.set_skshare_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\nexport function get_skshare_byte(i) {\n  var ret = wasm.get_skshare_byte(i);\n  return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\nexport function set_pkshare_byte(i, v) {\n  wasm.set_pkshare_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\nexport function get_pkshare_byte(i) {\n  var ret = wasm.get_pkshare_byte(i);\n  return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} from_node\n* @param {number} to_node\n* @param {number} v\n*/\nexport function set_bivar_row_byte(i, from_node, to_node, v) {\n  wasm.set_bivar_row_byte(i, from_node, to_node, v);\n}\n\n/**\n* @param {number} i\n* @param {number} from_node\n* @param {number} to_node\n* @returns {number}\n*/\nexport function get_bivar_row_byte(i, from_node, to_node) {\n  var ret = wasm.get_bivar_row_byte(i, from_node, to_node);\n  return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} from_node\n* @param {number} v\n*/\nexport function set_bivar_commitments_byte(i, from_node, v) {\n  wasm.set_bivar_commitments_byte(i, from_node, v);\n}\n\n/**\n* @param {number} i\n* @param {number} from_node\n* @returns {number}\n*/\nexport function get_bivar_commitments_byte(i, from_node) {\n  var ret = wasm.get_bivar_commitments_byte(i, from_node);\n  return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} node_index\n* @param {number} v\n*/\nexport function set_bivar_sks_byte(i, node_index, v) {\n  wasm.set_bivar_sks_byte(i, node_index, v);\n}\n\n/**\n* @param {number} i\n* @param {number} node_index\n* @returns {number}\n*/\nexport function get_bivar_sks_byte(i, node_index) {\n  var ret = wasm.get_bivar_sks_byte(i, node_index);\n  return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} node_index\n* @param {number} v\n*/\nexport function set_bivar_pks_byte(i, node_index, v) {\n  wasm.set_bivar_pks_byte(i, node_index, v);\n}\n\n/**\n* @param {number} i\n* @param {number} node_index\n* @returns {number}\n*/\nexport function get_bivar_pks_byte(i, node_index) {\n  var ret = wasm.get_bivar_pks_byte(i, node_index);\n  return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} sig_index\n* @param {number} v\n*/\nexport function set_signature_share_byte(i, sig_index, v) {\n  wasm.set_signature_share_byte(i, sig_index, v);\n}\n\n/**\n* @param {number} i\n* @param {number} sig_index\n* @returns {number}\n*/\nexport function get_signature_share_byte(i, sig_index) {\n  var ret = wasm.get_signature_share_byte(i, sig_index);\n  return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\nexport function set_share_indexes(i, v) {\n  wasm.set_share_indexes(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\nexport function get_share_indexes(i) {\n  var ret = wasm.get_share_indexes(i);\n  return ret >>> 0;\n}\n\n/**\n* @param {number} i\n* @param {number} share_index\n* @param {number} v\n*/\nexport function set_decryption_shares_byte(i, share_index, v) {\n  wasm.set_decryption_shares_byte(i, share_index, v);\n}\n\n/**\n* @param {number} i\n* @param {number} share_index\n* @returns {number}\n*/\nexport function get_decryption_shares_byte(i, share_index) {\n  var ret = wasm.get_decryption_shares_byte(i, share_index);\n  return ret;\n}\n\n/**\n*/\nexport function derive_pk_from_sk() {\n  wasm.derive_pk_from_sk();\n}\n\n/**\n* @param {number} msg_size\n*/\nexport function sign_msg(msg_size) {\n  wasm.sign_msg(msg_size);\n}\n\n/**\n* @param {number} msg_size\n* @returns {boolean}\n*/\nexport function verify(msg_size) {\n  var ret = wasm.verify(msg_size);\n  return ret !== 0;\n}\n\n/**\n* @param {number} msg_size\n* @returns {number}\n*/\nexport function encrypt(msg_size) {\n  var ret = wasm.encrypt(msg_size);\n  return ret >>> 0;\n}\n\n/**\n* @param {number} ct_size\n* @returns {number}\n*/\nexport function decrypt(ct_size) {\n  var ret = wasm.decrypt(ct_size);\n  return ret >>> 0;\n}\n\n/**\n* @param {number} threshold\n*/\nexport function generate_poly(threshold) {\n  wasm.generate_poly(threshold);\n}\n\n/**\n* @param {number} poly_size\n* @returns {number}\n*/\nexport function get_poly_degree(poly_size) {\n  var ret = wasm.get_poly_degree(poly_size);\n  return ret >>> 0;\n}\n\n/**\n* @param {number} mc_size\n* @returns {number}\n*/\nexport function get_mc_degree(mc_size) {\n  var ret = wasm.get_mc_degree(mc_size);\n  return ret >>> 0;\n}\n\n/**\n* @param {number} poly_size\n*/\nexport function derive_master_key(poly_size) {\n  wasm.derive_master_key(poly_size);\n}\n\n/**\n* @param {number} i\n* @param {number} poly_size\n*/\nexport function derive_key_share(i, poly_size) {\n  wasm.derive_key_share(i, poly_size);\n}\n\n/**\n* @param {number} threshold\n* @param {number} total_nodes\n*/\nexport function generate_bivars(threshold, total_nodes) {\n  wasm.generate_bivars(threshold, total_nodes);\n}\n\n/**\n* @param {number} total_signatures\n* @param {number} commitment_size\n*/\nexport function combine_signature_shares(total_signatures, commitment_size) {\n  wasm.combine_signature_shares(total_signatures, commitment_size);\n}\n\n/**\n* @param {number} share_index\n* @param {number} ct_size\n* @returns {number}\n*/\nexport function create_decryption_share(share_index, ct_size) {\n  var ret = wasm.create_decryption_share(share_index, ct_size);\n  return ret >>> 0;\n}\n\n/**\n* @param {number} total_decryption_shares\n* @param {number} commitment_size\n* @param {number} ct_size\n* @returns {number}\n*/\nexport function combine_decryption_shares(total_decryption_shares, commitment_size, ct_size) {\n  var ret = wasm.combine_decryption_shares(total_decryption_shares, commitment_size, ct_size);\n  return ret >>> 0;\n}\n\nasync function load(module, imports) {\n  if (typeof Response === 'function' && module instanceof Response) {\n    if (typeof WebAssembly.instantiateStreaming === 'function') {\n      try {\n        return await WebAssembly.instantiateStreaming(module, imports);\n\n      } catch (e) {\n        if (module.headers.get('Content-Type') != 'application/wasm') {\n          console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n        } else {\n          throw e;\n        }\n      }\n    }\n\n    const bytes = await module.arrayBuffer();\n    return await WebAssembly.instantiate(bytes, imports);\n\n  } else {\n    const instance = await WebAssembly.instantiate(module, imports);\n\n    if (instance instanceof WebAssembly.Instance) {\n      return { instance, module };\n\n    } else {\n      return instance;\n    }\n  }\n}\n\nasync function init(input) {\n  const imports = {};\n  imports.wbg = {};\n  imports.wbg.__wbindgen_throw = function (arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n  };\n\n\n\n  const { instance, module } = await load(await input, imports);\n\n  wasm = instance.exports;\n  init.__wbindgen_wasm_module = module;\n\n  return wasm;\n}\n\nexport default init;\n\n\n\n\n\n\n\nexport async function initWasmBlsSdk() {\n  var b = \"\";\n\n  b += \"eNrsvQt4XddVIHze59yXdG3Ltiz5cc6JU+Q8WiWxZSdxHB8nTuImadI2bUMfJG3jJr3Ow6++ftT\"\n  b += \"4FkxHAwb0/2MGAeYbDZixoE5HUANmCFQpbhE0pQIMCHBBFAPiJ8PoL+FHTE0967XP496jhyPHCa\"\n  b += \"38uGfvvfZz7bXW3mvvddbR3n/gKV3TNP0vdP9R49Ah7VEd/kNAP/SoeQjj+AsRHX+sQ5RkH+Inp\"\n  b += \"D37qAbpmsYgCDqHBCgBSLJVwD106NlDUumzz3Izz2KqFClw4FmEQaFPSlu9h6hLz2IjlGZxElTC\"\n  b += \"3ezlvvVyR5/FtGfjEUALkPSs0a6bH/vA49VHHvnYBz789GOP7376kYNP7H/mY5pm/qX7NdfQ4j+\"\n  b += \"66Wi6rruaZpsOhAm01DRNXTM13XYrmuGYhmaammaUTKvimDoEzU5d0w3HdS0Emx2GpdkGlNWhCs\"\n  b += \"haglxQjWmZNtRSgQK2a3J7DvyD9KJta1zAMTWoEio1IWpqRajQsbFjlB1L2VCjvgxyW/AfykMpz\"\n  b += \"YTmbCzVAvk4u6HbZSwF/8pYmY5jgexrNMM0HfhjlsvYBo0Fs0OiCSDoT8HSHGMJNO84SzRbRxwg\"\n  b += \"ArRWizKb+KdVL5iGvk6jagFoWa4LVdi6jr3EHJrmAjIcwqFhGJqj61AL4BR6yyOHdIDb1F+DerU\"\n  b += \"Cu2ua8WzgH+iG5tmO6bo4CqhEh8yICbMCQ4c6AceYDRoBiIkVwTh0HfBEDcGfkolFaCCADCjkuV\"\n  b += \"y/ZxACYEYtCyvWq1iJTj1zEc+OYRs0Hk23aEwwaBv6TPPJ3cPMNGCD5s/RMIQIhZ4YODiefBiZD\"\n  b += \"ijQbNvWV+FAXA27i72yDN2FDrkYtml+NaI4zbZwbmy7hE1jYzgmXUhBN4u69ICQbmClGLZ1G+jY\"\n  b += \"cizLsKkr9MeCENQJWZBoEOG6UcCpQXqgaumPSzXakBv+rMZhIF4If1g1NrzWS/hFq0BmQFLyx21\"\n  b += \"Z3ob1F6Ao8JLFtGvDVBhAsQX4Y2JtRgm7jDMCBGYhqug/zqJWBTRAlchTBg4fYkUszJ0qAsCgFm\"\n  b += \"FMGtOWgQkFHXEL/+BPoejRHyBMV9+r/3f4C/yh3egUQG5F9fqIVnL/s9fjPLX7qWf2f8LQlj2++\"\n  b += \"+Aj+59+/JGPvv/Jj+w+8MiBD/9fu7WzbuVAOlk74ZQw4cCeRz7wiYO7tV9ySo+nor/F0L0S/RxD\"\n  b += \"VfSMU6ayH36c46ec8uPp+BcZ/tQBif8yw+P4l7j2Dx7k6K9w7Sr6285SNYKnd38c0p/5yNMHtVE\"\n  b += \"ewN5nnvwEZ/tVp/J4JmFUtSq9PK1alfjvCFyN4tcEruK/y7166oMc/R/cKxX9slNlfB144v37d3\"\n  b += \"ParzvVxxvTXuR8e9Npz3O+TNpXnKWY7wMf/uj79z8C8ptT/8SmsTek/q3dkeT94DNPPfXhg0/tf\"\n  b += \"vrgAYZ+yul4fGboj6XbgZ5y6vc5qXbi1P+czrtXpX5/Om+c+uNOu9DA0+8/+BEYVWpsh532x2eC\"\n  b += \"DThLqBylwAK2++O7D2hDzpLHmxI/49CoH9v9wf2f2Hvww888zXBp/wd41DNAf8JZ8tju/R/+6G6\"\n  b += \"k2Q/tf+YpGKT2R66HXUI61H7HdT4KGT70Ce13XXf301SJ9mXXlfq0F12grqd373//wd1EYtpX3N\"\n  b += \"aY3B7b/fj+3bu133MrQiGS8FVXtfrU+w8c3L3/kT27P6GNuVVJhBh3UnseK5PaCa8HtN9w22HuY\"\n  b += \"Enf3Yi3A9pvuis/uH83Zm4crvZ5d5Uq1oQK7efdwtdBZkZ66bP6OfennS+bv+Cec3/I/m/up9x3\"\n  b += \"nnS/6Zxz/8Hpg6S/N8/B7w+6n4HnCIRecDH+Gfj/fe6PGX9onXP/N+T9M/uc+xfw/7OQ/pw75H7\"\n  b += \"N+TP4+3vx39+X51edMfr9R/M3nF90f9v+ffdfodTPQQ3jUPJP4P8fw/8fMX/E/Jb1gv579r/af+\"\n  b += \"D+C/z/Jj3/0P2i+XvGObdu/6XzQ843If5f7N9y/xCg59yvwf/PudyTP3XHnS84v2P/kPFD7kvWS\"\n  b += \"9b/MH/J/JzJsP/tfA1yfcr+Y/2Prb+w/9z9e+ennIvWJNRXd/7M/pz7A1DmW/bPO/+P+wvOhH7G\"\n  b += \"GLX/k/tnUON/tP/a+YJ1yn3ZwdI/645bP+b+tPVr+s8BwkYBC3/u/o1+Wv+88efWlH7C/TXjT61\"\n  b += \"fdweN4l//04qvuT/1LmPPIe/Zq7Royt0TGus1X+8y6kag+UY0qtV8vdrvGtuN7T4kdBn3PWBtB8\"\n  b += \"D2PZKOaXdCkh4dNWpdhgbF9KifgxYEj3DQhOCQUQvvxYgDkZOc7kJw2KhtMLXgaWy3zwhsqH5Ar\"\n  b += \"4WtABoEkKGFT202sTdDkHqfL5HTECmqyChEChKBYgPQ0oNSsF+HJHgOynNYniPwjMZgfEbUr9ei\"\n  b += \"Ea36x3aHX/CfxkqK/LiPH4bvPOe7z+3wP304fGqH2Rs+s82g4mf0mv/MDr9vm4GZntphEAhbiE4\"\n  b += \"1gPTe8KltBnYiOg6gp2IQtDCAXXJ7jKP4dHoM7HI0bEnXqr9qcoATVU8BA07Nvw8wFz4tSIB4Ee\"\n  b += \"OClHGIFzD+jKDPwSpOW7XQw9S9PDRjA6Am3AeIcTg2rIf7AT0SG9HDA5vNMQWzwoOASgcH6NAEL\"\n  b += \"oPg8xy8FTHCwa0QfJGDt0HwLAe3QfAcB29HujnuBEQ/J50gAtCWWqRFxeoPIE30GbXgrf4zJ4Id\"\n  b += \"/oETwR3+UyeCO/39J4Kd/tMngrv8fSeCu/29J4J7/IMngl1Yx5bQwcfW0AUCjV7+3U/9qROsjf5\"\n  b += \"m6oUfcoKu6B9HP/UTZrAh+qU/6/uyG1wj6ddK+nWSfr2Uu0HgNwr8JoFvFPgmgfcIfLPAtwj8Zt\"\n  b += \"8GGjeBuK2g6GtBAeJtEF8O8RUQXwnxdoivgXgJ4qvKRgmJ0akFZXiOwLOCkw3PFt/1nT3B2zAZU\"\n  b += \"LIOk+HpwxN4IwiwGDzfjHC9FoQIh+dVCIfneoTD8xakIMj3dnhOWLWgiunwXILl4LkU091agGQ1\"\n  b += \"CM/7EQ7PTiwHz7dgPniuhmcdng8gIdm14I1IVvB8E/IsPLvnxAyMlkaNo0csIDYQK4gdxBJiC7G\"\n  b += \"G2AMsxhhXM6BmRM2QmjE1g2pG1QzPQQnmdr/Vv6aHOHFVj3EEqNwv9YAYgueaHuMwPtt7QBzCc2\"\n  b += \"WPcQE5dEWPMY3P5T3Gy/hs6zGm8FnoMV7CZ7HHmBSOPi8cPYFPrcc4h0+rxxjHp9ljnMWn3WOM4\"\n  b += \"fPmHuNFfG7pMUbxubnHOIPPnh6SNv6mHuN5fG7sMU7j86Ye4xQ+b+whkePf0GOcxOf1PcYQPq/r\"\n  b += \"MY7j89oekjv+2h7jGD43iKTpIknzdhaDLFYA+YZ/O+ABRI6/A/CAz22AB3zeAXjA522AB8THnYA\"\n  b += \"HfG4FPOBzJ+ABn7cCHvB5F+ABn8sAD/i8G/CAzwjwgM97AA/43A54wOcuwIMhku+WlJhza6Hmt4\"\n  b += \"LIigVWvw7iykXatGuhDZm9WtgG8p4z3EKhPjuRmi7+9tm16pdsWMXWY/auOPt6CkF1tr8UIU4MW\"\n  b += \"aoqWt9cyVWYdUOc9aqkkiUIcWPIElXJVc2VhJj1mjhrmFRSRUgxhlRVJWFjJRTw35ygK143kqQB\"\n  b += \"sxZakAeqXB5X+WYK9ePaMg5wsxnDYwgbpEWj38TfMbNW/W+mb/ndWNXKuKpuVZXpNyIP6mhpLv8\"\n  b += \"mLN8eZ31TUr4Rb1C+0lz+jVh+TZz1jUn5RpRB+XJjeYVBGJrCkedr6dEPuzANVjx6QGn1r23ItB\"\n  b += \"rbvTpuYjXPl0VDjDN1YqY3xJk6VaZKOlMHZvquOFOHylROMhnRlNPQTZ7dNzOIE8OSAmp+AStdE\"\n  b += \"VdaSMgpmfaSoqRCMzkGWP7aOGuQlM/hiaC5vI/lr4uz+kn5HHbwm8uvw/LXx1nXJeVzOGFdPifc\"\n  b += \"ksVVQUUtv1FAEL00Ymtmml8AuS+A0q8skX8dSXMW+ib4LKRN8Fmo+uuzUPUtGapelVB1nuS3U7O\"\n  b += \"5ag5xnyvp5yfkc+X7/ER7rlSfv0AvzSLQrSZ2Jqq4BPn9nUDLE3PQ8sQctDwxBy1PzELLpQwtr0\"\n  b += \"1oeQ7hvHYW4bwAubwAkbwAaYy4WZXCizuDNF71SqTxA7hU3BBnfyCpo3HK88n4LVj+xjjrW5Lyj\"\n  b += \"SSRT8v3Y/mb4qz3J+UbSWYGgrYaCEfzvQxBW7LDFYJ2a9W/wvlonHDI05KGN84qwCtpeOPUAbyc\"\n  b += \"wFn2ZPq1ihNFPSj5rai9r0JVu19H5b8LdIlgIz6P6cEmfA7qQQ9p93qwGZ9DerCFtHwd1D94Dut\"\n  b += \"4UtAFugseE3SBLoNnBF2g2+ABQRfoOnw6cEbn04FRHU8HukA3Cnbg86we3IHPcT24E5/n9GAnPs\"\n  b += \"f04C58nteDu/E5qQf34PMlnU8IJvTgIXy+rAfvwOe0HrwTnxf04F34nNKDh/F52Ai+G599RvBuf\"\n  b += \"B4xgvfgs24E75Ujo5iOsXkjeB81bwTfQ90zgkeoe0bwKDVvBO+n5o3gA9Q9I/ggdc8IHqPmjWA3\"\n  b += \"NW8EH6LuGcHj1D0jeIKaN4MPU/NmUKPumcEe6p4ZPBkzXazAoWSEDb1WSxPTg03C8QVrduFI8Fm\"\n  b += \"EI8FnEY4vWDMLx5Ro7ADlexUr3+8V5fs9ony/W5Tv7xbl+2FRvt8lyvc7Rfl+hyjfD4nyvUuU73\"\n  b += \"tE+b5blO+7RPneKcr3naJ83yHK9w5RviNRvreL8n27KN/bRPm+TZTvraJ83yrK982ifG8R5XuzK\"\n  b += \"N89onxvEuV7oyjfy0j5LqTP9JCd/CdF+d4jyndNlO8Pi/L9hCjfj4vy/SFRvneL8v2YKN8fFOX7\"\n  b += \"A6J8v1+U70dF+X5ElO/vEeX7fSnluzT/zVfp23HztXaem6+1i5uv2bTluRTluXTkV6ger81svgp\"\n  b += \"5m69leZuvgqKKZd8Gm68cHWJZ3uarlLf5WraoCr+mqnBppgOe70hpXJinNC4sSuPXoSpcWJTGjJ\"\n  b += \"tSVhW+fNJ4AVrwAhTg7wTdt5TWfTtY9b1GVN8uUX03iOq7VlTfa0X1vU5U3+tF9b1BVN8bRfW9S\"\n  b += \"VTfjaL6bhLVt0dU382i+m4R1fdmUXFNUYEtUYE1UYFtUXFdUYGLogIXRAV2RMVdLirwClGBV4oK\"\n  b += \"3CYq7hpRgUuiAq8SFbi9cRfBqukOUUW3iWp6h6iqt4tqe6eosltFtd0pqu5tohrfJarwMlGN7xZ\"\n  b += \"V+VZRre8RVXq7qNa7RNWOYiZLmUS0NtMRmVII2+ikl7Y28QbkaUnDGxkA4JU0vJHKAV5O4PPTe5\"\n  b += \"XpSar3b4sO1cK3VbRSWS9FEz8/okWbooFfAOCv2FrJ1zeYQwbayMC4jOAptK8ArrqZlOdoFIJbO\"\n  b += \"HgGgps5+DwEN3HwNAQ3cvAUBG/i4EkI3sDBIQhez8HjELyOlXK8eTblhtmUm2RTbpLxeU2PMWDK\"\n  b += \"jbIpN8rI4UdguKzXR324n+HgYQiu4eAFaGMlB6chuIKDL0NwOQdfgmCBg5MQLHLwPARd7hpeylt\"\n  b += \"y+W7KJbspl+ymXLKbcsluyiV7IkJT5yWABqCj2wUNENwhaIDgNg4eg+BtHByA4J0cPArBrRw8As\"\n  b += \"FbZbwQvEvGi2Kee3sHIM7l04d+l08l6i6fNlxw+LRi2uFTh5cdPsWYQiObAUDZWyMvOc15K4X6k\"\n  b += \"cyGAPZgGvYghQYRNglNKyugJDiaBE9D8F48w0z2Dk+LZdMEit7zbtp86WmxbBpD0NkGkM72UAg6\"\n  b += \"kwHdS1WjJMdWycjp6R1Wb/j0NrJwggjmPJo1dppwUsvBvYqNscvdahH5NycW1vHKgmKhG382VmE\"\n  b += \"Jvg8n2kZDI56JQdoMD9gKV61sOpAWFn22CIsuYV5uJu4Y1k0y/7rqMStjj9UtZOQLi2f6xwV9/F\"\n  b += \"lf/UUrrhGXlTOKANvVMkcl45qxUDv+rK7+kpVB0k+7mR6MJ4eReqjxQrCLzPTO6jVcCcg2CHdiJ\"\n  b += \"+HZxvZ1wfJIC2xzO/JMpNf4eEx1eFT3tVro8lpVY9MqQGJoVn/UhaVnuU8B02/zHQw4sM1zMeD6\"\n  b += \"RV/DAFGeXQtX+CaSqBKYJm8LcLWdBOhK30lDeYGn3eQ0QNt9Nw3l5X2KVmoHO6eloRqF6ojASQc\"\n  b += \"NRqw01OKaAboDDX9++7M/0f8PyEdQ2Q60DPrbH/6J/puU5kQSYsJJ7eDsqG7cVTHF4ASfAw4aiq\"\n  b += \"S1DEeKJwWBs3Uf8mNPeI+uQbcw84SDQdwDp2oYs6mHJrN9pm5r5q6hsjJnNywksbgHUbWW7sTKd\"\n  b += \"PmJpBND2U4MLrwTXelO+JlOtKfLT6lOuOnUurPgDmxJd6A71QE72r6Ht1ApDoKlGHeAVTaBhZBH\"\n  b += \"vFHFn7bq36AVq4an0yW0OcUcZDfLxa3QfqCiYwhGFxkHURYBNTCn4YF2NOXW1mutpWh0CFb6a6P\"\n  b += \"TQ2qlx96MwfJfPWNppV9+p/EkG+dOiHGuQaOIbW+3+vq9wOqaMr81ISjmt7DnVea3FgTR/PY+tr\"\n  b += \"nVlPkt6I7K/PYZX6MNHwkvYPUqgMT8VuxL0Sj3frGIJVvckoqwLa7YympkfvtWKVjX2ca1X56D8\"\n  b += \"iQj2e170J4wUeeLPpmqlvhxPz+A85/zPba+pTVqb8rEdm92jdqbMrHdm12jZNWJjgLo6RgELfRh\"\n  b += \"j7we47DY7NVpy0iytq6sb+skawfT1rdoTXt/yroWrXFLeda4ewV7RIrAVCHZ5O5LnU+gve2gE9v\"\n  b += \"iHsjY4h5MbHEHrfAjgEmcoeNsRouy/GRicnsqMbl9PjG5PROb3CqbXKKcow7fqx1zcBcP7KCsbz\"\n  b += \"Wyvn0b2tfegfa1d6LN7U60w70LLXLvRjvce9AEd5f/kRNoegpLL68VG0Mvsb5dJzaXG8Tm8hqxu\"\n  b += \"bxW0q+T9Osl/Y1S7kaB3yTwjQLfJPAegW8W+BaB3yzwW3yHLG893yY70yLE2fLWBm3HBE3GIRvU\"\n  b += \"tRAvQ7yDrW+zVre0BQhAofDdPWQ122h1i9a0oVjl3ptjdQsLaXC1rLxoGF2HfA/lWN3C+k021HN\"\n  b += \"Z28L2AHUz3GAEDzZa3bKMi+2WZ8YMjJZGjaNHLCA2bLHARSwhthBriD3AYoxxNQNqRtQMqRlTM6\"\n  b += \"hmVM3wHJQAu48qKhWkS8kFX1ku+NbKBd8queBrlwu+lXLBt0Iu+JbLBV9RLvhKcsHnyQWfKxd8p\"\n  b += \"lzw2XLBZ8kFnyMXfLfIBd/NcsG3RS74NssFX49c8G2SC76NcsF3k1zw3SgXfG8EnUiscI+KFS7J\"\n  b += \"vnU9xhGddabDYoULkuYhkoJy/1dkDYDu9+6Q+73b5X7vTrnf2yb3ezvlfu82ud+7S+73tsr93t1\"\n  b += \"yv9cm93v38P0e3XOKse2oGOOeweebAQ2GCL5bU1LOxf1ONbMO6yCtcDms27gzvDVrVnorhaatRG\"\n  b += \"iSlj5tyTp9ddZulnVxqM7xl2XtZpepiq5urmR91m52fVIJWfB6DQdFUMn65kquylo7XpVUQha8p\"\n  b += \"YbTJKjkqsZKKAB6VIyueNlIkvpMNFG+N2uaeS/vVk3W3UOrGcMjZrzTqZOSM8LHZ7Z/Q9Z49gZV\"\n  b += \"leU3Ig/qaG0uT8a7qxqOval8I95G+NCwoTwZ765tOPum8o0oG+GTw0x5hcF+J/XOjZnZaLqixPL\"\n  b += \"oB/m6r+CvydrV8hH6oEVDjDOtztrVrlaZWtKZOrMG4J0qUyXJpLaO/ekjG5zdexkk59llBTT9Yt\"\n  b += \"YmupiQUzLtZUVJxWZyDLPGs2FSPocnwubyQdZ4NkjK57BD0FyejHff2HA8TuVzOMHP54Rbs7gqq\"\n  b += \"mj6YP/WhF4asTUzzS+A3BdA6VeWyL+OpDkLfRN8FtIm+CxU/fVZqPrWDFV3JFSdJ/md1Gx2zCHu\"\n  b += \"cyX9/IR8rnyfn2jPlerzF+jlWQS63cTORBWXIL+/E2h5Yg5anpiDlifmoOWJWWi5nKHldQktzyG\"\n  b += \"c180inBcglxcgkhcgjRE3HSm8uDNI445XIo0fzBrPPpjU0Tjl+WT8QNZ49oGkfCNJ5NMyGe9ubL\"\n  b += \"i7pPKNJDMDQVsNhGPSe7KZoy7a4QpB8wWh2TThkKc1DW+c1UG+oIzhjVM3yBeUg+oCcrqxXx2cK\"\n  b += \"OpB2a+i8k4HvXW5sTssN4dH5OawX24Oj8rN4YDcHB7T8R1QuqHcKjeUt8kN5Ta5obxdbii3yw1l\"\n  b += \"JDeUO+SG8g65mbxTbiZ3ys3kXXJzebfcTN4jN5O75GbyzXJz+Q65mXyn3Ey+S24mH5aby++Wm8l\"\n  b += \"3y83ke+Rm8r1yc/k+PjAqpi4gXxSb2xGxuT0jNrejYnN7Tmxux8Tm9qzY3I6Lze1LYnM7ITa358\"\n  b += \"XmdtJgm9sLBtvcThlsc/uygTa3dKH5VMxzSn3rIFuH0azp7fYm0fiCNbtoJPgsopHgs4hGuoKcQ\"\n  b += \"TSmBGMHaN4drHm/TzTv94rm/R7RvN8tmvd3i+b9sGje7xLN+52ieb9DNO83i+a9SzTve0Tzvls0\"\n  b += \"77tE894pmvedonnfIZr3DtG8I9G8t4vmfbto3ttE875NNO+tonnfIpr3zaJ5bxHNe7No3j2ieW8\"\n  b += \"SzbuNNO9i+kAPmcl/SlTvJ0X13iOqd01U7w+L6v2EqN6Pi+r9IVG9d4vq/Zio3h8U1fsDonq/X1\"\n  b += \"TvR0X1fkRU7+9Jqd7l+W+9yt+OW69189x6rVvces2mK8+lJs+lIb9C5XhdZutVzNt6teVtvYqKK\"\n  b += \"tq+DbZeORpEW97Wq5y39WpbVIRfU0W4PNPxznekNC7OUxoXF6Xx61ARLi5KY8ZNOasIXz5pvAAd\"\n  b += \"eAHq73eC5ltOa74drPheK4rvBlF8rxHFd50ovteJ4nu9KL5vFMX3RlF8bxLFd6MovptE8e0RxXe\"\n  b += \"zKL5bRPG9WRTfW0TBtUQBtkUBNkUBdkTB9UQBLokCXBQF2BUFd4UowCtFAW4XBXi5KLhrRQEuiw\"\n  b += \"LcIQrwqsZdBGumd4gmertopneKprpdNNudosneJprtXaLpbhPN+G7RhNtEM75HNOWtolnvEk06E\"\n  b += \"s36zaJp74iZLGUPUW2mI7KjELZh09hqE29AntY0vJEB6myaG8MbqbzOprl1/RL0XjE7SXX+7Wh5\"\n  b += \"+3axvB34RbK8HfvF2B6HLG+fwecwWuCyYe0tiWHtzYlh7ZbEsLYnMazdlBjWihHuMQjeKBalEHy\"\n  b += \"jWJTGRrh062zK7bIpt8im3CKLJW6fWOAeFgtcuk1Ew9qOxLC2nBjWrk0Ma9sTw9qViWGtGOGeS8\"\n  b += \"xtx83YdvcsBL3YTRZZ3C4Xi1uXLWvpgl0sbUfFAveMWOamJGhyWsJ2tdsTu9o7Erva2xO72m2JX\"\n  b += \"e3OxK5WzHEvOLEN7jQE75bhQrCNO3unGNzeJQa397BhLZ41vCSGtpMOnzmcd/gMY8IRs+W3pY1r\"\n  b += \"30YhNDme1SgXrW2fTqxtn06sbZXdFATvw/PLZOfwjBg1xda1ieXSM2LUFFvXpkE6m0Ih6FQGdB8\"\n  b += \"bArtsaUX2Tc+g4e0z28i4SUx0D2ftnMjgTjHxfYqJNWURO6IMb1lUx+tKyi62z/bvZxPJ2PCWbV\"\n  b += \"T7YlPbKpsNpEXFtBIVvrAuNxN3LGU/e8zKmGJ1p81nJ5xs//S0+SwZ3nKNuKjEhrdVtchRybjml\"\n  b += \"JXfL1kZJJHhbdIDNrxlQ7wX9dDkhYBNb8/oNVwJyDAId2LH0OSWbeuCFZEWOGR6a5JBIB6PqS6f\"\n  b += \"1n2zFnq8VokNLqAxtNCsFjbdvqVscGOLWw8Dnl9SVrlAe2Rcm2MCO2KLYW6ucW1smLvK99JQL2u\"\n  b += \"Y6+UZ9ZJh7riD5iJ2GmpzzY2mt/UG01vWnNg430nt4BwyvTXE3MRSxr+NhqFUPCl4Aa3IIR/2hP\"\n  b += \"foaORJVrZk72lmrV5HbOqhxYyfqduauWuWP49u2EiecQ/E9FZ1or3R/lc6kWP/u8BOdKU74Wc6s\"\n  b += \"arR/pc64TUa5C6wA1vSHehOdcBB01ungYPE9NZjS1esucsgliij3a3m62JEOyFGtH2fJSPa6edk\"\n  b += \"0f6Tdxp7D5loNjtSEJ+2aJUaPMBuaIMHxcXoQ8x3eCeBSyfeSeCySG87wZKHdxMo5MhfJlA+3lF\"\n  b += \"EkxZb/o1bbPE3arHFHwyVLPdg1SQ/mqPwXMXrMFnqnQb4u7HPOlsAol/OpWIhSC85FtgCcMpD16\"\n  b += \"cgYApsATjh1cj/Z3+BLQDHPPbjCSsibnVx4SM/nJPw3IDlPHYj2u+xQWMdni3owBcFDr12pFef9\"\n  b += \"d9Jv2SxnPLzO6uHX9hcG+jIF+QRmgnr9F6YFXvthSfsk8gK+qQB4ojfVNoPMp/u+96DBsEHkE5W\"\n  b += \"kcoTHtwMS8QqBG31D2C4w6ckco13Gye1c1I7Jm3jJAOSzNMo5KaNGu/A4h2Fvx/kkMnPCXmOyZN\"\n  b += \"eZIItzPOyZzltZiyL9+MifGCbMYnJB2iBfIlK4goM6eNJ+jlOh+V3/zbe6uyn9BdNFvfcKTYcPk\"\n  b += \"3r5HDaIGya9s5oMk2GwPsRJRUk9duEjyp+h4RaMHmrisScWsbkbSqSlSLDZD88RTP5ssub+wsuK\"\n  b += \"wnHPFYOBjze1B/1+HKv32Nl4ojHSkSfx8rDYY+VhrrHysKgx0rCcY+Vg5MeKwVDHpnAJv57958I\"\n  b += \"7kN74fvZM6/LnnlTtsFXi0XoNWIReq1YhCq/rd2Srvy6Kj+vyu+r8gOr/ML2CHyzwLcI/GaB3yL\"\n  b += \"wW31bbIMd8jFbgvhysX5F2+B1EPchHkC8FeJr0TaYbIDfMWfNJtnUtlJprAVrc8S21ibb2hK1yp\"\n  b += \"bJbtxjNQI1IjVCNWKFAYURhaE5MEm2tfIeH+z9T+HLcq2gVeAz6DFO4tPvMYYs1iqOW2xbi+dXq\"\n  b += \"ArgXgu3+AMW29QetdjGFne5yEZHLGajPou3/oct3urTS3mw9b8gqsC0yU5yXjb5po7YEzQmYi5Q\"\n  b += \"l4jfQNs5b/JNHbHtJnmJb6O8xHeTvMR3o6gaN4iq0S2qxtWialwr7H0Nsfe7WUbErqtod3/KRvN\"\n  b += \"LwIPNu/+TNmsFQzbfOB63WRsYtFlLOGbzDeWAzdrEUVte47NZqzhi8w0nvm6CasthfN4HeLD5pv\"\n  b += \"EC4uN+wIMlwuFNKdPQQpNx7WkTtkYF3s+GYmu5vOHEctyJBUu9UONdF5+TbW1wqgY12fl2tVDHq\"\n  b += \"ubytzXahRSUU9zGAx4o39Fcflucqz0pvyTrynaJKt/eWJ49lr8l9das3ijgoxGyOX5L1pqWj8FO\"\n  b += \"27xBabSmRZRO2/zGDbut5sUcT8QcfwNWtS6uaoOqqvkkGupoaS5Prmj9BncOVL7paNOms4qG8td\"\n  b += \"j+SDOen1SvhFlUL7cWF5hEIY2w5l0vSDv2vDoAaWzWNMO83FLnCnXmnaYz1ziTLnWtMP8TrRkgn\"\n  b += \"nzGrrJs/sWBskRdWtyKlnKWtOWEnJKpr1VUVKpmRJzLcSpfA4nrG8un2scTuVzOOGq5vK51rxUP\"\n  b += \"ocTwnxOeFMWV7EDifS105sSemnE1sw0vwByXwClX1kiz71ETNF37iViirRzLxFTVP31Waj6TRmq\"\n  b += \"XjvDJaKI+mb/n5co3xcg2hcg1ecv0FtnEehOEzsTVVyC/P5OoOWJOWh5Yg5anpiDlidmoeXWDC1\"\n  b += \"fnXeJmCucr55FOC9ALi9AJC9AGiNuUk4BEZorjde+Emn8dlwquuPsb0/qaJzyfDJ+W9YV7tuS8o\"\n  b += \"0kkU/Lb81a8741Kd9IMvkEzUydIpyGO8VhXba0PHpAXv6dIuRpScMbZxXglTS8ceoAXk7gLHsy/\"\n  b += \"VrLiaIPtPKlIl26nTZZUX7e5EvCMyZfEo6afEn4osmXhGMmXxKeNfmScNzkS8JzJl8STpjsuOa8\"\n  b += \"OMCZNOU2zmSFe0oc5rwsjnIumKxw1y1RuC1WuKdNVriPWKxw91uscB+1WOHus1DhBoXeAj0bFXO\"\n  b += \"LVe3jFlvLDljsk/akxfaxwxbbx56y2D52yEL7WDpAKaUuFQ/bbC47bbG57AWLzWXrNpvLHrXZXL\"\n  b += \"bPZnPZIzaby/bbbC573GZz2QGbzWWP2WwuO2ijuSw0b+P1GTRvB89Q9+xgL3XPDvbFTBdrbGxPW\"\n  b += \"zeztwVGk3TMNahNScdcg9qUdMw1qE1JR7pYnEE6pmQj3oHyHRsaepK6/aio24+Iuv09om6/T9Tt\"\n  b += \"94q6fb+o2/eJun2vqNtvFnV7l6jb94i6fbeo23eJur1T1O07Rd2+Q9TtHaJuR6Jubxd1+3ZRt28\"\n  b += \"VdfsWUbdvFnV7i6jbm0Xd7hF1e5Oo2xtF3b5J1O02UrdL6YMuMqjdJ+r2XlG3nxF1+2lRt58Sdf\"\n  b += \"tJUbf3iLpdE3X7w6JuPyHq9uOibn9I1O3dom4/Jur2B0Xd/kBK3W6d/+6r9dtx93X1PHdfVy/uv\"\n  b += \"mZTl+fSlOdSkl+hfnx1ZvdVmtmEq2H3VVJU0fZtsPvKUSLa8nZfrXm7r7ZFXfg11YVbZzrh+Y6U\"\n  b += \"xqV5SuPSojR+HerCpUVpzLhpzerCl08aL0ANXoAG/J2g/LamlV8xqL1OdN9rRPe9VnTfq0X37Rb\"\n  b += \"d9wbRfW8U3fcm0X03iu67SXTfHtF9N4vuu0V035tF971FdN9bRce1RAd2RAc2RQe2Rcf1RAcuig\"\n  b += \"5cEh3YFR13hejAK0UHXic68HLRcQPRgVtFB14rOrDfuItg3fRe0UV3iW56j+iqbxbdNhJddofot\"\n  b += \"neIrrtddOOdogvfJbrx3aIr3ym69X2iS7eJbn2/6Nq3x0yWshOoNtMRGT0I25gzGNSeZovxGN7I\"\n  b += \"AKfZLDyGN1L5afbYLPD56b3KEiPV+3egRe07xKL25VNkUXvyl7O+bPeLhcgBuSC25YLYlgtiWy6\"\n  b += \"IbbkgtuWC2JYLYlsuiG25ILblgtiWC2JbLohtuSC22YwWLeDootiWi2JbLsgduSB35ILckQtyRy\"\n  b += \"7IHbkgd+SC3JELckcuyB25IHfkgtyRC3JHLsgduSB35ILclgvyRBimjj5I+b/g8WHAtMeHAC97Y\"\n  b += \"sHqsTL/ksfK/aTHyv55j5X/CY8PA8558sEbjw8Lznp8eDDm8SHAix4fOox6rMSf8fgwYsRjf2hh\"\n  b += \"yX8obef6EIVOO2zdFS733xODHqDQqMO32uwhIFnKD0CpAj+H5DlQiD3Wonz0yf7m4DZjGCMHyZ7\"\n  b += \"mVEHZ30D6YJJ+vKDsbyC9P0k/KlWPsEmORfY5pxP7nOez9jkZg9cHFZPFnmZRxJNZKItSlPvfnf\"\n  b += \"UyK45n0SWbGLyugo1XYug60egjdNwRJu4SphIfs6pLjT5mE+OhjI9ZYL1Mz8xmH7O6LNkNPmZxe\"\n  b += \"fg3J11zk4/ZGD1k6pr0IPExe9hiM70+a5e1PfYhy4ash62kQ1MmGrLySxDKohWdXblsv1pV9qsP\"\n  b += \"K/vVdr+IgaL/rsSQFf2PrcgzVaW3VPDTwCvzTFXJKHrUxVaLaah4tnDZUhs6l+edlmpG+s0zoB3\"\n  b += \"2GgxZyalsypCVNJYJ3q96qZ0T+5C1fIfdM2dNWCdcKZgUyXiPNdPeY4c9Ntxc0fjuGfTNIR+Uib\"\n  b += \"7gzNwhx59HF6y0+aryHKs6sLLpuxMebQFTqaML70BXugN+pgMZI9UR1YFixqrWXXAHtqQ70J3qQ\"\n  b += \"OI1NsUTr9BrrBl7jTXYa6wpXmPRslK4i0w1mSXRgflEkyoJPdL3VdHpwfXalBEBvWkZJh7V5XsL\"\n  b += \"zOL/0/K16rAFPUapUmBT2nOfI1PaFz+nVmu05z5/SvzR/s7VevXQVVpUd5Q32nE0HYVJUnzCFqY\"\n  b += \"wUXECGZcCHcUJaFoKCIrjWxCe4jSdQt04K4Bv4NJiVD83ooV6FZ2cDpNDPeBln+NTOrlkJnRifI\"\n  b += \"I8V9txfMzAhQxfnBM4CSMXUqS8VQtb0Xhe4iNobO97cbxuoslRaxwfs9E5rhXH+6F82XeSOJSvg\"\n  b += \"HiL60OXr7CrkjiUtAQyCDUtQZ1XxaGnLbgroDjZp0oZHt37XoNQ9TL3wLnk+i4PDkqXeRyFBdRn\"\n  b += \"zlrWviw9tV5HtXjzrMW+zHN06b2/PON1LkstS+ZZS/FVkxHW64hnWl9H9NxyybV4r9octbxGNH5\"\n  b += \"5ZnW+ofKrJjEv97pwuVfsy0M5C5mjlgWULb9GZa8sB1SuAAcsZE2xXqP199J7b78uuedKrPaXh4\"\n  b += \"bMV21XernLvvY0ebm59t8P7i+dYkuvI1y1/LvB83daWes1koS859LiNI3+NofUiVHdqa3XSp9tO\"\n  b += \"soasBuOsvrthqOsPrvhKKtOCamzLHQ/kXOYNWXRaRaeNbX4LenjrLocZ7Wkjp/Sx1nd2dMsPCMq\"\n  b += \"pk6zhhtOs0boNKuYOY1Kn2bhadhsp1l4OlZKnWbhaVo5dZrVT6dZpXmcZk3ROdjiadaroR8UF0+\"\n  b += \"zFk+zvi1Ps1oWT7Ne9+ut9zrak/97PM0qvWoSs7h4mvUqan2l19E546vHAeXF06zF06zXBQ0tnm\"\n  b += \"a9dlz77XyaVXwd4aqyeKr0bX2aVV7gaVZyXvWV9UaBfRpOWXtCc71mbPf167VHK1o0oQX43e0Jr\"\n  b += \"Ra44uevX7+romMtNTJBC4wNpvYgWnqZeMLku2JSSrFqFZ5TOh5cqVSMMQydfQ4aBKvFYExwY5Bk\"\n  b += \"hP5oXBTy/ZRdwS+fd9c4T5xSLaNLNRPPoeK8ZJMGWQM76goMGcDHVf/RSV5ZSnCs9BB+Wj36OIw\"\n  b += \"K8Ft6mId1Guoae/4FLar/xgsaeqEz0Xs3/p7WQ2tPZH401CM0v3N2dYb6zoq2QwukJ4FBNqwGN1\"\n  b += \"XqDSu+BeHesMT++MoPPQcbuMpDz/UGJUEn2Yai90O0dNfJ6M8kQzzNt6XxU9T4cE7j1vYZ26aGQ\"\n  b += \"+zCJ7ntErRdprZ36G99bvb20SsvVRpPFKTQ7A4TBGIMweYjjZpmmAGV+GSZD43v0D99mL7DvuP2\"\n  b += \"PmkwNKLuu6GV9ATdbSWlufcGTYCaIyMzRzr1cChnkk4SnoZmnSRo5bIh6jUb/GDO4I/T4Aev2OC\"\n  b += \"huokmKuEUaIZYut9KmJZZEwWLxyxaiMa1GAtdWR4FKVvDumbm0YEcDBwjDAzMigHo0uXiUXRJXf\"\n  b += \"A9afwoNd4/G482t32ZSA/x/MpJj0vPl/T6chB/hMbed4mIXxDpjUCntWTpsRKy07gxgoUWySxsu\"\n  b += \"9i4IjCxJhRnzUJt9ZxBH6ZB1/VQm2nQVg6laXNRmoYPLTvYaa0m3S1K47348/HmpoXWGlumZueD\"\n  b += \"6rzWpwB7TjP2Rqz5Ym9Ka8beQfzZewVwN0m4w8460vST+PPEFcDdQnA2kYOzx/Dn0SuAs/EmnL0\"\n  b += \"Xfx6+MvSGdF6oehkJx6waanHVlyThJi5pcR3LQf1D+PPgzKinNi4fEgqMfpJhwHsPQiY70HhQO/\"\n  b += \"FjR3ftx/USuh5q3JqHYS9FT16WnkZzBnUf/tyTOyh6PyUwcGyXQFIyEGk8M6nb94AapPazd+LP9\"\n  b += \"jxqmqnduXE5Y9sOLwCwMlhI2AHyYR+INC1Kth8PZrcf+qzqwZZmTG7Fny1XBpPdjWvBRvzpvkLY\"\n  b += \"NOktKlG6UCfgPlyHP10z9AE3fZcNARZ99yIzecjkqb1jND0Hg/vNE7gef/yZJjB/AAvAogvbEh4\"\n  b += \"IUuMkDoh1WFBcXyFVtjcPajX+tF/aoF4xWVZFe4+ZvA1/qpdEEgvAaILNIZOxibrOK8am14zNMv\"\n  b += \"54VwabooErVFr4o+U1rV9+XJb1Elo60dqDwiZ1XONGg4gUisjOcL1W+sOr1HHSmE3HSQ2nSHOdI\"\n  b += \"+mU0YZnP37hRtZ8WMzpay2+fSnnTnb63IlS8VhJyxw3McwTKZacVI0Z6ZMqxD/qqWEhfQQCU+LF\"\n  b += \"xyOqGtTdM4damODGoORQS7U/lhxjqbqGzeaTrWb1Gk95vOZt5WByoJXd7aRou+SXF3i81bzDAbI\"\n  b += \"W1blCezEib6K0eRxvcbe9+R9xNbVP+mOFuvFJbr9CNF6alwbJhxMTuQdZl0uhLqW3m+XUakSzsb\"\n  b += \"CDrCaFesHoIH4ZyaIlTuEtFPF8TK4xtecRZd1ME+WUNTtRvtITrSnrshHlgC57mpgoZz5Qioly6\"\n  b += \"jLOQoYEpxZEglOXRIL9Ocif+TxrFuQvjAQH7exxoUph0tO4QT7X0Vjiz3UyUUoW/Fyqe2WHWdrl\"\n  b += \"ori63qhnx4dKM1GcdjkRPmbn4g+xPj/8TedolXI09epjb4pOKbCzTvZQ6dXH3UJwNpmDMzmSevV\"\n  b += \"xNtGEMzlUugL0VuCWmYEd0kyjByEL77ICnRBq7cSLeDre0PFIQ1cyDMJGjFSpPEHqeA5S5cwqD6\"\n  b += \"l8A5G3X58Nr9JqnvaDrio0v5A9LcrB6QwNzwOtMzbusCBM7UtHMJZZTOoLuptKr+RzLyaznDTNs\"\n  b += \"pTUL+fmTosPelAZtBqVwPjkNVYC8zl1+56mgcjJ1RWhqS2N2xE5ZboyZEUHTXbjIVN+2zMpv69o\"\n  b += \"4Bpr8o0HPHqKBKfnIMGuZgqUA6oZJi53AAvBHh7waJkDHmumA575UuPMp1aXMqhXTo7tjQc8crx\"\n  b += \"0CSSxEIwm2MTPb1q8UXzl2Kw2Y1MOrK4MNr2aOrHIHi9dIWy6rONVPXXa06+rQx3YFK7XSt9aZx\"\n  b += \"iH1uChTn9BvdU2hm+kYaMWHy7Z1SP0qXRO9kLHl5QpTqni+2acQm+3bTDbQ0+l9HOKHxZUyiCnd\"\n  b += \"IVFlTIMKRrWbPuW1OOgUHI4MkYRV0q7GPGkAxQpcAQ9T6Ig4whXWU2q7E9XOZGucjhdZd1LVTmW\"\n  b += \"rnKMq2xPqhxMVzmVrnIkXWV/usqJdJUTXKWfVDmcrrLupqocS1c5mK5yKl3lFFfZlVQ5kq6yP13\"\n  b += \"lRLrK4XSV6F00waXFX9+1QnvHv138p4tfvXjxX//joWdDa8dn/uhbFy9e/PzFXzskdUBOa8fFi1\"\n  b += \"/9wX+4ePGP1kpxExOPv/Rbv/yjZ08N/J0mwzEw9fM/d/TYV6f+4NfPS+qEjql/8qef/cnz///f/\"\n  b += \"/CXJRU1AGvHT37l4pd/9jfO1DsEBfSN7VESA/yl5hErtHp9C9gCPyC6wRy2ekMCDNvoTHCDOWGF\"\n  b += \"Bf4OL7FysTcs94bOHGPqzxtT3cob05SZOyYzb0xjZs6Y8BgRuAvYm77+yyNzYUB4wIwjNGVEdYc\"\n  b += \"WyEnOU/QLOOgW+vIyDLqVEIAeKDfQ9149qsHjD1f3htVeRAN+JboXvS1GQ1wLfcAdeN5hHM6NmU\"\n  b += \"EzBzP9ubNdz8XMlJGHmQkjBzMjBmKmSJgZSI+6N1zCn93GsRQEd6Om4K5COZYS+RqEO3zfFmGtf\"\n  b += \"gvirJUK24KRMacX71gR5fzdcMzpkqTtFaLqd2gu8IPpG8htZwq5Y4zcZbhaIDZNmhP0nCf4HTYv\"\n  b += \"Bb/DRg5+B408/PbnclM9F79Teg5+x3TEbwuNe4j728LjDtto2DSWksxAn5qBJZRjORGeiTOwTGZ\"\n  b += \"g3JAZWJrMwITOM9DHqCv4rTgDy6h6W+HMxTlxaX0lj4pMwQWeAZqkCZmkChMDZ6kwm8gkDcokje\"\n  b += \"dM0gQ0taI3XNkbtsNs0awYRETRqKHmacS4lHka0XPmaVjPm6dBPW+e+nOlXj1vnlCxdxDtSFfc3\"\n  b += \"yV+lbq5ikZOY6nKTA6omWyjHB1E7DST7TKT06bM5PJkJidoJlfKTMKmNj2TKzHHXp7IAUZvyV+G\"\n  b += \"E9lO7duC1CkXZ53mmL2yMtMJK5XYAWh6rifz5noqM9dDeXM9LHM9yZ1ZkZ7rKZ7rzt5wdW+4Rmh\"\n  b += \"tRCeajsZ1Nd1j+qVM95iWM91o99A02915k+3nzXW1aapxIzapqR4+mnQwXIsJD/ZiCs4rEi6PpI\"\n  b += \"3mQRh2GEbpADsyqQwpUlmVkEo/kcoaIZU+RSodCalMGUgqq4VUJnNIZcyUJUQxWntMCSMe4ruEZ\"\n  b += \"MPfMMcMS5lWhUbqXppGTufRyEiGRqbzaKTupmnkdB6NjAiNTDfSSKcQ+bQmRL6SS8UyQkgH990I\"\n  b += \"hnLhOhjmMsY7uboGJLdTdTTsMQ95Qw27z8sZdn9m2KN5wx7LDLvPzRl2f2bYow3D9nHkK2TmxjM\"\n  b += \"zp+SgwVzO0z9tpKdftht1mv9OoaGBDA3Jujuo4yyv9h1GPhOiw/IGCRCybEeKXIO0y85fMYflr+\"\n  b += \"UcyzebeOTv+usATAsvYB4QLKuIJ9PSnsieCQ9JXyF4oAHBtDsa9HD0CsHjeQieIAT7guCBBgQvR\"\n  b += \"RxXFN0bgj0vhb0pHbG3RDGPwl6Fs5RpgnREoyO0MqQLrSzhLLRZ60aKWK64WBMudgS/m80qHjb6\"\n  b += \"Kwg1BV4sbUHkpCeIXJnw/JSghrcvQ55sX+wUaoY9nJWlgprJRtQg3spqadBzxl3XETUtavHVher\"\n  b += \"KnKWIWXwcPy1K5KmX5UKLkNVms52me1ky3S3xmKbVmHi54r1ZgcckBOYJgdlxh23eCOIs6LKv8F\"\n  b += \"LUV8UhVWSeu2SaizKizaZPbI2zyHWiuTJXVpC+tFLeeFPYLkjlSdpsdkVdcqSt8zkqaNk1Vp715\"\n  b += \"AzVxgMsPOgOdLSP4wMso8n8xMDzAQPPB3Q6HzAjPPXF8wGTj1AtExtgrZx1dMeHna9FBwMWIYmQ\"\n  b += \"yQcDFjmWCXRlAmLiwYAp/qb7C4v6/6L+v6j/L+r/i/r/ov6/qP8v6v+L+v+i/r+o/y/q/4v6/6L\"\n  b += \"+v6j/Xw79f/w359T/MUvU9/lF/X9R/1/U/xf1/0X9f1H/X9T/F/X/Rf1/Uf9f1P8X9f9F/X9R/1\"\n  b += \"/U//+96v+nR+bU/zFLNDmyqP8v6v+L+v+i/r+o/y/q/4v6/6L+v6j/L+r/i/r/ov6/qP8v6v+L+\"\n  b += \"v+/V/2/fmZO/R+zRMNnXiv9/xuB4YlTR5P1f/ZCYMuQutHZgu7bNalKOWfkDY5yuEixalUUOHL0\"\n  b += \"48SgCQH1k0fIifgDHpRCkBEjXRVwilTEORgvJ3X8HdJDs8FzgmVt5yoCHXvMWAGSQDo1E5+cBaL\"\n  b += \"qErFRUFCIQQcNgelbiBhLPD5lZpM7xzNaSL/RUUzNKNStZrTJv51B/u0M8m/X1HWe1EJe/032bo\"\n  b += \"HD+CT3Hx17ss5DkzvzGLg6NR2Bmx4T+c6guVNjSo+w+JD4Y1KDopkeyBnTMRrTwKWN6RXOieyQu\"\n  b += \"duudOAodaA/lx5eNZyS/8MGXPYbl4LLvhxcHqGh9F0pXNYVZ7HDIYO80Rnkje7K4BKrjDSqTiEM\"\n  b += \"pGWBHZ0UlMuqArqs4kqgR8pl1YKYs8mNnYFu7Ax0Y3flWHPKEFKO/ZEmyJhaEDKmLgkZUznIOIg\"\n  b += \"/e2dDxtTlRQZ+tSHL10/izxOzUOLU5eMErMpdKB4ncvD4GP48egXxiEdxVGm8ig7Sd5zw3NeTJd\"\n  b += \"1KkRrsQvAj8gXfnovMxCETOldTaBI/XVaMouk5UDSeg6L34s/DuSiS/urY30tEkeBGMJVCkcYoE\"\n  b += \"a+i6tNhDaI8LU20WcX4WM6IHsKfB2eedO1yke0oMc2IkTDNffhzz4xMo102UlsIzhrd7BnoZs9A\"\n  b += \"N3uvPsq2NGJsK/5suQIYA72CWk65wwQOgix2YBEmzZ3QDnvCtND7paW4SnnFJGxKvQk2u5sJcCP\"\n  b += \"+dM/EUt05HDUHQmfkJtSk1HfrDHS6Z6DTvbydeX67C+FkhwUdeb5MVs7+Ba2c/Zck8f1m1K/HH3\"\n  b += \"82gd//am2gruTI25tHvhp/2r/tR15tHnkb/lSv1MjF2anF5/7kEDFej5WOLoORlTlfCs/scuBKy\"\n  b += \"I0GxcPCH+1SWl6I5KBL1/Va6S/XGasPWXjmMVKU76Imf7mhdQ/utLaztUOggtUwpOA6P+wNfX/d\"\n  b += \"uykcfNJf9zBmuE7rCJb4+pv09sDByUEPloVapEWDevWo0+E7z+3o/vSO7v/g+zsO9X7ikzu+8JM\"\n  b += \"vTFrP7qj/168MnjJ6d/h9J0I7qh6Mqh8JWn1HQgWuRZYKnb+faPnrthn4MRKL/eGSv8x1UAN2m9\"\n  b += \"1eWvul+UH09xgsx6/Z9hhaXr9yGwiaGwiwgUA1gF8zyDbSwW0M6fNuJGxuJMRGQtUIfhIjt5ExA\"\n  b += \"13mWtjAMWlgx6fq9Xp1szltwhwWokP3kUvjadjyAZHsYXRWf0xHP5gmbIp/TOdBqCCaI2CwBKVb\"\n  b += \"I+0tqrRvRxcvmvuqP8MlobJWqSzUIVEqkSB9ZwSCJfqOS+BIz2EIy5PuOz3GQEFozcGMY0bo4be\"\n  b += \"+7u0MQRm5H1p2K4hEt2yUyvzFAqok0GOUAMLcwGa+QAaq+hY8amHFL9bCAky0X/Gru4A5Krv2B0\"\n  b += \"VArsWsQKi2kSNsxHAR+cyNvutemA43QrfqtegYtIWkAgl4doTYcrHH2NNpE1pyffgPfdWjDbuQ7\"\n  b += \"qEcCjnkHOCO6BCgSO8MLEYX9NzHagSZOn//pRf3QId8G7te8F182HejMsK8DxI3w5GWv+QeC6cF\"\n  b += \"irdivU604YGKjfjDFgHRMqvQlRCIgr5cgfgC4bGOkbTJ0HYUn/XXAeMi0QlCfKC2YB3gpZdFhL/\"\n  b += \"uBLuBdRAnNrEMhKFZp8Qzp8n3OgrYA6I07kGBe1CQHpwkh//MIwvoRgG7wZwLYehGgRpBJvM97M\"\n  b += \"ES6IHHPfC4B5704Gz8AZoF9cDDHhjcAw974FEjyIHyJQdmUOQza3+4TOTNKshU7TEGbcmjE5MhA\"\n  b += \"RERjzpUTOUWph51BGRkc0+5mdydnHvKFZAJuVPEQl9QIk+7U27YBtTaBrTqMF/FnLQ6wU2VaaWQ\"\n  b += \"zNcaaXspfZXEDlbgc9QJVgIGS0GFyGxmikeTNMQTINtspnbL94TarRS1w/SVAfkX9X2Rjv10oFY\"\n  b += \"d+LYA44eKfSfN6x7xenToQA3WQWB3F+em5Hu70FBlLnbvUHQcedCkg/zt+ivxP2EJSGrVHOODCb\"\n  b += \"rk8SEP8+juRenG/JoeZMerM0i/jPNZRp1hBf6HMRLbrCQ2mXmMZKFIq1LeGF3qG47RnXGMDvOjl\"\n  b += \"xrjKqjPS4/RbRijw2N0d0FX5zdGj8cI20EYo+cvxf+0isAYV5BEn3mMIo5nGKMTj9GZcYwerFBQ\"\n  b += \"lZsa47LGhcnLH6M3/zG6PEYdx5hi80q0hLbxfqUG0O7aLRpeyrFwLuPFOa9QD1R8yAqFSzMtVLx\"\n  b += \"28Co+b3Q4hA5/tVrXUU7xMkmdc2VZb4FQCxEdiR+PlnUPl/V1yPNFv9pIE2tlIW9HZBVx6O3+2l\"\n  b += \"2wv22feyH3eLXwGhfyjNyGhXwpk0qCoHkt4d7MS3g+06OZ0lsivJVc8pZOWq0xhIsrL+dmvCrgX\"\n  b += \"SbvLkCJ8XXVsXCOjklvnPwpK/hOzr4ipl+IIA09UAEVxC/VokOAz0qsUR2iDWokBEFfjwNUO4F+\"\n  b += \"vaZFN99FmpTvAPIhC3SaknWiQVoearuguB3hoY9v4fYUO2xEN1AGUj7x9N+vIKjkl7AbRtSNUN7\"\n  b += \"jQM+Ap0sEureCtkCtt+poJlHqMcgyiDYioL2ANtMKeeDvyP8H6twZS6My0UQcA9KLXvzJL6RgYw\"\n  b += \"j7oopNxTGWGki9vKFweUPhxpsq3EQgl7+ijYSb2spkdpbI3LKXKnPDZW64nOylqOU1r7DlcmovJ\"\n  b += \"3IEa6dNVIvaSLZw0y3cdEuyiaKmq6+w6RZs2uWmW7DpFqqd9BfYmKQ2J6ifllfiJKSnq6xiX8zE\"\n  b += \"CNaSgbVkYNlJL+THqJyThpUr+C/bh3IZdZBysRSdnnpBizZHU/Co/oqtlaKp/wUJPdFQnHAGE1Z\"\n  b += \"HE/9LJRzFhDXRqTjh7/6RchxWCUlbX8z0G2PROQhFHZxAmZ1MZj2TuSvd6d9da5QOtdNLDfqe0F\"\n  b += \"qv4cxZqJ1HG2swh7C106NzGgWXoZsGDrZB8CwHl+OREAdXQPBFDq6E4CgH2yF4hoOrILh9D4Y6I\"\n  b += \"LSV0johtIVCVWz7OthxwqML9pbwWB+sxYcPNAOP1UGAj/YgxEdbcBU+qsF6fJSDq/HhBW8A4YnU\"\n  b += \"hz/dvWHrjovwp/X7fRPSPhn6J3CD9CjkWeov8VuBHNF8KJXHIhrdoX9/L2WGdeAxyFz13+Av4cx\"\n  b += \"LU5m9VObqCVQnn4DMnf7V/lLO3JnKXPar6cywZD0JmTv89X4nZ+5IZa5mM4M02wuZV/lX+R2ceV\"\n  b += \"Uqc1s2MzDsQcjc7of+Ks7cnsrcns1c6TE+DpnRMA1Nz5b7a2EDuA42uoHfzoVX8mMFP5bzo40fy\"\n  b += \"/Awxl+Wqv46vy0V6/KXp2Lr/RWpmO+vTMVWp7sVh1bHoTVxaG0cwoOcE5G+bw+siq0n9uEmE/ZP\"\n  b += \"obNvP0+x7S+BVMf3MOExSlhKCQVMeIISOimhiAlPUkIHJZQwYS8lrKKEMiYcpIR2SqhgwscpYRk\"\n  b += \"krDvhU7tHyGrJb4OktZLUx0nLIWmNJB3mpBWQtFqS6py0EpKqktTrG8yMRsyMRsKMRsKMRsKMRs\"\n  b += \"KMRsKMRsKMRsKMRsyMRsyMRsyMBjOjwcxoMDMazIwGM6PBzGgwMxrMjAYzo6GY0UBmNGZmxu5LY\"\n  b += \"caNl8KMWy6FGbdeCjNuvxRmvHMm/koz6BVltRnlwSUwHoeCWViwu5EFNzay4JZGFtzayILbG1nw\"\n  b += \"zpjjAuGS98YMp3jw4ZjfFAs+FLOb4sAHY25TDHhfzNyK/+6hr8WrH/pQYHWrhPC7ShSj7xyzBTv\"\n  b += \"GYRe/CYUPEXgrbn0o5TH8sYjGGXEAshj0BP54WZDHoCfxp5wFlRm0F3+qWVCVQQfxpy0LamPQx/\"\n  b += \"GnPQtqZ1Av/qzOglYzCEUTElEG5jPsMMHWZ2HrGdZHsK4srIthRwh2XRZ2HVpsbsLDd0pnwmLFZ\"\n  b += \"x++gcTopM9/6/uew6yWEhuCT/xilIJ5KZjHsLKClVOwMsOqClZNwaoMa1OwthSsjWHtCtaegrUz\"\n  b += \"bLWCrU7BVjPMVzA/BfMZtl7B1qdg6xnWpWBdKRhiVesSfJ6o8ffd9H21HsIpYLqb6JKw3O1rsJ6\"\n  b += \"EBqZsZOLMzAJeKG1BmxcAbWEKbYJvraGmvwkZFsm0Cb59Dx7abEL+RVptgsMahCcem5CfkWKbMs\"\n  b += \"B6BYopwO5hum3KAGtbWETYfUy9TRlgHcRPkW1CVicabsoBiyZ+NGwTigei5KYc43RTAMCHhZ6bc\"\n  b += \"sByHLYg8L1C1Y05cKa6ZybobpQjiqBpqUwmFe2tY4K2G2FOQtBOI8xNCNpthHkJQXuNsEJC0IVG\"\n  b += \"WDEh6GIjrJQQdKkRVk4IutwIqyQEXWmEtfgtXZKUIWiF00TGIg4Jdc0yFlFoC8hrBDmMuGYZiwh\"\n  b += \"0BVRtBHmMtmYZi+grCKi9EVRkpDXLWEReSUB+I6jMKGuWsIi6ioC6GkGAOQFdNw9y1HLJUZuFHL\"\n  b += \"VZyFGbhRy1WchRm4UctVnIUZuFHLVZyFGbhRy1eZKjxuRooc31eq10eI2x9ZCNunR9qXIQgG+H6\"\n  b += \"9GIpUwNSyjVCpEeQaZzIyA7zOoh3LOXUFaVIhANFK+XayA/3Tg+XEZJVY7jE2WUz3Yc76+gOPXi\"\n  b += \"OL6Hrlc3+aoLlFL9CL8HHULP8f0OQ0OzAPJWEF4PSX6SNA5Jb4Sk9iRpDJLeBEnVOInelaDIKB4\"\n  b += \"NahQcsWj1gHCwjdYBDN3OAh2D21kyYzDCIt2wg6TXI1naxs2hM4SIg30Q3M5BdJpwOwenYYjbuB\"\n  b += \"87NptTFr9oHHazFWZczwik3QBp9VTaaUi7EdKmU+0NQ9pNkDaVShuCtI2QNqmlxrzBeHSzOWj7e\"\n  b += \"GISD3OAgzjOQT0e55Cuxol2uxjcwW/WQcLpVH/QEcEODk4mw55Ihj2eDHsM+rRJBo6vXYcrELep\"\n  b += \"yvohbSUiOZU24OA5uUbvcaq0QUhbhfajqbQhSOvAAeuZAY/om826g8hJRjydjLhuxCPuM+IR9xv\"\n  b += \"xiMcdHPGAkSImJx4x3pLJiNH9goz4tBOPeNjBNVhGPAjDXwLKYjEa/tEXgH06cTMergayb2FfGO\"\n  b += \"FSUCaL0dj/jdBl+HpNC+3LQVz6HKKXBMM1iLZUj+qQthbSRlJp01DdOpyrVNoUpPk4oam0SUgLc\"\n  b += \"L6NDNoGjc3mBKJtzIjRNm7EaJtI0DaZoG0qQdtpF9E2nWoI3W8I2obcGG3o50PQNuDGaOuHAfUo\"\n  b += \"tE1CZDP20EyxPaRtQYJNpY1D2s04V6m0MUi7BSc0lTYKabfifKfSRlzcE2rowEDSNPTSoEZ+2ox\"\n  b += \"HPmLGIx8145GPmfHIBzwSB6nK0TGIjLzPi0eOHkhk5NPJyKegI1tjgvHQ7E1D1xIJmUNaiGhPpQ\"\n  b += \"1D2lWI/1TaaUhbj1OQHiWkXY2jtFLYgLQ3IDasZOT9ViIcrEQ4WIlwsBLhYCXCgUZ+OlX5VDLyy\"\n  b += \"WTkE8nIx71EOEBHWnnksLfxmS0s+MuU34quHIQHJoBm2/w2YJX+H0ZWWU6MVKQSWLYYl+WQRmuJ\"\n  b += \"WkVGKtDN6huS1aVSq/6UHkfhl4DkDoViCMSZx4Uw1NE1Q4gWbrxe6cgh4Xf53xXHgYbCLr8rjgM\"\n  b += \"dhRv8DXEcZjO8xr8mjgO2w2v9a5PytOzSL/SXVlyCJGtssrom62qyoiZraaYuGb/O66samIoi8A\"\n  b += \"2+xAkArb9hYa1TddjOQkcxXMhivL+YjU9yfINJZAcYboiPN8THGuKj2ThaAY4UYTuAN7FTDW1NQ\"\n  b += \"F+qftXvRH8Q4W1EXzre0VHqMqLEKtMp/OUQtFDKtjjSED/dEB9uiA+Vmno4WIKlvJTCZ4JFPeqr\"\n  b += \"ZMvXG+LT5Wx8qiE+mYnb9P4IhpJZgdnzefQAlXECVEIw3/5ywpBBeTC3EefmUIffIbWu8ldJqN1\"\n  b += \"vl9BKf6WEVvgr0uOuO7Sg40LKMgIXzcZ1co2/Rsqs9ddKaJ2/TkLwR0KBH0jIIuNiDIV+KKGr/K\"\n  b += \"sktN5fL6Gr/asl9Ab/Del+TTi0Ys4uu0hqzSinZuHXHF5NYvhbSTM3/moUb67wOrxSq0nPr4eIr\"\n  b += \"yJvhEi7irwJItVaeoAe7ZXZRJf2yjp7BsN3FJgmupHydFXoBmw4jt2IVKep2E1YOI5tRIrTMo3x\"\n  b += \"PnUTfcpcVY/3bpNxhXgfNxHH8KJuPI7hDd5YHMOrvVE9U73sCivYjbh+JKnOmKSWxSS1TEhKF9c\"\n  b += \"xTFY6bbcUaenipoXJS6ctliIxXfxyJKzLm6ueeNHYjHlMlWcLxAbj2M0QG4hjtyBG4titiPA45v\"\n  b += \"hdEtoaLzdIJ+zGh4lXp8VfEbUujmGY2HXaQCgm0MUTCDPHNRJqjRcqJODOmICXxYS+LCb05TGhL\"\n  b += \"4/zLZcFuZHI60tRC/3xTsM8tBK10EF3T6ivJ2Ftide4tJs6ndzUkec3cVPHxEiO21yVUld+1zyV\"\n  b += \"0q/cphVUCjqlc9iHmk7u5FwVQUdwnoqgQlNQEXRb57KrNZ0cznkqgq7iCioyQhBXaiOIRKYo4kk\"\n  b += \"ZG52wqUFAxFLtoJc4R9U2QY1KBegyzlMVoLO3Art0EwGADnpCd1YHN3qeFzed3K01erjRxTla1s\"\n  b += \"WNLt7Rsj5udPGOlnFyQ3seJHF+d6GIHRyz6EWOXnZwgD7c8LUA8fPmEo/Gft565xzLmJkzlgkjb\"\n  b += \"yxTeu5Y9LyxVHOGgn7usP8mKHY6+h4KyyT+rRAFuHI658HY6AWVw/gOhU2uKHjggxb6JiHPEig1\"\n  b += \"rKyni1ZCiHLCg/WiLzF3fk6LaK+ZM6dm7pyauXgwc+fUyEEEmcGTs7Ml4ptDV553CuwpBDZCunJ\"\n  b += \"e57EjthbCmYXeOrAsemRDTHmMKQ8T0V9dmZ2VIM1Y4nyqqHyP6OzUpiQu9HTl98ZWblkqjMPRGI\"\n  b += \"cjl+CPjcR6Mw6Hc2lp0MjDYb+Rh8N6Hg7R/YVOjsiWw0LDIxZHNDJi0Il09kMDCeTfRFee8ZTHv\"\n  b += \"6W0LSLPeB76Y0G0s8MsD6dEsVQLe5bR2REeES26CcQ18LSaNle4LSHeNnKRVCDKJZdiCuunFdbF\"\n  b += \"081Kxrp4hEMOMS4F62N6DtZH9DysD+dy8GAuB/frOVhHR5M6+QNrlzeLdOUGp8SOYMJVhCfCOrt\"\n  b += \"X0hNveEsTrLM3vDacCESJI6Rejam/TzlnXBZjH53gEaGjH0H0/lShwuJpMHayU+bNLkwQzoabng\"\n  b += \"3iHXTVt0QcO+mJM7/Yd5TOHu+SCRtVvvqWZyZMHL8hV+mXMmETWs6EsdO0xgkjr2mN89WdN11+j\"\n  b += \"oM03A2GHYBkJO023mr3kt8dcUznpZA7QY7pyuT4SFeOAVsT30Y6u3Zsxalx0ggPy4jmCqO5Ek96\"\n  b += \"7DhvaUr8VNEtmiuE06cIZ5XyO6Wz9z30/bWE+dUUl1qxszJdufBT83fayJk/dGGXzN+4nvaSRYR\"\n  b += \"gx5tqyAUF9oYwfQ470WJfZhXyc6Qrt3vK51IbEykClEs3dipHSBwk/CokiuvF1sTfks6u1miNKz\"\n  b += \"PGyoAiFL+AuhISmFIlYMOXFtzoag5JfimjzhSvXqUU6tBfXTVGXezRLo06dHq3BKaIUSdu8bKoe\"\n  b += \"xAxt1IwN6ncvnVkvJGxuyjpNwtRN8Q3CBhlQwplKcyMCeWNKk5nZNupNcwBxCGSkVc9lic4S4Yg\"\n  b += \"MY0NdLyGVuw8E+J4rZrBxiB5F1PYEMdrWWxsR5QuF2SI47UYGS3sXcwjjLOPL0Bdm+w+xOOcg77\"\n  b += \"HSGDZMvbx7NiX09zh2HGgNg90KXvA4yVJXKPFPreISNA1mhcLuCHlRayUmqduREWLIElco7Wq4Z\"\n  b += \"XYjRgtMbJFYrHY79KyNa16uZy2Ftg3i/tmias43k8VRD6LHzNPuV6jTpILvZKw+5a0y9nYc1irY\"\n  b += \"EX8x1m80fBboK1e6F057p3yHyYadoP/MIPMzg3lP8wQ/2FGw/fDDXyX10j8h+lNL/PqdHeOL/Ma\"\n  b += \"8/AfZsztPwzfFw6MHP9hOh7QLypmi4rZomK2qJgtKmaLitmiYraomC0qZouK2aJitqiYffsrZtk\"\n  b += \"PO+UqZpkPOy0qZouK2aJitqiYLSpmi4rZomK2qJgtKmaLitmiYraomC0qZpdZMct+cSdXMct8ce\"\n  b += \"fKK2Z9ncYK+eKOsyd0st5n5/OXPdR2Jh5qVz9Y0dlB7ZoHYdCd/ppev/Ohigmh1Z/0O99ZsdgtL\"\n  b += \"fkM9h3UHRLPrLZyS9s5o1taV5zRAk3HbmmplqBVuXN1YGI78YXCVnSJ1KrcuaLbCexphbz3eOTH\"\n  b += \"kdsXd6gOOkcCIkJ2TJy5OsqZ67CeOHN16JsZTc5csVrQ+Nhza5U9tzr8RYm051ZqHSSCKoxOWp0\"\n  b += \"uY1gnh45DtnRtmFxAhl7Sv0qPMYQeoszQjoq7Khr5nutC/3eVgGqusHOo2BUq0EynuZ0rRffU8v\"\n  b += \"osoOLTh8POHfWj/3DOrIerEVkwPxx/9pPkMai3FupEK3b0MXQuVrgfphN6OWSTt1XlJMqGdqLTL\"\n  b += \"wGhk4eznYD9OBO58EIasQ5Jf2CGg07o1Op0p+T94dXUqdV+Zz1cgx1ajcQDnVmddIarBtIphTqG\"\n  b += \"PfIwXchzVtvgzUmhlWiO5j5ohZy27wZFcqdls887WBzJ551dC1t66H3c8i6QY/au/eTUjVxsCVk\"\n  b += \"VkZ2K2Cs7dirmsetapxadtBtc1zroYGzIRrGJ/5VjuRXxRBOl5vqYs5lo+ENJ0A+FucBN/My57M\"\n  b += \"XRzniDtJWnRDvx51nF/lSxRvIbW2jwG+uw31jofbkWo0rRUeJ1rLM37Ex5HUPeAqqxcaLICWBn2\"\n  b += \"mtsKes11kGvsV4p0gNxogh9Ei/GviUh+x7qUhG7VPUt4RT0turbe3wTxlbcmeRwUD1BphFeCVYy\"\n  b += \"s4wbAiLvfsxiSADorTmVu51Zv24JyMjmFob0Yn+ylHtI5oF8viaT2BEjjZz+eYGXsHYXdChow2f\"\n  b += \"dCpYzMQcrAK/LgiXsQ7fTX4JIWiY+Qf0C+2PcWVkpM00TDHgGrNskyTz8gCR5EyXXdS3kqm5mGh\"\n  b += \"LCsVlUzZuEIvSMxERkoKPlMvnZLIkvUWCSwE38RrZQFeRnEzZKNfTmQ+cEu8jZ5n5yf0lUw8MAD\"\n  b += \"gFGcnEwpZ2VtUgfZaCPyIMmy+gr0oNdEPxXQ2ydY4h4fPUKhphwCfsTJc9/6XG2vzrj9JcisSwt\"\n  b += \"4fYS/8MwyRNglTz/zTzMceMyDLPMXgZbUsNcCVW2pIdZzh9mef7DbOFhGjUcZgu9/lRR7m87Z3J\"\n  b += \"/2yz0XvkwW9IecEvi5ddGp7G5s1mOh1nm2SzPa5geD1OnYZr+krtw0+cvqUEa+4TlATe4yXbYTT\"\n  b += \"YJXBSzTV4t5ytqyeXq0qx7bOlU0V9G353Q0I9nhagLtw7ciwr3ooK9ABl2ilxcorRv9VuxC3bSB\"\n  b += \"Vn5pAvJsqy6UEl1gTzdVkosiIdludbxZaZk8WuXFY+XAZZ0et6kF5JJL7BDVTvjUJVlocz4XRUd\"\n  b += \"NwA6VFWCTtE6rfvmA+jyE3bn5B91H1IJvtB2b2UZTFKxRttRI2jlbvhF+owFbxyLfmsNho7THeA\"\n  b += \"j8bvqomdcy7cSl6tF+Kvvgcj94rQ16iZ/reJ41TgU3YCd6hAPrAAtYocpgTIXJXPUXeJlsY4rEq\"\n  b += \"yIVbU23ofdfmB/RaP2sItFNZLyciQ8M5r4hnK5Sj7LVUy5vKx/o8EpZv83GtxmDn6jwbHmcJwgr\"\n  b += \"jdH4oSMt8voP/3UF7SoM+Uo053F42dhPh5Gv9jsYTTrU7SSgVUysCJ+m+GflFtZjPWnYkvQNy6h\"\n  b += \"zsAYzAMxLE6Dv2QPe8SFfTr7uy2m/N06eO+D/m7JUcIY4uJLqgGKNXsFncOh6G92GmsOGeQm1FW\"\n  b += \"uTcj1Nx2phU7szsSqvgdVS7ytoAuuXnx33wLFTuJbkQLgL+eboG+xYUVcxqJX0/H81Y6G/22EPt\"\n  b += \"41Qektcb4R+ibjlE4OqKiWQUOlqxbxdXEzlZZttZ5qlc7SqVVO5V86AYa8WIZb0QQG/aJxSioOv\"\n  b += \"kjfU+iuST7c/wzXX9BUr7m/+KtRikav9KI4GLvAI6zLCMmD14geWtEXjn+l/QDkPGag3sK+Mzhw\"\n  b += \"VAX6VeCICvSpwGEVqKvABV0C0yrwsgpMqcBLKjCpAudVYEIFzqnAuAqcVYExFXhRBUZV4AwHrP3\"\n  b += \"5f0J0zk1uA/dF62Bvvc+3DvQAHmAx5BMFC2U/KC2IN1ctq0DjF0dIrTvgQxH3AHviQbKI2u8iz9\"\n  b += \"E4wyUeIrShASBNozjzJTyQAIoxJTQPOvFLqRnjkBNNfTM7k1wK5W3SFsd6+QutoFVyfCu9zG0rf\"\n  b += \"tDyKJNTJ1ItvIfKmJlS+KtlesVUaEjaXLVQq+THMIy742CSLd1GHw2mxLOIYgbkbmOZNENNpLog\"\n  b += \"+YwsqqiVFIxL4y00t7A1zsO/w05NTZBKrX5eD8wM5pyo/1sjMQ9OWao4zBWmh7aSNeyhwkECJBb\"\n  b += \"eSt7mDdjlmXtC+ujSlIXD7jImnAP7fBPobMJBRHUZLwvgvHPAtxh0XkDTAppMQJMCuiCglxLQSw\"\n  b += \"Kq2wyaSkBTAjosoJcT0MsC6hPQdAKaFtARAV1IQBcE1C+guhuD6i6DjgrocAI6LKABAfUloD4BH\"\n  b += \"RPQkQR0REAjMuR60o26dOOMgA4noMMCGhVQXwLqE9CLAjqSgI4IaExA/QmoX0BnBXQ0AR0V0LiA\"\n  b += \"BhLQgIDOCehYAjomoAkBDSagQQGdF9DxBHRcQJMCGkpAQwJ6SUAnE9BJB2RgESWgEDidSPGXAJj\"\n  b += \"UTRaCkN8+wN7u6YOlktlh5/6OZLbjzI5k9mrzrrkYwbpajNrv5u+jpZkSOIika2jH3JuWCDZJkI\"\n  b += \"mm1PcwtwGWnYA+EjfuoA9jmCsHHRjDdDrovRhm3EHXxfRxmVVENw56LQbSctBncZfxvBPQ5/VOO\"\n  b += \"+irGLiXKDF0mVhBNSR6xu9OI8mHZeaKsMKMA+oV8VbYyuwH21ni0HAJM3G4lPk8XMaCIHTS6xee\"\n  b += \"XOPxNa9fNIHDgPYDiONwLfnYc6KLF7/51e/d95xP4FOOvwzAyw481wsS6TN/9CwA1j7XS351e9H\"\n  b += \"T8bJo3UF/3YlI/+h+kTdYw1d/EGtAxwprDvjmPiztU4l1J8KlWGIZFzjPBb518b//M3pWJDcfqs\"\n  b += \"A6VWAJFljKBUg2kUcWzgaF8Tb10L50gSoWWMIFSGKhp4KOuMDgz/3WrzmZAq1YoMoFSI61wN9Vc\"\n  b += \"QG8ms220IIFWrkASTf0HNEeFzj841/72WwLFSzQwgVI5pXh78q4AN7zWpkCZSxQ4QIkCdHJyoq4\"\n  b += \"wK989R/HswUKWKDMBUg+on+W5XEBvDQ2MwU8LFDgAiQ10W1LW1zg//3Zw2N6poCJBTwuQLKUvZp\"\n  b += \"DosmJIEXpK7/EprzYdbD3OeJqNBizq9+nk5MI07dlbVYcplZq4rvqlg6J1AXo0EdCU7FIh9AhlQ\"\n  b += \"t3vPF+xpTduJ3ajbMSACl4XE27NTxyD108jeFdr1tjldhTsqRwgH14uiinvBp/Cx4yejX+DE5BZ\"\n  b += \"fTijJCrqUY3qZE3fzZKJ1ukE38XGXtks/SU8tjfGXpkZ3qEGWfokZ3pUVJjU48y8hIxqrOM1Kur\"\n  b += \"MVJdfQCEA97siisQDuGQQTsDJNMkUIjcua3XcNfoXMJu2KjRF2BKpZE1RgffpA0r/W2Httkc19k\"\n  b += \"RYBVJm8yCOPp1RwI/aEugz2Gli3JCUeMw7hUvfP8IqCwasAbGxujSSZcPVo7pLArP6qGNh7Kw09\"\n  b += \"xDE8IV/owjPhzJ11/o4EXdavF4Zsk2L/QwdY04P6NU9FDoYupaSsVBTFjoLog9K1Fe10+AuB7DC\"\n  b += \"mDwVu6wwZpBnQ7d/0BggVWiZQG2qZF9kPgMrRGwDlwefVf8tphomefFkXbYTUrEIM0D+NdIvjRE\"\n  b += \"n5/OYGRU53XoRT1sRYx4UfFJWP28aMB6MqBPk1vynTVyCYnBJYwt+jYX4yBw2VFisJRRiean6AQ\"\n  b += \"OpuZvLM7NydVfMHnKBOG/r4unSYZ+w44zQ2J12pDLDtrORDp/+HXUwk9GAa0vo2+PIlGBjN1g0F\"\n  b += \"SNWDIfbb5AVjO+yXiWG/1n0cJ5QR63BBMjQhtnQNl9oGLSSE5TT6Fo9V9oXp7X8VtHeK1n4oGnH\"\n  b += \"U3ht28Av6MvfAmzwlqPXzO6XqOTJhM1Pxs/A+vbyG5ls8RbquMOLKBW9ONAqdG17Ow0OouRwz88\"\n  b += \"olV/3CLOtKOjGKMzGWwoOv8fVDSNpJ+0MlzyGST64cwUD8vATunhcpxiE8/uJo0nA4fGWLcE/dL\"\n  b += \"f6s8jfoaoRqBJGHl8c427QLSMMvGEGHeLepBMbx2nl3hXdcZfSj0gA2UoRHSMDuP8Gu9xBnVCBv\"\n  b += \"TTls97U97qGZsZLlwhGt7KFCMCe4b4wYhxSF9FfI7MZaBNV9gSk76BloTEhqtPiJJi7aKPg+M9q\"\n  b += \"kFDhQ2AJb0zqz/i4rfPOGCK07Bwjb+6F/14kh0r8e9qf81DsC3yV+OXclenNTGoXxhsQEcj5Ipg\"\n  b += \"/xhpgbCLZ1yh16u+wzDVQ/DD6OljyuknbBzVMzgjYUCAI3r1h50mNAHjGgGJkVGDN59nDG5vxAg\"\n  b += \"6+QPlfufd9B2vjrs76btdHwdpQghNfbB8DZpbwODU95Lrzd3EHsGwSCpRjw7nTdwKP5msdj+ZoN\"\n  b += \"mn5gGy1bi0qaExrKUZ+iRPzVqYmjU0NWTMMcP0JNT6VUNJFjy6bvFzBYrhN4mSiawomdZElEwqU\"\n  b += \"fJxbrM3LDxQsYjJpjSFIxYkB5GL7q/QWR5MQTT4EwZ+y8yKhobOMDnsbZAjFo29QHLEQvlgRcdj\"\n  b += \"+TC7VDmVkipWdCYuRc1GZ2Kx4qDBbSAjrP6VI2ii9RYDsN6iPr38bvU5Zs61pPqrtgjwv7f8KmY\"\n  b += \"rRsUarCIltM8NSnS3AstM692ZKQChVf0XIyvcB4iWTjq0d9EY7cYGGBrORb8hwh22HNkZkYMaNS\"\n  b += \"OTakaGDJgRJbqe4Fl5MrR28cdELfq5tzPQaI7koMtQc/QYbGVpjmAG8GLKjEZ+Vibn0YbJcWhyH\"\n  b += \"B4fIoPPK1X/zQldOjocd/QvEmaGxOrnnRgvkAhiQpxzJ7T2mxZ/XSfqrv6RxTP+3h7jrMnBhxFb\"\n  b += \"Y6YvvrMhE5fv7jHGTf4AT6RBKqODEfIgI+Qh3guZUTf+j9ExSugYMxU67lMkG6OjX6HjnlxatbP\"\n  b += \"TjRu1NMfhZE6as0z3hMnT3TjZU2Zmsrfv4bmeNlNzvZ2Hdqca2qRBP/HgttS4Ihnb1qax9Q3K2L\"\n  b += \"bMPrbu9ErbHZJI3hh6tLmMumGNhYd9MNCSPRMLhK785fU6/IbivcwKFrXfRRXUwpQLR7q9SLtxN\"\n  b += \"NAim6zjYinLzhzrliztzMB/S3SDCSBgs3utnzHTspB3WVbEyobO+Lca9li+PusOy2/cYPk8J+tD\"\n  b += \"V0nF9uzuajXeOcos4IBHSCbq0el/kM1Ve8Nc4NKq+66SiWhudPxH5ikTfySRiXp0Ji6FrUaH+5K\"\n  b += \"d1oTaHlUHk70OVhOzqOxfYdwnEQ3VNIe2JUdsVcTjIH7uknfSKQ7FozYycBMGxeweY6uM2NJwIc\"\n  b += \"dkaYfRZTG6NF5D8M2iB/Bbz9H0/xR0aTOhS4edKA/8bGrgE2Z0vC9ZC7pxKUAH/Ip4eUUYU0sDo\"\n  b += \"uQ3kbzp5sBTDIFMxRlVAMXbr8rxnawqRkp5o+UFA5Qy7PIlIfofjw5/WnUHF66jcV8BT9GZDOzl\"\n  b += \"eS6Fh+NpRxfY0flUJU50fp6VnFXr6V8FRvWQjhpsdU9YSkxB6S7rfmt7VIUQ3kVHXvWfneh7QZT\"\n  b += \"d20nhALr8b18iKwq89DY/GmrRun2h8VHQKcx91nYyxjiEqriPhyyReRAyHP7Wl3S2GRTGRDvVC1\"\n  b += \"BNLdRAh6QaYR6f9c2P7QPWpK+WovAs8x2shxyCVVX/BN8U/BLspso27gIOf+q3sSfIeTY2HQGJH\"\n  b += \"qxedHAlO7iv+l/cJ0KjoQemEg3NPVADg34YcT901Q+d+oFXKP/VpccZl452zYO+tSc0qn/nqO6E\"\n  b += \"GtoGM2rMg9xK4EZHGBo4xqEEhRH2Y90+6OK+nQoR0NZ+2nvSV46BoUoBmSH30HeXHOwOGRjiQyP\"\n  b += \"rOqzat/Hr2tgF+UyrwlM0LY1pO1FCIVbQjvNw/bcZI3r1l10YArJY9bwTamRREWlQHL8wS5O+J2\"\n  b += \"qTZ1We0xe/txZ9bF/0yRpgWFN0YhzE7/FAB+7t9GlWiIiEbKQbOyt4oIztEcmhBRCI649i77SOC\"\n  b += \"L9mevHiRfdeNJOwIhjg46G2BzD0UaKoSD+4J9pWK4VOZgiIcNjFVP/WQVwCrjUxMtJgbPhppl10\"\n  b += \"24/zhLYhmk8GIGgfDTlN1G61qE0IE51B4ynZmo9G1j7gAG7g7k4EdJItkA4t+BoZoeBiGWhsgYJ\"\n  b += \"IC3BCqRNAhWrE+3BsVg7mMblEx3w69xQ46gEIW/j9N3MXcFUn2iChMtUZ4NTR9KDIg5ksJeQGpf\"\n  b += \"CGDS8s9zzQiaIU04BAUQ5WP22gFbFM0S4yWwfyrQEvIX1pTNCwYQQKhmwXdf5gPVCvnlCvnaJZ9\"\n  b += \"DyuHwz1hGABl0SwZMZlE8Fit4lgdUWwNj+QjdgIyax+E9tHOjMrJuDQ5PmSaUKFalfIA8cWEBUx\"\n  b += \"BkrJEO35DtGmIcZYY8Pp7DDzmZQGTEyaM+YUk+qKSfUGJtXzmBRVs3j4enY2oRHVEYNmFTrJg3u\"\n  b += \"Avj1OA5d6cC/DdWt8wKvjRBo8ZoOFgMGtR5pqHWvmUCR7VA1lq2SH3vQlvbmfLMfwUt9iqaDtwb\"\n  b += \"cMoDM1EQtqnajRWw51C4LVF22/ROe9aOVVQuPYcnQUe1nC9b9IYbK+pv4PYE8G4jZJBt7bCRBel\"\n  b += \"qJ+BkFPjkGItsJa9Wdc38M9r4Z7DqQKHOewqiTCE0ztgU6cMUykj9aXolPY0sV12OgQppYxNIgh\"\n  b += \"/Oo5VU85oz5YMYgsMNKPEVxDCIFpyABGjgjkSDrbIEaOSuRoOtsQRo5J5Fg62zBGjkvkeDrbaYy\"\n  b += \"clMjJdLYRjJySyKl0tlGMPC+R59PZzqQhYxg5I5EX05FxjLwokbPpyARGzkrkXDoyiZFzEjmfjk\"\n  b += \"xh5LxEXkpHpjHykkReTkfqF3FdlsiFb6UifQi5IJF+jBy+KPOThgxg5IhAjqSzDWLkqESOprMNY\"\n  b += \"eSYRI6lsw1j5LhEjqezncbISYmcTGcbwcgpiZxKZxvFyPMSeT6dbQwjZyRyJp1tHCMvSuTFdLYJ\"\n  b += \"jJyVyNl0tkmMnJPIuXS2KYycl8j5dLZpjLwkkZfS2eqwfEUvS+TldLYLNFkSYcnGi78tgiIwRFK\"\n  b += \"ArETXByhMKO5re0KNFiySPHTSi8b/xh5f34NAk2YZQU4Pfx4twk2SSCRb1S7NKGkZUE6ol5cQqL\"\n  b += \"FWw0InUQjU63XsKC7eWvVXXdwVVE+7fvluDIU6b1dF8ITG/dYhfm8Etap78bUUNIIlIzMLOou1i\"\n  b += \"syE1vtjSabNPEYdx/jqDk1neZgIRbpw1UiyQqCIVrYsUMUUFu+f6M02Fqm4E8zDDo4Sl2VPvh8Y\"\n  b += \"44DnVPX5/7D3NtB5nVeZ6Hf+vvP9Ske2bMu27Jxz4iRK4iQCkti0bpKj1abpNB08d2VxM03Wull\"\n  b += \"3cVm9ci4TySZkMbKlNlErQwDBBCrAZVSaYk+JqaChmCG0SklnzCItAlIwkAsqpMVtQ6s7DcW0aX\"\n  b += \"33s/d+33PO90mOnKRDYSKt9b2/5/3Z7//77v1s3oOmjilvTYrJ3H5EhpCZAXkzTVUgf6rRAWwMo\"\n  b += \"WBIKYitOZMm5CGPuiiVaXlP9Ya2IvSi/R+vXj52cw/n3z9sv+f17qHu77FgFj6m2tBRJnNu9e0W\"\n  b += \"MtB9USVr2fOLniNWOT3QSeh+OUBgY4jteAsXG7rzwXaliZuYUdSUzjNYy8FfjC3ih6vYAHNefsc\"\n  b += \"Jwu08N6x6aHD58KSHBhf1xqGBNyKhlCTkQ0OhwkBL+YZjPGhjqcRP6sXOgUaP60wErLz1t7bdZr\"\n  b += \"700g4BPL4clobaWdPoQPZ/0wpfGgOQAgMfo3TjuD76lu1pG1lDWCCSjQ33/Kr0G8/0/MD0fNfMH\"\n  b += \"dKzqO9QFk+BX5vHVRXjyjtgp4+0agdYLyjUi2f5fIBdYIqimBhgPLwoxe4BxiV+f8hkgs6pvrgH\"\n  b += \"W6BHxbmH9Rz27XnJrQbiQ3CCtzUZDw4cC0N06hA7XTpFvbXN9G2DbxmPGXWomgS9nwrRaSq2g74\"\n  b += \"KnaYunaaO3lKXTlPnTsOSZJQnbdyxJSztEtsyNHW7akieT6ByYjZ7VB2y5W2q7jtfQRLQPRSN7q\"\n  b += \"Ltf3Nms9uerOKKY/GPaJYNdlWyOMHjaMDIOywgG2YTY2CoDHHbhGPoofHUF+4HiXMEVxgSx+uM4\"\n  b += \"4kYwlw4Sj3vnad/7m9+lCjyrtPVpAaxRJyDjoVpg3or2ebCtIfvT5k/xY3dk7F3MvZPxrWTh9O+\"\n  b += \"kjr0g6xB/HhaH4ubB1mGuI99xQ2xNTp8gZ3eGRvPnIMJrxf303TMXC9JjYUQqWYx80kEyMo/OXL\"\n  b += \"+t77wvk0TktFhVVbKSSENItolPzxO9G2cpOhUHqrFEVZfHveNoGaNI1AOT86ek7FVEh/c4D4S4n\"\n  b += \"c2jPtsLaj03+Lwh4oK0DcYm2adugduJPKAUEoyQ0DqfwdSH55jJyktyWsCHAHgvTJu1t8+kfYdB\"\n  b += \"3nBzUGzB5Xk4TDppzSrrNA+3jBxnL7jhMdGqSUs/X1Q3kNdmf6FYjKlNxToj/4VFejvXjT9feRz\"\n  b += \"UfSPhP5M8MjSf5M0hxLfaqe3Kuz74yhvhA3rboS5V6sRZkI8mFEjzLzyRmgXGqFtG6HNjdC2jdB\"\n  b += \"+dRuh/c/XCI+8So1wg/vQa8S/WOLPgvi0HROCux3k7bsJjIe46O1siD4h/E3gMwxyeruG3sxryA\"\n  b += \"tJ9Hla3vETMN4UlDZ6kAxgLX4ZjhkiSuEqqyDNaBCBAOcc+NaYOVF0E3IMZl/ERj7IVt75JGtdl\"\n  b += \"3grjtFjLPGY61gyTHCBDo4UYUp0RbNhbHKAiE8e4rHGSPDQmZQhdFQMB6N/oCmj+cHz0oCAGofj\"\n  b += \"S5MyNOyKrkUtU8AxbcpgTBM9ga7VsehaXYyw5ekW0sFuegUcmk1m0PVwsXYOZg/z33o4S70Is5f\"\n  b += \"ZayEoRw3B3L8ert5eqPJQgLJXP5vacO+obRl+7QEqT/SDItGAh03K9ApV8wlkwh80uqjJfoUooj\"\n  b += \"bx20D4cyR2L9nJl+Vo/My/9U18swrgQAjhjPJZEQyFuK7konjXVN4TZuH9EA907o++N1vEtDCZU\"\n  b += \"Aq0L3VYWJRlUYMsHEtqfNCglqVd4ihsMrzn/7Ayqum5UjVPecUlT5y/WK6xdgiXtLCOx7X7YxoO\"\n  b += \"1cy/H0y6kOzgIqTVsQzHMoa/GBuPvpf5KSUP2j6LJCORzBc2Udoa/mD3b3ZJAqQGN/PADgNBUha\"\n  b += \"lLZWUaj6Fm/Vs5xjtU6kULtjAHRTBQREcfitftQh5Ols5nZlXnM7VnM7sK07nDZzO3MtOp8Jc0m\"\n  b += \"w+pOaMmg+rOavmI2rOqXkMJm18AfzyzY3uBmFXnYUUzi7sYpfdUQbQsvrHfbDQMNzZQO614kI/t\"\n  b += \"JPrMvcBggScpVzjuR/zWcdbwlbVMTrMz4CJU3hGClmcYo9CBsJGUkj+NHsU1KlzepBegLEFV9CQ\"\n  b += \"ZhPzKTVPq/m0mktqPqPmGTWfVXNZzefUPKvm82quqPmCmufUfFFN5m1Fo6g5o+bDas6q+YiacyD\"\n  b += \"Nlj3ePMzNe7wT6n9MzXvE+AEx3iHGvWLcJ8YhMR4QY0LLoeV5SM0ZNR9Wc1bNR9ScU/OYmvNqPq\"\n  b += \"rmCTUfU3NBzcfVPMVizjn9n4D5sAcMCx9AYEk/JlOPmUU20VzkD7mPukkz25m0YV9ycZwB4x+tX\"\n  b += \"mS+6KbV8dSRAaHyHg4CzrlgwhaJD7Ad+GASxFP9QTCNp3Xg5NBHNfNRLdZYL9BR7iAYttPQfM05\"\n  b += \"PUV7o4M0wdEvoKQOgkkdyXTmjeghPlhxO5LBfWWAkEWEdCSzWmk4mefdrtI4kswTqySzZmnOrlm\"\n  b += \"aUxdTmufWLM3jF1Oa5TVLs3AxpXm2nEwjL81jmoxjkgnGaWWaxKKkyUBRrZbmTCGZBuWIVzf4Py\"\n  b += \"P+QPLllH3w1JGXcxBIwpJBiFpiDh6nRAWLAtBNb91O62s0ph4RrYwsBkBfUrDDoTXa+UpwrRTcy\"\n  b += \"6G+DfVLoZKyOzYOKIQ8hBaD0QPgLQ6iaT9poKjzrrwmUtGb3OljDqPNUVLlo0IloW1eUsd+QPbM\"\n  b += \"MWrisnhUc4y29Ft0H0wJjJ2kre8AELE2H2esOiIr0YstRLDm2AG+i6W9wMG4RZuAg2wFMByFoAg\"\n  b += \"N+FMhEhDSZQdt+x3sxg4ldWw4D9EuZDOy2xxv0Q3y9ASX4Th5DUwfxyaBzgiQBaXjxxaWxaLZoI\"\n  b += \"3NTBu7AR/XTQ8zhxpNZDBDmtiYOZEmOuaeZbRaX2RdeW+7KbpabRLWr66N5L+B7FapcB85rFJhg\"\n  b += \"CtYjrReIC2MFjUu12TxUuXLvKr5IsI+xOUQ0MwhKlt0yLhM+Ewh/GEJ5xDyY56pHuyWerKtDNAR\"\n  b += \"lWfFZ9wksE0vMyeauw6ZPpzoyA4Ek0YcXGxzN6i5GwfZApg8atQGD4s6Nzf9wkpjCiHAOa6t0dz\"\n  b += \"K+YAzG3WL9TR3sGZzV5Q0VSVYSMSi/c8N7jDulO+mz3nS8cA+cXIi3XwTAuCkPQadwiji9VQCOo\"\n  b += \"Bx2PUSVjNhewtheyWsZcL2FcL2SVhkwm4phN0iYf0m7I2FsDdK2IAJu60QdpuEDZqw2wtht0tYb\"\n  b += \"ML2F8L2S9guE3ZHIewOCRsyYXcWwu6ksM1MeRdxdlMcXFTfTYSd9bD9+8sNzsAkbf5W2gdSD1ej\"\n  b += \"dDy5MXYFv5BsOHFWsqnnFivRddiV0xEG7CfmlGnBKBxIv2WzbaCg4Owo7uUWToYBS1vBvdDCEcm\"\n  b += \"37qkWzn8QKhL3UhPnv6p1zwN+hydtcUO7fYvF/MQNPfZbMFWpe7Yxyoi/xr1cH023kqth8qdjWc\"\n  b += \"O6ptjVNHnXAFJgXPPsapnv6Gi3Ld6crXyOT+IimmdSqbLchyBzm7SAGmfAAUyKATbVLPmR18fHr\"\n  b += \"loYvU2ZcajsU3EiU1KcsDeoSJ4pIZUBMrIMgGzL6UFESHi+t5jykd8mZumF1nEpHvbR0EguBXNF\"\n  b += \"3pC5b3Mf/t1GPneVfLyuOO11xOlZR5zedcSJ1hGnbx1xNqwjzsZ1xOlfR5xN64gjbYJ4bepmC1+\"\n  b += \"UbrZgu5npTNLBTDeSrmU6kHQq03WkO5lOIx3JdBfpQqajSOfRLrKl1EVMh0GCnm1odqlfIZx/e9\"\n  b += \"YRp3cdcaJ1xOlbR5wN64izcR1x+tcRZ9M64uQNXfTlRs56E5f5xyfR9sP3YoVDbDrwpzRdfxkYG\"\n  b += \"/zFPENhYbODqRcgAHJjssiheMpb/ipHLs3NEiq/KyHmZSpF1sN5lkNVcLbzI+4SpnBSh1LG8juM\"\n  b += \"2yykcOEKhdnsC50VCjsrNMskFCyZQlnZW38LZS16r1VWLE01LV7pExlmNdsq8HNEolsHaMEHZwa\"\n  b += \"y+cwwITZfv8xdi+oCs+1nHLm/iUb40kuc1jejtbXbf33B6zdetYS+441/vppqztQV2thcfabP2Y\"\n  b += \"fN1WJobta4UxjZ9IB6pS+9hpG9cMxiL1bxYl3ofuLCzQ6u+3vVvY9xIXo1HrZkkX4tXwW8OkRk3\"\n  b += \"qzxbo4V2Z+v2eW7YbmzE5ADydQ1cFiugcNyDRyWa+CwXAOH5Ro4LNfAYbkGDss1cFiugcNyDRyW\"\n  b += \"4IrVxPq88TtrLM8Zy7KxPGssZ4zlGWNZMpanjeW0sSggFgtCK1V4RaRtZE3rD+064gJ9V/gxQ9y\"\n  b += \"C2VBsFXOgxDcI93n7t1k0WdBWtsWIDY6SLxkS1HdYrySrkDC5SlSIwHo1WYWMyW4BWYf1GrIKKZ\"\n  b += \"NrRbEIrNeRVciZDIs+C1i/i6xC0uS7RflN2obje8ghZE2uFyUQsN5AViFtcqNoJ4F1D1mFvMle0\"\n  b += \"UMA6/dCkEasrxP9HbC+nqxC5mSfYPPD+gZIG4n1JvDBLTrJzUom8KNoB60a14ScyYH3wO59PJPW\"\n  b += \"Ch1evvUNssZL45nFQ/GV8VXx1fHu+Jr42vi6eDj+rvi74++Jr49viG+M98R74++NXxe/Pt4XvyG\"\n  b += \"+Kb75pVOk06zHnFZSEpSqVhy4DL8l3qZKAY4Cud8+RlUx1Z/nQ0FHxRioxeNeg5Haw3ExVvkrPP\"\n  b += \"0nfbQwktGvSQR4H5NyePQVI5px34SLL0Dw5Mc7uzr7AahFymRcYHZHeXFcQPl8PbCIr/RzmYMkT\"\n  b += \"WkQHjvqs8yHChMiufNY8llXlrry70ycCW5mhE8AZxp8Qt4tAjQdSlSgeLC0RdwQ8QoyW2rWBNxO\"\n  b += \"druZPy7eLBEmrZd4lBYNyHo2LEAgRbggyQ43JgbmKZRy4YzJ7OjgxwsF2YMZOgS120e4Rtwo0tS\"\n  b += \"0Y4ybNuJGjVgbXVeKClVyuoIi8oaGitIwtbc4I2CaNB8ajBN/NCeTzcFfJYfa6LpS9FAUT4sSb6\"\n  b += \"Z//ibvXaXOr61a7Pdo0Q0F1z6GTNogMUt93eO1yC/0RF6ZYunDfrEPQ99DnOfeoh6a5yyuCX5+b\"\n  b += \"nOqMkd7hTm6nGuxR/v6bZXLOFEaPRM8FqvWvxWb8RXZ0N6OnsttF5hGtwBgjgH/6jPgX8AKxtuq\"\n  b += \"RKwxfE3KwiA2oiLeoO3Wk2Kp7VhOqC7AvWbwikQbI93yl/2Ccibscf74emJSihhM2j8oNuuK+Ns\"\n  b += \"Nrje5GU+GU4FBKFWtdJUOrUJBh1Yhl5XSBWWtQiLLG3RoFZILiaBDrZAAewQdeoVEejooKxZSzF\"\n  b += \"PonhM9KjWoXHGNCroqQzb4aTAhmj2orMWSV7tKDhV01c6SQwVdtavk2NNVu0vOvp0lj+DZUfBFK\"\n  b += \"fiSh1skaJQTxUaRqJqDWiLXKJZrWlUxEzzvnzVau1xWLbfu2i2sVrt5b7XazXqr1s5brXYr7irV\"\n  b += \"49MZK5Zrwpz1RVHLADThhKxozjVq4epGKVGDK+QKBVocRdXCtVjxmVAAECqnCxRYXJMCtS4K4Lm\"\n  b += \"51kmBBfbspABPd10UmGXfTgpMsW9nz3RGBTFEGnhKGziGih7WVySS8qJOp2r0hbmiJy4nkmqSq+\"\n  b += \"dKh1zR4lYXLVLoJkKNAaOUpyqD4IybE2nJXYtIYfcgwDm9k0iMFNZFJNZ20kWkefbtJNIs+3YQi\"\n  b += \"dFFWIvbVq66J8N4COqQWqxTyTU62yLTTfqYnA7UPRk6nnPKetc2cp/zoCOrajqbV6bjJu6e1Nk2\"\n  b += \"2+F22ijt67F03CIHlny4OevvbNiedXW2pcpqne2WA6v0teHVulq8Sk8T5VkA0VFVWwB3VMVcDH/\"\n  b += \"Fr12JdC43aTNx3IR70oKT1GHuZ8gs0TyV9Aj2xz3UY/tYrZNrdKj1Gu2CCI/QShtZK5VrVKhtMK\"\n  b += \"oEpZVYhdom6NJCb5c0+kUhlbYSVKj1i/YqdGVpgs1Gvx23ElSooZW2yJQgGW0xutq0lc5V8la6r\"\n  b += \"9BIe7wln3GG8UTQ1vq08orkdYjywm/FOJNiD+Tl5blZSrotL2ILo9UUTrWUbTF9lbI/4/NFvJLR\"\n  b += \"7SYjNIhVKfeGEMlV9VVbi+OdlXC1tCurBrG6qChEoVzWINYU9ZmsdaFl819G/g3WF+UaFV/VYv7\"\n  b += \"Q8FVV/Vqu0fBVM+OEJ69hZG+HSUWHSd3mcdZnPErJQzV0lfKIJ/iRSLLYW1AmKt8DMwmPzhw8VP\"\n  b += \"x8j3fOz4agNYA1Pj0gYDtLvKXBXgQaIso6kR2o3sLjeWAgoTp1IgOcQoEqDogAMNTWQvWWL6q3A\"\n  b += \"snC6GaQfALBbQqoJozaJCr9RDsYozYFjG8HMXoYuIqYHE19FlauSIIWOWMqYIVcG9ytk5uYL8uR\"\n  b += \"TZZzg7s7SWEMJZfC2JXsghEnl8EYTC6HMZBcAaMfdw83uBHuHW5wW7hzuMGt4b7hBtfHXcMNfM8\"\n  b += \"gu1g61ZEvnZzxopr62TfPH7z3ZLr9CJhzt8fXHJmQ98TBm9x7JG6NvK8+AkVN6v8D4t8i/6uK/u\"\n  b += \"8Q/4j8ryz63yv+/eQ/ZP133OTeJ/4D5H/FkXiH+O+8yT0k/tAEdfmReKf4X3KT+4D4x+R/2REB+\"\n  b += \"pxI45vcCfHfRf67jghy60Sa3MQQXwgYooBLj8SJBFx7E7ikOGA3BaRH4ms5YI8HkDKGt/QUESRr\"\n  b += \"CSJv7N5AxAAVD6fbj7MUkXj+AFOYNWMIW/H2m1gOhYLewW1QDoLY26DhUXaYgsVgiIbtKARH5WC\"\n  b += \"av4kYeXB/ObifIU7z4IFy8EAmvVkQfJ00PMl9TMDZ0hq7hgQSLa2zaxdRLE8uJsLmrsFi4tY2aG\"\n  b += \"07rG2ntV1iWK39A4ILc88YP/pjbIyNK02HiKbeGEPDxOyrIDTvUN+a+NbE9171bYlvS3zvU99If\"\n  b += \"CPxPaS+/eLbL74PqO+A+A6I7wR8qV2Pw29Q4OIAKhZ7cYiASzhgN3vU4LGTPYbYow6PHeyxiz2q\"\n  b += \"8Bhkj5hVG2BmwPjeJeP7Mhnfl8v4vkLG95CM7ytlfF8lA/tqGdi7ZWBfIwP7WtzBRScN9Bw65DU\"\n  b += \"yuCv54K5gcF9rBveO0uDebQffjtLgvrroXxjcg8XBWhjcVxUHa2FwX1kcrIXBPVQcrIXBfYUdq2\"\n  b += \"lpcNNkkIr/peXBTbPBpRJwXXlw03Rw3UsPbuqJqXcyH9+NG91hinw92BvWGOQVXrzo6F4cr7XuO\"\n  b += \"Ptwqt+59pCv8JaP1hQ7cjU4HswjPMXsF/HaQ78iazEt/8naE0CFcQnN8G+Whn+rNPzbOvwvLQ3/\"\n  b += \"9NUa/j0H0soY7UN6WDHl2LjQ25exTyE+3/GNGfk7Gf3kHxj/QISjefyTf9X4VxVHEzMA+YfGPxQ\"\n  b += \"ZZ54DyL9m/FlmuS6zAPnXjX/9RnlfqIzKXEBhHs8FohxQZgM8yz/LqiGaCMaMIMqjeO9M3i14Y1\"\n  b += \"5IW+L9DHu34Y3ZIW2L9xJ798Ibc4QBb3Si33QYtWp4VOyMV1lJGEndTxhIvZYwjnorYRj1KGEU9\"\n  b += \"X4BfB8QvPdBgXuPBe19l4C9DwnW+24+KNBpDPsN2shupS3uFmxnsdHFFph2p1Hxupw51l25Yb0/\"\n  b += \"dcfATBk3xuNgPK6Ox+F4XBuP6+Nxz3jsjcft8bg1HjeLMO7A5L6fXGP8eLbz/rFxZoFk9rXRMQg\"\n  b += \"RNb8YucHkBuyEln1z3TTjjpqtFytBrclhZ068oQ1SfU6ITwQWUvE5JT4DtCNWH7CVV/BVLQ7F5x\"\n  b += \"xfZ9Y1CQ+OhjjOsKOpDvkwyj+c8Qofnip+eLb44Vn5cCD/cK744enih+eKH56Te4MZN23w2PsPO\"\n  b += \"KNDLel9mjCfo7/1W/90/sNTX/irP9Fz4Rz7Ti+851NT7/zase/RTMBYN3L66//w9G988Qtf+6pG\"\n  b += \"PSMZnHblumHO5duCWT4Z0FkGW33yPuvwwQJ3G3IeIb9ztIGY0G396oU7vWrhTq1WuBPOaoWbYU4\"\n  b += \"WOeesOMX7IXBWUWm1WPNuQRExGKyu9E64E3LZdM6dYHatJVcPGqIcnKt1Bhq79aLlNKvm5psaxE\"\n  b += \"MoVTBuXLiK5yqrVfFsZZUqnlmV/ntRwx6u4ZJRe91SdfRUhlNcKnPWmzc06FUF1hTjNiHBgrmuY\"\n  b += \"CXJ/fytq1U74YFeNb0emfLKWpuZSjOeUGnZaOeu5VQ6S+lsYu3kTNkH+DiPOUPpNLMOOg2tRqaB\"\n  b += \"VahU6yYSZzJE5/pICbVoCMUq3HEHSHV0+HCJSz25I+y3dDjjgYZNPXQvmLuLVuGW7VSJQrOrUWh\"\n  b += \"OKbTiqhZ0Q6HN2jhLFW0cc6GhZ/F3yN1UnxDf6PvW03ofE5XWfzus9hKt5TYBWs1xeb8RWVFjt7\"\n  b += \"T6y55W32h+Rxt5uBwwdVxcrY6nmQymjvMddeyd4MfZUGjkqLLrAaOVnL6/E4To0wuelYpe8NQLt\"\n  b += \"w58n7tJL+qG9Z5ui16XiIb2GqhDCava8pbec6x4Oq/0513/nIci9ZrB4RUHB1+0gG9ZLiGWKx1X\"\n  b += \"4/ieb/8jrW6stTXFFSXq0ioh326ABUCayNeJgnvXhM0kKuUBReYCblphdMnUwIMe82WZnvMTZbL\"\n  b += \"MTvzsYiU7/bMWKFsQUWd5u/OIfCdPUjF/OcMBD/sClC2wp4sGT/wxf1TwVgAL7Ce8NXpUs5z3k6\"\n  b += \"pCt1TfzBhwAWNl4xIk1dUzx82u4X6EWsJcjHSUcpGr5gsAJ/YbgpLdURwBS13w5fpFhLTOiOYB3\"\n  b += \"0IH4wWGNWzIHb/Fz573GYU1PJ46okNI8LNDPsQ4jJ+95Ju3JsBmC7vyTzIghu4DZFdAHZda/bBo\"\n  b += \"KMBwZK3tchMTquoizcPgZy/7uHV5ba/x2l7jtb3Ga3uN1/Yar+01/lXsNabmaBWfn/sO32t0lPK\"\n  b += \"1vcZre43X9hqv7TVe22u8ttd4ba/xL2avsfxLtIpP/efv8L1GRyn/19hrvBi5oaD8LDss6A3gdJ\"\n  b += \"bNi6EYB5y/PCklVNzKfmGdp4l8RPUvLlkrjNvIcPYw9/M5FjO0gAke8+wVVPh4vEYUVPh4qsLnH\"\n  b += \"iipckazU594smLjQovcQtGDFsbsRNFj3jimIEtIS2w2VwyGhsDZoscJKHwrekwZxzwSoF2BrWJu\"\n  b += \"Pe0Ua7vosPqAZUZtuuVAFke/GADd2cMSChkRLFfM30PzdQIJQpr8EkEQm3JKHzlAfLonY0UB1AH\"\n  b += \"qcVUFJB8A3BvPLdTGI87MQ8i9PnLzuymOZO2+Gepy8P28kyeQDahIJCsnBBhZXTtKRyKSRfYA6x\"\n  b += \"Ry0Lp7R5mY2eInhO/JG3L34Wdv6ivfEyTF/Ldshy4ELqxUlAssJaWJCTOiz1uo5h7DQKnMX/QFN\"\n  b += \"C0lvnYswMVQCdEtX3bRm4ZqlpDcy4EPVqBKHKyLrGicnKyLq5F18aLJOtxN1uvxM3wBsi5+O8i6\"\n  b += \"eNFkDYSsQkn4Ii07TzBznRJtVOYi7ZnsatzBms8eQImouDLZshZXiVVVYvQzpMYFiDHVSQzWi9h\"\n  b += \"kmhwWYmCd4u2yTHxrE0QqIMXHNGc6myn+olMovlMqPs+Ate7GbDGUSHf5hTfw5bSmllrrkBdeRI\"\n  b += \"+hrFmz9pU9rztrZ62s10G7NbKX3jw0qk0eaBmYRXDoAs0HdppvX/Mtlppv/iWaL+5uvl2MsHKh5\"\n  b += \"pt/1ZoP+34pcqi5DzIuzEXl/vJbsNm5aK3mhx0G1nKRXRYJfpDV2Z7KOl3jXV9xja+gXoUlvoJB\"\n  b += \"nq/wDGLPy2dTlkjafXx9gxNADnrBP5DWacms70JFnKx6iNy7oGe7Egfb0yqdu6HCJlS4ujB7GBp\"\n  b += \"/RbhuNrc+klvncuux3DqfWx/NrSdy62O5dSG3Pp5bT+XWJ3LrYm59ylpHZDcSjvzqR37qxZ/+wE\"\n  b += \"dW/pI8HoCQxKO/PfPJn/6Ld/3i5B7vPnL/j8//zt9+4Pg3j3+Q3O8g9989fXzpT5e+9JHfmcR2K\"\n  b += \"FSswhANlM1+nTapfdHd4gT3M9shEcU+0Y9kcVIVnySgzToLZlSzL1ZG02Z2C/B8s1tG05qUkQ1f\"\n  b += \"jJoYLTEiMfrFGBBjUIxYjF1iDImxW4xhMa4XY68Y+6gY/x/vgapQuc2l/tNgGwB8WKatCpV94LQ\"\n  b += \"bmXL2VCCmeARl9g7hHga4afe/jn0hgAvbv7B+sGg6whe/+o0/+/Hf+eIvDkg/+On/8t6/O3V67g\"\n  b += \"u3SDf4+Q9/6qd/5c+/8of/WJFu8LFf/4s/ft9P/P2zW7p6AVhzbReAUjnYVxhStSL0+QpjB1QPi\"\n  b += \"evLDo4fQI8Tt3xWzegQ09F5yDzDgBtz9qQSskxSiIOP9eFbt/JpBtCwziin/0o7PJS9z9LRaMlU\"\n  b += \"VzpxM6veT6fM+3BKBxummw0cwhx3KJuaejEcG4f9/mzqW2DSzQbuHx8Xlr0Qmm3XEdeXuO9YT9y\"\n  b += \"axL13PXFbEve+9cSNJO6h9cTtl7gPrCfugMSdWE/cQZw8D2XfOn/+5jEacXSAqfPK88qblU/SIQ\"\n  b += \"7+BxltNRTW7RCXAAcZdzUUtu0QtwcHGYFV5S5C3CscZCzWUNi1Qxz3DzIqayis2iEuAg4yPmsob\"\n  b += \"NohrggOMlIr+wzC5zH4PA+f8JrKisOddqXc09DJXOlkHgjmFQjmWYJ5QrBKLHF/YD1xd0ncd6wn\"\n  b += \"7pDEvXc9cXdL3PvWE3dY4h5aT9zrJe4D64m7V+JOrCfuPr6SYg0AwKXGtiw0MycvSaEsSaEsSaE\"\n  b += \"sSaEsSaEsSaEsSaEsSaEsSaEsSaEsSaEsSaEsSaEsSaFZksjQPcUbxbhNjNvF2C/GHWLcKcbdMW\"\n  b += \"1pvVsYSXMRevbqfKIPGVSIdX5Ur+HFDAo/PGUypuXMBDlMmELQYRvkdgZN0ITOIZ6GCDMzTduQL\"\n  b += \"xA8RIFGivbzLdzyPy1WDIYRyw5AUPsWwDMWNn8hbqto7/WxXmdXAYNGddFTt8CSrEgLgSItBIq0\"\n  b += \"oIpYKWbNoCwwp3VVURYA6l6F8PmwkQvHThx3ioIbYGBtcDsKzPmCcL5rXQInYaAogD7TVreBzfA\"\n  b += \"srE1PCX7FM7AZ0c0aD7A2roW18QysTa/c39siGFwWi8piMVksIovFY7FoLBaLxSKxWBwWi8JiMV\"\n  b += \"gUgaUm1ueN31ljec5Ylo3lWWM5YyzPGMuSsTxtLKeNRWFtHIW14ZtDhqAJLUwDQBBChWgQtJVA3\"\n  b += \"fsY1CAogXTkwAkCmQAYkZqB2mAgBAB3NKzNkd2FhREB6IMjeFrstzpkyOUWziiHCwkE/ajRhRni\"\n  b += \"WCSGhiY6ZZEnuEhrQbjk3OVxCRk46VMAkKpBbqhbjAwdCaGOhFBHQljCHKmb0RBeYDSUszTZVYt\"\n  b += \"4IwYUBM8JBrzDA5ixAo6Mry9mFegMVckWeTVYtRCTiYGAAQBcFVSIJutRQEItGipNm1BLEqJNl0\"\n  b += \"8xgB8VIRKAOlo2UmQj0Zxx4ZTqAKWoZwOKSREi76ohcp3lKQTws6sq/mjeGgVok7qN2NSItdF1p\"\n  b += \"RiiJGEOXZHjmATFaSoHM5GZqLfgMvBaq4OZ9JTATPAv+DxVdle7IE0uL0Ca1AxECqdWUzASAZ8K\"\n  b += \"1F0epesDNkH8XgtxkgObCMAPcFMDG1rTclZjAf5BaFvhTRhG2rSfZ8BIAl4FoNc69oTaDSBlCxi\"\n  b += \"JX0AtsfAmrkEtaRh4E1yqrStFbT+zwqBPy8UIjyTPflvLFhiSqZCA5ORKoWoFABwirY0U2kgoUK\"\n  b += \"HMXleZqyhKVTo1VFUw2IorxTBEHjUwLV4HTAvTZnw9MV0MZ7cTbOW3I7c2uRUvN8MH0io/3Ewah\"\n  b += \"exWMTvf8Lb2Q4UIs4m097cdYQ9p7m9Dvr2FR8LWHW0PqDmHaXy3vr9No3dkSv/it7cDwIle5wyk\"\n  b += \"wesdQDRFe1hiPsjuwWiQqNEdqbc9dbL7MDE1R+J3U9LkYdJZrGj4AxIedYRPTTkaYUIi1LoimBy\"\n  b += \"OSAS/KwLycLZTkIsgZ3vaP3Lze47TdDsKge3oUBb9MNDpb29Tzx6ZjJ2TIzc/mPbM4I30QbyGRn\"\n  b += \"Hz+9vAGNZqtkRcm6jDwS0OzuYnY5NatlS5N1s4Hoxmn47+H0r6jyrf14ZguX+IHPNfVenytorCp\"\n  b += \"Zvwfv1uKnA8k+44krZgbovbMAbiHUcmgMRh4raPSLytE0lf3DLCdO140xFIKNp4E1z5GgQ1k50j\"\n  b += \"DEqfnUDG1znUu0YPZDePnUx7351uHpmcSICoENkSXHLEloz8bcZNzSAeQAm6c4mplJccSXrQxjN\"\n  b += \"JwsWH6Hn2Ic028Rj7oH9kcnrk5hnNbPuRtJ9y2a61vnTVum6cWF9N02hixAF6Q+/M8dTPfurTFV\"\n  b += \"F7+VzlLWzW3woE9AwoV423bG81m5mbYV45G76F+geFPVchO3WQVoMH00NveEsbG5rzT/7ZdVBaX\"\n  b += \"c14qTz5N77GpxjslE+yWoblaOqRLz3raYSpT/zZdeKBKPVm9ndffrKSDWYr33yyEn00oLnhka+Q\"\n  b += \"xw46AhmPp77CMWatxwo8bszmrcepFfLYky1YjyWyZddkU+eNx69/iRNd+ZJ6xOiC2TIyfcqncD/\"\n  b += \"DvDv/E1Ut5uynK3BRGZu0G+iLd6JzbYi3PJgA1JB6tTNKJ4UtNOunE3EyEccTh0HowXjDg0kbSu\"\n  b += \"o7Zxe+gqej2g8l2Kr1mffiFFKz2LjhMmgQ0PxxeC+dMU7G1BU38Yzz/fwoz6+j9OH30YwzGDcP0\"\n  b += \"24+5Ei9b08cKkjfYeqjzkSCIvXeQX1tEpwRzTvHqb02xtSLIvBb9E9QRBpbmyYOU33aMaSILzlM\"\n  b += \"4yk5HKeH4xhhvcyYQfVxJ5J+irNtIt46QQSgyDvi7Yh86eF44+E4Okyxko0jlaRFVWvKdxvuoBT\"\n  b += \"6JuKNbx+HCkwncdBzPL6PlEq2qBBUeC42xX87TSO98UZKCFkfJvK2kybq8Ha8n9QB/VaD/tc+pg\"\n  b += \"Eo8JbtDC+YeCNOgu1RE6WkUUZrwa1EnP6RxpGEdcKO4oMWOWmTRf0fZA5RAiamE/cgpE25bngwb\"\n  b += \"fFjBwd4QuUACB+H063x5rcnNMczhY+kfXFzIoli8r2DpsY+tMOGmD6ucn6aKCW5megLAJMNh5Ot\"\n  b += \"1G1aRG2i00YqLcJoGiU69cUYxURbQyq/VWOkO1abiYJuJNoTqbQERCo05ebDRKom0QkBoFHYNDU\"\n  b += \"KaRDj54eSEE+P2Tx1/2xrNmtHQR/9P3Fe+zx1vL7s2ZLrabg+6fOjQ1/2vHW1kmaTFkj/TZj4qU\"\n  b += \"uBs2UzOIWit2dg22mi30SH79gOzcV8NdHymtQS/UdoIYhhu/NI3J74flQUazkuLSrQelphJb9x/\"\n  b += \"fUOf6HfurR1TdrI0XkTEb7NObbRwagdkCP5HUablHJ0mtTrXer68eDIhM0rWDUvx+SFk8Yw7RB6\"\n  b += \"YeGbkipjiZExMBr9EVX+073OVfzs4gm2vzvk3o2fO/FzB3724+d2/NyGnzfi5xb87MPPXvxcj59\"\n  b += \"hlg1mOWGWGWb5Yblq4xs4vpjj+zoLnyKXfnwXqO/E5n6gzuDXwwxTCX2ytJMFKGWdTvGeXBngUF\"\n  b += \"/n8/rD5sA7YywPGcuUsbxYMWdxY3nBWFaM5XljOWssz7ElYa3d9xh4Z75CwJa/btCvU4NDLX5QE\"\n  b += \"NC2NhxcyTFRQpJ29WNGYjUJx1LpPJaj3wE1rZhBUDzIAggDaBgHx5LGWofdPA6OgD14YXyeVWOc\"\n  b += \"5d/n+HeZf5/l3zP8+wz/LvHv0/x7mn+f4t9F/n2Cf0/x7+P8u8C/j/HvCf59lH/n+fcY/87x76y\"\n  b += \"DrfSQ+4izvoKHxXNyIKDbowb1MPXzkwTANgyi4vj6Yuo5eUAhQR/ygOLgS2y8qxeieuB0LoXWSq\"\n  b += \"EPd4S2SqGzHaFRKfSRjtD+Yig8prxU3/gDGzSFS8G5ji8HSuke6wgdLIXOd4TGpdBHO0J3lUJPd\"\n  b += \"IQOlUIf6wjdXaoPa4oJ5Qg169AqSo0MNTU1auSaaWTq98U0ulquJsoRd90K3pPi+DE4vJg6TECg\"\n  b += \"E4mosvQFn9kCuAcK3S5ww+KHMRx0amIQLF+GcJfvxNXU9HzGeMYh2dakoZ0wr4lrkFarpiYNOSB\"\n  b += \"3Rwy6ItbWF7GGU2nN9GrtP272zfNNjuRq50HAQwiYmnp0IbRBD2nQDILeNbUwP2GDZjToYQT9+N\"\n  b += \"TSXx+xQQ9r0CyC/uuvv++XAhs0q0GPIOjPFn7563nQIxo0h6BP/trvvysvxpwGHUPQnyz89sfyo\"\n  b += \"GMaNI+gvz/zlz/zozZoXoMeRdB7f/PYcp7Xoxp0AkH/6fcfvMOGnNCQxxDye7/75x92bNBjuKUL\"\n  b += \"+FgfoEF90xmYtzN1AWoh1O+RDyqsoojmn3XEDDJ+3N6ls88C1O4ErONznUOAdmfQrd5s/o8e1xO\"\n  b += \"BkVmoQN+lt9aGp5E+ZyMAM7nDOL7K+gh4NfFccC2DJOsqZc9F17JRAslNPJeM8AiVVXymPGFEkI\"\n  b += \"TYEYpD1OHU1GGER+yHs8UPF4sfrhQ/XDHCI/bD+eKHS8UPGQTWfDglki+zbhoapnw/Z8rnG/nY7\"\n  b += \"+DKd5jNxS+z5TuMvOJ38OXzZT0yWHJTZqabh4pCR8H4JtLGBBTCCjRnVZ4NhKvcAXxf6tP8IVh3\"\n  b += \"qxZuadXCLa5WuAVntcIxdCaj4zkG6rKq+IYtLq0W64SRaWGe9DaCgHDJnMVTzFbv5KigdcFHRBg\"\n  b += \"wV3smpOZLDjayjkG9dBjzko6GF67i1KpVXKmsUsXlVel/ywGqYZNrqACPii8ITQgCAQkIR6HBCU\"\n  b += \"MDES+JEGO/kOCUkY1pC1s+vnW1agse6BUwc5ej+JhKrAml0qxSSVFXewyKJDc+pbOBhSGYslMsz\"\n  b += \"+IYuEN8vA5CDa9Gp3gVMkXdVOJMhtN+EXWQtyKhlAjRbOJKUrHw/WmDG9tnCbHsgYgsNgRKGWhd\"\n  b += \"K/cAWpVINLcaieaVRAplucGSaKO2joCI4nrRwmYy9u99aMuQhSAcAxfaw+00wd2vjVJX8oF1C1F\"\n  b += \"b5WI2CPtahLzSSDnkHAOE3BTYTqnkijfBL2RSydOrVXLJE6xMqeSJjkq2UJcqGhFEkmL6BuwTym\"\n  b += \"69e0CJHhZQcQzuaK+B8K0qyG+DKNPmGHtVYKNfIrRFfCRg4RKfqUf9SORVHIOzGmqVuPNP+ShSy\"\n  b += \"wwPrwy/WUd9qyzx4Rj80Zr0QS1vhPK2tbpDWltTXBEfkWbxWdSAyhJIG/k6VfSK+IjJZKCUxx5v\"\n  b += \"oMjF+WbRKzcqq5XL7Jk5OKcycPoGnNPpYsB1WFUfGHBd5qH0MmzTwEPpCQ+lz4u4LIPCQkmNRTU\"\n  b += \"9LBoc0QcDLhrzTlqeUxyvIXXB8GP8fO7gbXJXpbnQ6wziDL1cNSKaWAYdebPsyV+SsPLLO4ooNm\"\n  b += \"mpW7akLX7FEaBkScHlME2NX1t7ZVVNI407H+BMGGmaUKukTtmF+hLNJMfRJUk8tNIY1IcrFs2hT\"\n  b += \"tATFxN2zfdaGF+zOcNpnQ5G022G54sXXio6+W23fqfZ7xT5DVo/Bi3PFshvh/U7JUDmJ4JcGIas\"\n  b += \"C54ttvwy4ykXBxTYGm+1FENhG/zce5dKyIgL71Vi28cvVxKjYaqnL1/7WNufSV/euFpsY3/rZ6r\"\n  b += \"P6nlYxXufbIHSDYVy9Jl3OrV1NoS0bt4QkhouETYqX0B/oR4b437NdYm1eoi7+Opn6+IUayQq6C\"\n  b += \"GitlFjiSaVDXExdfk2KPU74zOhEsVudjZn7WP0chYXsj4z7HOm4DPFPksFHxXcPe3bBl4k64qTF\"\n  b += \"9uRzn6X6CEpFLGprAou1CuqC/pBmsqkICphEKNpK7WgT584ublWn4g0H/sp+cVfK6v3OptUydHm\"\n  b += \"Qhk2xZv14VRsq5C/SHrZ66ZbZHpIBwrl3xIPmOHv4+JH3EVWFq1DoRbCslKnvLeYscpKmDbHxZT\"\n  b += \"lu3bezdQ1ocK29FvNG2SJfZYKPqfZ53TBh/ZTlEzBYy834qmqbcQFsg7z9ZyhKD+BW8ossCqfqp\"\n  b += \"lDrAvrgNiKejnqtiZTWvM6+5m2Yh1LbBN/82wNf6lpPvGyC9OhQ7NEjwaKcrW7MC8rb0nFfmL8t\"\n  b += \"4o/k9x0z02anDAJtbQz5KnknYHfPOw8ZdSDID2Mb+CLbtS0VjgtX0f3mmlZP7/Q2eqWYIacIkee\"\n  b += \"T8Y4A+TTMMTJ8wkYJ5p86p1zClNv1Uy9uEqeV7mgPq2BXJdUlSchL3E+u8Gnbv2q+h1WLSdu6EJ\"\n  b += \"T4bmbdgm60KyVTsP6haZFOJ2mDoIKDy1sIQZWadO8nZvWz0wjy1Ws2O/rcW7Cij1fk1vv/2lMX4\"\n  b += \"3/qUxfrFBWl5dm3JCdiM+3zDiOkxedoidUx2xL3WY3IvEW5fYiGNVvfNErW5X7J5mifVWBIxoL4\"\n  b += \"DK64ZIrrXa45CqrHy652mqIS3ZbHXHJNVZLXHKt1ROXXGc1xSXDVldc8l1WW1zy3VZfXPI9urFq\"\n  b += \"i0YzozMuucFqjUtutHrjkj1Wc1yy1+qOS77Xao9LXmf1xyWvtxrkkn1Wh1zyBqtFLrnJ6pFLbhZ\"\n  b += \"NcsktenUvuuSAqe9bHa/imlC1vb3qNsxEeROZy3++PircQiKsh0ldvJd0bAPwNKJfcS6hKO6Te8\"\n  b += \"+IfWWyQV4yC0uuOoNqY/cYgSpt7NzHKgL1TB4rjrAPeaLmmP1EkCiP75snDqB/YFMFt8araehKO\"\n  b += \"FrwmWCFm8ZlVnylEAsvyBe+KuKUvAwdyre24gNtfDVL2TwmUgksHRata0KVNYfqNptJbc1g1JZ5\"\n  b += \"MbStFNhhwykIXYYNWfLgWiEYGqTrF4hRV3LUNMTXxTC0/gFXRWO4eYyo+GWXfwCNJdoRGrabrk2\"\n  b += \"OqiVE3nGCLiJIF5ROI8t0y3Y7073Ev7fgL52k56UfhC5Ok198y/qemHy95A2EKZHpXGAOs6q4fM\"\n  b += \"McVhV9axrR8hpajW5+zr3ITIkvnWKAO/tAWbxQpgAMF3xmdfKL58BcJwNeXq+Tg5yfrHDxfMGYD\"\n  b += \"i6eHcNPxlp2aXmc7TVIAAtuGQlgeE0kANpBZpVsKHqkui0X/RdJf1FawUKDokfDeCxB8r7oQRN9\"\n  b += \"Bhcl4prvWQ5x2ArUL7giUL+kAvVTrgjUz1uB+nmn9BEL1N930QL1KyWB+qWi5PeQik8vvRyB+pI\"\n  b += \"ikW6BeqNIJJeWXXo1Jb9fTtFLAvX3FQXq5y9eoH6+JFA/5a5CVj5AXqxAfSdZOwTqu8mKfvOqk/\"\n  b += \"Viil4SqJ/PBeqHugXqyxLpK+sSqF9ZW6C+mxjzr6ZA/VCnRPZSqfhCowsK1Hc2ZodAvS1/LhN9s\"\n  b += \"a15QYH6pbUF6gtZO2tl/aoI1M+vLVDf3XwrlW9n8+UNVi815poC9Z3N1yFQv0rzLb3KAvUo8hoC\"\n  b += \"9evJ/ZUJ1JcWLdHeBM4sKZUQsCPSdl0ARcy+LB1P6x2tyNO9blVW5HnXXDJj51qxGqHURVuHqKn\"\n  b += \"K8vLAMywfzvcaCs0kTF7d+qtYO9asU1JdVWNEIdZexXBRFQGtkieHiSQ0+qpUe1Wutqpb7xazNV\"\n  b += \"m9W1NP6dV+raR3y8IwLdGeAnGyhaes4i3hSVtL8Va4Wum9l4ZFWqsGep8TWEqugIdSOGC5Xrwh0\"\n  b += \"mvcUU3GbIo4tlTAfC73bHJFJPURzrrVGkKrs/LqV0cKNiyC93zVV+G+o0USFr8LFGnx29Y/Fi+q\"\n  b += \"f+zt7h7ClHih7rH47aAn9Tkz7JJqsVrSPTA4TbWKlaxhCi3Wi3vNcHe1hMPyoqr1MttEAArdHJD\"\n  b += \"HcnVeTId4JTTViyQ7ZuLO4ghr6apzF4u6Ogqctl5SrKV1j6ZN25BD8iyZ982l37tw3xzobkRhhF\"\n  b += \"21Edco+DrIuKbKQNYaXCac8N/+CxjYtW7iXVjh4qveCSuSoO2E87wMfzhyWrg3nqob3ircpmBd5\"\n  b += \"WjySOvJQksH2aW/XaywNjC+eaWdf7RPmXGE9cp+Bu4jD/LJHEGu8ug3+gxfbOtiXomukydl9Baa\"\n  b += \"VaJJuffmpCRwCde9/BVfxqiHBkIksOBf/ETDct8FT30lMZEdFs9iBPqVCOt0SpqahFST8pRI5Vq\"\n  b += \"/Ok4peim/l5EEkeyVJvFKPv+2l+9fvVM633cKjV6F0pTG6j9LDTqH8bdr3GZXJhVeR0pRK5ioKy\"\n  b += \"LU9K+3lf/XKA0ex3hFE7iSyY6IjOXFER9iYeiEHzenPL60mPEUAdiB1AWsykusYjuQp4C1KryIs\"\n  b += \"GLNPybWmrAPwwpYlEfF2hCWPljRvR7zzBNvHQoP8UZaxx6CX0HAjE07heJ7Arom+icrO2z+cdsd\"\n  b += \"mKwd4Vsc5Aejztc5yAdGk29IEmZZ25W0+aoE4n4wevn+IongGkz6+CIj2QDXQLKRL/aSfrj6k01\"\n  b += \"8w5dsZp2uyRa+NEsGmBcu2cq3Z8k2ZopLtscs5FVJg+ySHwazIR4ETsbVzBk7OZFanaNBXD0YVw\"\n  b += \"+kgychoWzVjDILeogvA74Yoy8D+TLOvwwPxsGBNDyZXnokNZpFJ1LoYEVuPqV8UjS+5tntUF2vN\"\n  b += \"qcJuXwLKCore83TNyqZC0nvOp7iaSROj2c77x+XF5BqvH0d2cS7WLY4iLetK6P0eApMEOoNnI/P\"\n  b += \"+WxdTz6p5jOw3ny4Qp7kU+N8tlxMPptfTn1anM+mi8mn/+XUJ+J8Nl5MPhteTn36OZ++i8knejn\"\n  b += \"1GeB8ei8mn56XU59Bzqd9Mfm0Xk59Ys6neTH5NF5OfXZRPsjhODjCDo6ezNPfUU4/5kgQF6NINt\"\n  b += \"1Lbbo7y+Ufsunu0NQHxw6MsrJnpBKSo1QO1siNSU2U5R6MnQOYRETiJnaMm/7FDR5mnvR23GS8f\"\n  b += \"fbeIYW/iWeGCiRcS7418W2VfVviG5V9I/HtL/v2i+9A2XdAfAfLvoPiG5d9Y/HdVfbdJb5DZV/Q\"\n  b += \"UShYwSWQc3CUaNX8WN3pMezOtV0VdzLzmTAp1pB2ZVvM0pSiqBjPfHRCN3hKAhbTAPyPYCnVFUu\"\n  b += \"prlhKdcVSgki94ijVyzhKIXCUFPOFsYwKWEqV29rM6UV7CjpYM9ZRIdvmerJtriPbDvimOhejwf\"\n  b += \"cPLLGvkEaIAtyZUQFC8sxLf90AISEhf3wdEUO80ocqxlcBby1l2M6iMQDhMotcyo8G8BsXyLgGb\"\n  b += \"Z/4fhdIINQC2zJe6u/Gz534uQM/+/FzO35uw88b8XMLfvbhZy9+rsfPMO9cZLcwBPYG6kAQt8A1\"\n  b += \"HO9jBiHyg8st3sf0p7yBicCvTt09jYQfv4+X/5Q3MJV040tDc5EVTbqNh1ISQuycQWMduTlJXch\"\n  b += \"+Y+Ten3raHiK0J1A5M3yrUmd/FvMT74fYu83eIhgo/gzEDygH8hdZQvF/kbmMmuwv4ofif479W+\"\n  b += \"wvEovi/wL797C/CDmKPz/5xL1jIhQ5Lp7Ps2fEkUWOUvzPsn/fmMhdauTn2HPDmMhpjis4UbyRv\"\n  b += \"4ZQ543uPbEbXfWmNiMArECpDHWeq27dDvkF7AU9omEF+KyLFXSeWuZnMx9drDDXLthNE/LCZQ8Q\"\n  b += \"gPFYNIx+VcvcNWLRzny4aR3QhPFDyLcKFgBMiimG4r0aJqNyGyJswK0YeK/uHTWNuY1RkMAnm9V\"\n  b += \"u9SdNOWMuZswvbdG/ZSDplPk5ox8WmINoNA/kaSiLQRjq97T/b9IeLcODWuahmML8+aG2G+R6Lu\"\n  b += \"Qtban0lgaXw/f5U455VbOBU3x9R14ex1hwchYXed/xhA/vJd935ONv033rwkXdt95yoOu+da1Ho\"\n  b += \"Py+deHVfUjZO6qvUKmz2luOnwGsrHBd/c99wX9xrzTfhgv+QNogwig4UwE3FM9JrGqH1YsUnin3\"\n  b += \"C9+WZ2oXBxd4fxrqrtlaL0Br1+xlNol571l6Je89r4SqOS1POELLhVdCy1flGejl05KfgDBjvfQ\"\n  b += \"T0LeDlvqGj9kxCbqfRaeKk9QFyfgyHoSCV+k5tIOAgleTOpxtQNkGnK1nJ6WL0cakMoU2cyta6K\"\n  b += \"pWhA+23G2TLaxVi3atGhbZQmbmr6rEEZYjbBxZYGh4VH/IfVfujn7H2cYyiOxTVZHB3H0XD/Skj\"\n  b += \"4d6soFHXrKRx17C3WYw2cRdN9nMPSnZwn0pYWgfXDO5cs3kZhWZB309TYHdJA2F4YSVdN2R1oSL\"\n  b += \"o84rJG0heY1s8rqTtmTlafMSAD2EWAR6eX4F5/rqW0Wc3jzgIaTb6RRygJaL8+e/8Yf/cexkzHh\"\n  b += \"DvoKUngTO5a9+5gj5b6fz26CcdI6nUXbJoXjweObgOAihJrDhb8NHdB5CWn/4Y5TWhB6NBo+nvf\"\n  b += \"ggkvhAxga251Yb/1vnP/wPOCDGgyZ+D+L3SnygY0Pga8DGf/T53/vNyVL8NuL3SHw0MSQyttj48\"\n  b += \"x/8vd+uluK3EL8t8cHJBEG3zTb+xz/4yLFy+k3Eb0n8NwKLhP432fgPvff//UA5/QbiNyX+bcAv\"\n  b += \"ov9+G//P/vzXfsEvxa8jfkPi3w6QaKi7s/E/+odfPlOOX0P8usTfzxjPuPMx8X/hU+f/wCvFDxC\"\n  b += \"/JvHvAO4tJJ5t/C9+4KGlMv09xA8k/p0UHwHH4eeJ3936VM4D5eMOHmWfrYze4FaSQZFIh3UHhH\"\n  b += \"DEulOAIGC9BII4Yo1FAh3WBMI4Yk0ZngC2S8m2j/12QRqGt4574c74VpuGDHdeL+9wTnY9wmPP9\"\n  b += \"GcIB0gH9qkDX8b1u5x/rwAGItXo8uN0VnTu1zMDRLx20Te2S17BkXcpCf085jGKeSnwfkxn3CW3\"\n  b += \"LJpskMcEc2IKJkXTDS/lmGl3mo9SzIRi2g6Yyo1Qd5oQU4uBvGS6ntzxxN1pPkYxL6GYttPJvdM\"\n  b += \"l3WliE7yTYtruJpdLO7vTfBxicRTTdrSdZmboTBOidoMU03axHaUuVkjzCcTs6GY4sIVwX6Zzza\"\n  b += \"yjEp0eA5sJt8Y+2xlNl2TPSsnbifYKjwItE19uOpcYFDd/V0UQ0fNVIjBg51XmGAhUciNgTHReP\"\n  b += \"ATlCIuFoqm5Bk3NNWhqrkFTcw2ammvQ1FyDpuYaNDXXoKm5Bk3NVTQ1zMb3GNhvFrRkwRULKB6p\"\n  b += \"JG6ovgbfLdliEd7wsKGlolXHoLzhgUNLlmy3SG88fKV0PHylfDx8pYQ8fKWMPHwV8y1hzDcaur6\"\n  b += \"CpwAJZ19x7QlYBw2LokCOd2u8Ld5OPWMH9bhLqCcncbp6bLz/MDqpwK1L+n4OWNUysjNxy7QT2e\"\n  b += \"5iUZAWTZFktPVrD3LQOcwVupBvgawYcR8LLboPl14kpywOFosDCXZVCVFdPralwmTMPpDv6rUhk\"\n  b += \"s1dpZh+jobFCHM+I8z5jDDnM8KczwhzPiPM+Yww5zPCnM8Icz4jzPmMMOcLbD0jzPmMMOczwpzP\"\n  b += \"CHM+I8z5jDDnM8KczwhzPiPM+Yww5zPCXB3m2ghzebuAsM0ipnVgEMRpbcSWr2EA5A7GzbG4YQD\"\n  b += \"mEK4RaROAiADrbNiIPRqxNrquFBXTWqCgoIjGN+F1RknLnFxAKRS6lzDOw9FifNGlhPQAjwZkY7\"\n  b += \"8MjeaXGlBmBr/kqnIn2cf8SYXeFQNqQjrGPGsMrxVc+stdodgrxVWzQGtVhUkLOrHEmUqUdwcOd\"\n  b += \"svILTFst4V4t7jcVpqq1YUl/lIpFumeo3zZTs1TTMpaaeXD9ljsqbCVg1vcdcQsoXz5BuUrXH9L\"\n  b += \"unQwZZSvn2vJFfxiQ+SXoQq2ny9HaX4lG2hbyVa+sViJtjWtFK/MByKo2cgqypTmWGFT6G5wRFy\"\n  b += \"0IRjzcBu4A41Xx92eSRFfOQKDqXo78tTEhdQW6oLjGXBckS6WeFN1Ac/sTG2+Nsp7WEfETUMsB/\"\n  b += \"Vs4cEnKwBpFIFUCRNJ5CqvdyY+AASqmoqm4IuWK26f3Id/Qy3Lim9EZFdCDGWnIP+sGok7vpTay\"\n  b += \"jcQsG2v4xspXf4dZD6r7A5Qw3ejhr5ioea18W3dWCjY0hnCw74ApUZxu0B8E7HwkZEn1uxFSL/z\"\n  b += \"C8kUxF55jxQlJ3ag24pmqWBFMrNErRkGuQ//GjILAIAfGwLnMbyubwJb0vY6Yq9et2L4MnNj2hr\"\n  b += \"+GGrYW6phb1cNe0s1FDliUxeswYAyMHUpyho7HdLHUhdRoPDSsfO6hMxq4giuB94+OmJKyWu2FS\"\n  b += \"3tc+H93Md+vxSY4X6XFTO2gx/a4+zgZ3wPpap8p6gCugiYYdujril1AYThB+U+F1cotO+MJhmJo\"\n  b += \"Z7NfmORN3gcTYXBayaG1dBDDfTOJ22DCWZGHUdEjldOM1QimFTwvXyXfyHN6Om7GA7IGtDCOVij\"\n  b += \"MPYIIppogEouB+JX8mvjwM1hgtHhiI6PQrkkKZqE1TVVFZeWJfpdJy8W/xYC9Tf/xJYNn3Wmt9j\"\n  b += \"AOeDTLaeKdWFFLouyYTBBJR5Lc4GuVVayxVqmPOim8lmXlC+qWwKjm8qDbqqOoMM2yO0MmqAZmE\"\n  b += \"O8YghW6IRmKjzTcjFwu6hHHEby9UWgeHTtImnoGqXS0DUKJsXiSBcsm5w2eANCJyQu4KJKElf5Q\"\n  b += \"o5TD7qI5ZliBV3E8kyZgi5ieSiVxyFeubQ+SzNLgWYduYBe1ItnU7BcsGnNgjlrF8xZu2DOugrG\"\n  b += \"Z8PU4dfbDJwXzpg50NJ+J1vGbgJ9EmZ0F+1T8dhYPPb5B+Xwx7eC44WjIRCUxwtnRmAmjxcOk0B\"\n  b += \"JHi+cMoGLPF44fgLteLxwLgW+8XjhwApE4/HCSRYYxuOFIy5Qi8e5XnwFenAc2kFwN4NjweS/aT\"\n  b += \"PgER58KhQg9XRMPe27j9Ru2NZOsdFrYt9na6Xo6ZHY32hro/jqA2K/3dZCEdhjsd9hS68Y7UNiv\"\n  b += \"3vtkldXL7aBirFFX3TyljntlFvmaafcMktOuWWeccotc8Ypt8yzTrllljta5rmOljlbahkD5HKh\"\n  b += \"1mF4pjVq+khHTWcLNZ3rqOmxjprOd9T00Y6anuio6WMdNV3oqOnjHTU91VHTJy5cU3OZz0NuZZk\"\n  b += \"38GbQpQbozrEoZY5F2XIUTWx4NHrKgUYGN/GEaYSTk7d56D5TuUWcKpqPt92eSYefHwLz/FDLn+\"\n  b += \"xVs5C7u1Kjklb+Lc4fjFU6LGKsondIeQ3wTHHz2OsqNYWzQCK3svx6TWUnMb3RfPYm5nLhdBZZW\"\n  b += \"zSKRMGX4GOZNQxIhLRfwbVcudF9zo8l1RvdZV9ZKRi0LjrmphHu6Wjmyvw3tz2DgLVaoC/emoN5\"\n  b += \"35/zTPTPu+4kWmnOo27n3MqP7st8pyV8xDI1ule6x7w93hk3+/xvPUln3KwPNDcxF/KYgNlD63u\"\n  b += \"jV7oKzrXCPk8VfM6xz9PF9BV9FFmw83GNzjWfNyzPplBNXkcEy4sLYbNf6ML6O8U+KwWfRfY55x\"\n  b += \"erR/nu8U67Yl/293gn6JwH0A1pwNhq/wYAoLuH1VS0RmPPKqwIxTYwyhcdqh/DhULhYiODWxydT\"\n  b += \"pznyInneSM2jXQkkmUxqUiyNI9lzusqFaU60+9s5SXas2bac9Zboz1nvOwf0Z6+aU+J+Wq254y3\"\n  b += \"Znv6hfYMBMEO4C7K9y7ZU9vida3Uomdd7KwFfLBlfVcYKbKrXWeomucK7Ur9q/Ympgorr+SLFMl\"\n  b += \"qifEI6zbBM7xRb1j3Mq4bWFufvh5ohkuF7gfl3m3pYtZvxsUx3FVEZgsuyRo7F9yCvukrqaB7vL\"\n  b += \"NOoUOqnXqcN6eVOEH2cw5QcG0OLxL9e5GO3HPTLrbHuh4mV9vGfASwmMpvpTNMKNMLkp5D9mo/5\"\n  b += \"+xxX4Cd9k+zaJ25gDv/WUcB+HDWsuk+AehS63oc8H62BI+Rq2pcXBtK+lHsVL1izwX881hWeXM0\"\n  b += \"62AuvqZyxs/cW/k9H+pzsQ8TTik7SE47IvnNqmoUbqBrsJ7LB2tgB6tvB6s2f1NQX1nDDJHmdZU\"\n  b += \"5dNtoZO/Mvsp/FuvQzBsq7xNrbeamys972cc/SkP3ai3M83DMnHqyEr0XunheQSJzJpHPtmjVqm\"\n  b += \"HVmgr0foxh4sGNobT2lH6RGYyeDuGa9eAFSZUFuOwJpQcCrjLjjUbHQW6GlqDF9W1Mb0eV7zisn\"\n  b += \"IdBH2jbQCs/7U7MvKSTkcerXnQeSbKaYtY70Err4Ir2BO/EBSe2ICudmlusaIdn1IiFonvvaHai\"\n  b += \"6J43juG4/iYGkIlpFoz+uCqCJ6LiI8E0S1v94BAQaebz75ln5VTRHY0W82NmjGJ+ePMaRRWq2dC\"\n  b += \"9gLMBg0mdb6ldVu41KcwNOK5FO1XdSE0qZss8x4DEqJv1gqYUAU2yOXlXesPSDgyIwqIzt65SQ+\"\n  b += \"h7GuKDC/ifpZLM/YFZTTS2xk2rwp6atGEd1LdrXTVzszsZJUUBdl5Bi/CWqJo54DYDvThhxg5ih\"\n  b += \"o36KCjE9Yn+kWvj8yn2TjTS0A+lztvaTGBcOlOl+DP6wlXokSXa8L6/arXMAEvGdHjUPja0e9hL\"\n  b += \"WqLZI4GaQ5bqwctg9a3b0zZDZmWfV5ytX/KBr8VNW+Wbeq140meqnGwwlU02mpom/VwnIP82qC1\"\n  b += \"Af4X9TjcJSVZ4yxex12bxOqsIGvDaomMQ9gFa/lCkOV4Q9PtZXgn0yxkGNdRvKPoUrqixgemTcO\"\n  b += \"xuNoj1BFk3SsT+Pd48OBmor9w7mjTjKnVTVnBvNGbyrrUZHQuJJNiF8sCXG7Uolu404vxvRK5a7\"\n  b += \"F/pVPY4UMWBnQyqatzA4Uc9jRvTKCopbo+3glQ32u9crihop4Feo1G4zEvsEeUeZ9hjwHrEIdsW\"\n  b += \"XYsyQwspj7U5IHTSIIh+Dd3inKtLnDSBq8ufUJ9cUXGkTdGqtuzaSs/JHT2l++eedDWdCEN5Ywr\"\n  b += \"iNu2aW9VmYbYtDm+Zbb3O2dZk6Jpdj+TXjH7UXnMik52yhr3TfT2IFrdUz0xDVNFwlJlqKxD2RZ\"\n  b += \"YNpIHltCpN/OOZLTv784uqC26tzw1OD1jWShO2gGpF7wYJp7DaFZeYmlliFvyOJeaE37HEzPurL\"\n  b += \"jGP+3aJmfPNEkPkjn7lYpYYvbB8bYnZKW3RtcSc8LuWGGqQ1ZeYOf9lLzFz/r/6JeaZQGm36hIj\"\n  b += \"tDvmyxIz56+5xHzNkyXmY9VXsMRgslhjiRG9CaUl5py75hKz4qo2M7vEzHuFJWbOKy8x0GXFKg5\"\n  b += \"0iYFmA11ioNAgX2IWvItbYmSeBXZGLN3plS8xKzyBn6rmSwx0OJSWmGWvY4k56626xCx5Onl70P\"\n  b += \"nAY+1UVZeYk5gfZ/ziEjPlF5cYOreXl5hZ2o6teLbSp/iFg0obncmXGEyE/3v3EmNm2+LwLi8xd\"\n  b += \"rYtLzE8xfKyyEvMglncVllijvmyRphPLnKJWeXz4hJTmrBLSwyDsP5p04kM1ozcvMlD3v/Fl2F8\"\n  b += \"iIad8XZdy+uDw3k1VzkCtoxqWZ1D2KXOIexS5xB2qXMIu9U5hBY0fjHUsy3HFXYQVVvBPE6BLYN\"\n  b += \"cVVRVL4Oo8hA8/+FR9QLSOy4x5cWqpb6zvrwKCoScxqya7IKCkoHchxUthHLXZfxK+jiUdssltQ\"\n  b += \"NyRK+yWF1Pngtr2RAtHEW9G0V9GecCucSYKRBrJZBLjKmC39lALjHOFbQrLAeYXlzITuUXKQF0j\"\n  b += \"ODuIFe6sEzWpSBv9nC0oCPBaF+Y0OqECqTvKqNDwxAzFBD+RhdBclIUlYmIe1ne+wvxjA+rIOCS\"\n  b += \"nCgUf0HKVvA5wT5zBZ959pkt+MyF3Ltm8ipPkXU2zCnuMndHoW3yFuokAqpQVa0E1Ho145oQZRO\"\n  b += \"s0aDeRYS8+vJN3iskd9MzpgrEWi13+WK5mn8haSp/CvvkvcgQ/C7F0hd+lLzkZW0tnb0P/e6cne\"\n  b += \"uQ8op1oa+dtS70smXr4v51pmaJvVQz/csv9C9swy9Y3O6CFpXc4CU70OFn4mjMmlHqM298o684J\"\n  b += \"f00JtI+5oQsuvAy7ykvgA4HXwrasr3C+NQ6ujUYFICh9X9YXRdNdoFnVlIVnRdFt+iyyN0LHe7l\"\n  b += \"DrfoqKiYUgqCSPO/tERbVA7kyUdhgETpM07AZBI9psvPLVYUsDEOrMYgCXUtl15JkY763mUwzLD\"\n  b += \"I8ZNYoLowaLPyOeSzMc5zUsRQ9qkoWy59p7kvaj4VfgL2DQzIrx07A8W45D0DxUXCWlfBM2u6Sb\"\n  b += \"jYKniDTTcLs2MFD7TpFjiw0J4jx4CIPFfwtJtuhaMNVg9ybBNOygoehdPtcPSS4yw5BuGIyPEcO\"\n  b += \"XbA0QfBz3vSDWviuqcWXb2f+83Tf/zETx4G5jr7bWIuka//zgc+4li/zeAhyT769x/+dd/6bWGm\"\n  b += \"kZ/74Be/6lq/AWYfef/ff/kn8nhbmTPkF77083+R+21jzpCvff39/92zftshZZK9+OOfe89/tH6\"\n  b += \"DYNLMPvfC374vL8sOGqV92fz73veN0PpBb96G7Nwvf/KpH1W/e7SdDCcmL6m1QuOZzjDV0aiKHa\"\n  b += \"uNX+Y8X9SuVPStFFLbqGwYa37IDEBhQSip2F0td3ugD5d5ocgVfdxJ/A5vlxUlzH5OurNyJ+WDg\"\n  b += \"8WbpKNWYv+ASCDNOoDkw3tvzrLpgidYvLmNOMCXgDkNqNmAmgQc04CWDWhJwLwGRDYgkoBHNaDf\"\n  b += \"BvRLwAkNGLABAxLwmAYM2oBBCVjQgNgGxBLwuAbssgG7JOCUBgzZgCEJeEIDdtuA3QYUiP2Hrf8\"\n  b += \"wEfJ68M/i6TytCuQPAlXPAJ1CJbC2WuA+DWytFnjLAQmMVgt8qqKf9q8WetqEDqwW+rQJHVwtdM\"\n  b += \"mExquFPmNCd60WesaEDq0W+iyHco/brTq6DxoFvfIoH0RvY0b8tx3MnDEyJ1UzUd777fgQuMm5l\"\n  b += \"hNiqViSpcKdBGvZNRUgbUwxXPw2msvkdZ1fz8EIe/OYCKvS4Zh2IsA58UfBJORlnpqumo6Y+BH2\"\n  b += \"eBbeDMD0+deifAKLEp7DBe1ilHkQnMLraoXHDIyaGC0xIjH6xRgQY1CMWIxdYgyJsVuMYTGuF2O\"\n  b += \"vGPvE0PesN4pxmxi3i7FfjDvEuFOMu8W4R4wfEOMdYtwrxn1iHBLjATEmxJhyxHxIzRk1H1ZzVs\"\n  b += \"1H1JxT85ia82o+quYJNR9Tc0HNx9U8peYTTqav1cC2qBKhs+v4xZf55uKqcvRNQutLgXEOx09wb\"\n  b += \"QXS3fwC15zbGXQYOsE10CsG1vxJCp5AD5gYixmglCP5xUjCPNdyAuZKY7Y+XzucnOJMqXzuWfyh\"\n  b += \"Yxn2LHuajzJ3hx62oW4xVPjTlJ3PR7ELgT5K5L8Ek5ocJ70MwGfCIRRYVrXJxBdGlteY1f6ZmdU\"\n  b += \"K7E2+sjeB7dxIKojUiMgRmOuGYeGfvkv3AdZDdXUqEyh7FUUZjNSdSYY34ZqByEUry7SfLXx9Uf\"\n  b += \"mQVRufBLPmquha8FIdSfxOXqpUQIAZ03CQKuO/pe00eVeCaz6jYtChiTW4H8sBBAcPpo65uplUz\"\n  b += \"miWL8H5Ias0m8o1QSvDB5rOpeYQIQJ/wsXOSmBbhZME2LYhPSxiXrOsokvcRo2VCHGxGizRvmTk\"\n  b += \"e1S9lnyJZFWHFet/ZxGvu5MeGHcmvTDuSCIY+5M+GLcnG2DclmyE8cakH8YtySYY+5LNMPYmW2B\"\n  b += \"cnwzAGE62wtidbIMxlGyHsSsZhBEnO2AMJjthDCSXwOhPYhhRksBoQVYPAuiXwvCTXXxISS7TWi\"\n  b += \"nCksGaKVYPWkdF2vAurhRXiSvE1eHKcFW4IlwNrgRXgSvAxefCc9G54FxsLjQXmQvMxeXCclG5o\"\n  b += \"FzMtaTTXIwPl6GQLjeqoETLDqun4qpZabJmNvvOJ3HOqlolT81cR1XTxLYSRo24aSOWdFRpxCZz\"\n  b += \"ypBRNdJsNkUXwlKuAlIZWqokokt9g7sKnae/kwnafEmCigRCiaD1nKB1E7vNfEJk1At0aq9CUEv\"\n  b += \"5IkHr6yDoXZagE9/BBG2BoF6RoIGpuao7q2VL73oSYB8q9OgZKT0Wo6yZ2FZKj0aljVgti1FyRC\"\n  b += \"v3FxhhOZtiiaCYQvkTmY57RESJps3LoYWdTtzQ1QzdylDwu4Ywb3xpvCu+bC0y5Kiv43FzPG6NA\"\n  b += \"/z1rxu0faeS9I4ldRYphKgfcymbOhtbzdpa1hZZW7+1DVjboLXFaguzOgQYVZVbPXMOYiNGTRKq\"\n  b += \"TjsVaazaCxw/l5cMzUlFO7fPAulGkNG3kTwbCR37gimV9NhRedxSeeQJg+UstFzFLP1Cal6u0g4\"\n  b += \"iCnmje4VINRupNvoSKXWWy+ss16L/HVEuv7Ncy9XviHIFneWaqn9HlKva1b+a3xHlCrv6V/s7ol\"\n  b += \"w1U6666V+9o6pnUoTLS+LSoYWkNComQxbBXm0KqOeTCd6YXyKlcrnyjbGb+dgYmy2x27ElJndzm\"\n  b += \"jbdLAZdVx6ckcoeWgmZWYJiRdOh8M/cIvcxb0wb30eb9RceXKwwPji27H4G6f3GW7cnWKaH72WG\"\n  b += \"hCkaafU8nrzWg6RvZuAG91A290//zVGIcM70GHAY6Xg85wprBljTRf3YXiov1Dymre9ru7IK4Pi\"\n  b += \"97JETbwPAf6pli0iPzstQZTnkzrspA4Efc2/1J4XxLXOiZ6oSFsRtBg3He27tdZWK8PLMu8xIMk\"\n  b += \"+Jxi1WjegCX7SRvTBjHqWRa/bIUeOsC4NVkXsDjMznAuWS8/CgGf2DJ4wj7McMI/Bm7YqsZzH6F\"\n  b += \"Gd/LhCGE491jdUN/5Rw4bFn7sXfM1RiUyJEPwaI1mHhBkE2n60yXww1W+PWtttyRDHfkPsikfiU\"\n  b += \"m72XWia7Wr7NnoHjkdlFZSDm5njekeY460B8jplUgLDDHSL/FxYfbp7dafgWZqia8/mH+oOqXL2\"\n  b += \"Vm2nxA09J+3AbANpCWuask7fMikMbE24ZMDJWbcusOFyVG8nCDZ5WE7ybh29WjhqR61xxSi0Bdn\"\n  b += \"FuiXNOqSXiUfErtUTMXErRu/xyS8wy6R+qFhMmEu7xZtzOXqtkwv6CRpb03AEhzWDqKmmo56hRJ\"\n  b += \"A9efM7+6ruEPIF0W0Oezo7r244blDsuyDMv4yENElxhBAXypJX1d9Vota4aMVh+9Me2q6JVpW9S\"\n  b += \"23qlfjnjmt4pffMXWEGnfORZldZCVRUnNXS9U9RX0nSsJKwJCVuGhFMzTEIYSkJPBoflxKLu97Z\"\n  b += \"2KJTFperZD3yiMirsWBVQGGRjKvlMJV/09gKqBrTlpD6Lip8N1KLDiesV/Zb2KPGhOkZPoNkXWb\"\n  b += \"WB3/tSo+xRO8ocGiPZC+/O2V0u9Nnj+eAEKf+J2v7OPBqmhufgeKqYOnWy7IVpkz4WuGdmjcthA\"\n  b += \"mZPmeAn68IpsxR0AVK7FpDaGU8bOSA1yns3fu7Ezx342Y+f2/FzGy8WvHDkGnpzpbIyX4gWh1TU\"\n  b += \"N6QtUXHZlgHTI8OH1Tf0p5GwK/ZJT9gg/WKjNHe/rNeb1jpX5EjTtLW38NaCflzlG+IQ6Mehohz\"\n  b += \"n6MdVRj8OFbbYoh9XGf04VNTiHP24yhiHoaIi5+jHVUY/DhXNOEc/rjL6cRj3dqAfVxn9OFRA4x\"\n  b += \"z9uMroxyEAjXP04yqjH4fxhg704yqL7IXxxiL6cZXRj8O4v4h+jCPiphL6sUHHbhTRsXfJ5VzDo\"\n  b += \"mNXdTGy6NiKllxhREmiMCCTGT4c0jYscl3FnohPWAIhHiqEeKgQ4qFCiDvYuguEeMiQ4gohDvgR\"\n  b += \"YH0ocrkIlyt2IYNcF9CtBb48XDV/V/N3NX9X83e783fXzj8uISfyqR0Y55A4x1G1LtmJkKJBJm/\"\n  b += \"mkDaeuQgC55Y/vo6IVWDfVPU8HkbvdwSjGvd2bicmdQFtukGrURGTeng02iqQ1M4akbJKtLUMSc\"\n  b += \"0vN92Y1E4Zj9oxeNSCVV3GpPZWx6R2LoRJ7ayOSe11YFIvMT/541U3nPTBT34Lw8yzoB5wAltZi\"\n  b += \"w8LIe87AbQAyCggAraOxM2JtHkTd+gArdARyLh0HA5rgr2ui3eSanaEmoLbQaQJm8d5FSPHyaQH\"\n  b += \"eSEFXJJ88/zBe0+mrSMT/H3mJLRT5qsELU2VH5KIZIxQSNt/Wy7NmA8rck4olgrjFh6rFg+ADyl\"\n  b += \"DM2guPo4HlEsgufhduTC98G4V+zdocnF7oph4i5qujoasZy0WjdM6HuY4gNTieMfpvEFDrlE8Bj\"\n  b += \"HECpcWTItsVk9OyId84U/FWyUOkhtxHjQR89QVxom6xxFRGVyAmnI0Eacro9Zxm8QBvJocTFx+J\"\n  b += \"MS9yiEGlGyPVBi+zO/sMDg4SqLSNdpFypmOs1oktNT6OlCDNvKtYtQ2tuxUkEBxPipSGGb+9OQE\"\n  b += \"GDtjfCaM3THV2OOhKBeK0tlBmp+sO73MIls1MhgCQ+UKYjufG32LAgQAKl8QbpiZVNz7GCyGDoE\"\n  b += \"FJCQFaiK7n4Nb8cG0re9GPRofTwttjBUBuuJjurgFX68W+wUUIgvDZdI1TFvMDgrW3ciUozLKF5\"\n  b += \"OSLgvsqtsAaPlFqClH0Y0K6UqetUJ6uc+EYhfVC377GNK1rvFF8Ga1dF1LmbsUSgxseeV8+MFFf\"\n  b += \"AquCQZAMS5BJagW6Khfl+qg/pzfBMdvaPmL4Qw2p+H1VcKF4neVcpSSSso3K+pRyKnfbHGOlnnH\"\n  b += \"4VuMpNxnQl7CmgWvfYy527TVzqGSfMbu9BTVyzdcUeBlCtjpWDohZQbk7IN2EHEyPIsJ7KN/9ee\"\n  b += \"OAzipXkmEGyOgzmc6EUpgspCShDoEArWZB1GfgaY6y8ybJ23sCY4nnUf80fWMf0tJYmGpMjTj/8\"\n  b += \"l8dWITUM9Aa+JoDWb5rb5KdTIpme7Woy7TtKCCaVqUsqKUlNKKayJ21WZgq5jWq7RFpdCpXEY/h\"\n  b += \"o39rV9Tc7MAYpnLNcE2RGyKwVRIR+hTMZ2rMmrpBE7GRd5i5z58tqXF/2zDDQRlA/LKrFcWp/M7\"\n  b += \"gFwqd1BgcWFkYXutVf5nDS4pYwjfbs6aZ13+oXOmxzOwJzcZM/NPmaM6a4HhkzpjGctJHfph+KA\"\n  b += \"O9TB6Tmd2ijv1mH7nKqd0h8VFGCdZz+iMu75/j7es2jDw6/ERHVjIqiHjH6vibdXOvDF6py+2ZU\"\n  b += \"9uMRjHFWCtNLVWCmm7z3l7vPsE/FVgXaO/qVrlunB+iDXPOqpDMPq8H6vHje6CZ/JlOZtf9kyOj\"\n  b += \"OwPAAM5PxZzS8F470hNcUqXoKqpoVOq4d5RAXQ+y6osHLkFhFod0zjggoq1aRxmJ0ASTBDAnAe4\"\n  b += \"BQik0XC/svLLTzmjooinfAtQagXfot7aFrhPy7diy/dXoNKU6I11DNHYSZ7Rx22LwNNc2VndvfT\"\n  b += \"9x5DLEBA0PuNLx9jNQvKO6AYC55PHmJjQ8Disnw/f6J5AMWJ7M8qqgyqiSMgXmoD7a9jSZGBUtD\"\n  b += \"MqTQaxe38brkRAEzAWz35AaTLQQRM3vxlp2tpMgbpu3s7YgJ3ztWet1tYrvvbqjpbOKcEtHWlLn\"\n  b += \"/K0VpHUqt/UKr9QlHrVTK+TerWkXg2pV9NcNbLCpAvXC2l8tqpE+qy2Km54pGF/zFhmqtq5OA4U\"\n  b += \"hnysqgThyMsV87niOHBLPufd6M7ayxzpDXyZ89yP21uaC8Z7wcaDaHH2yLvzu5wge+hhe3OUxdm\"\n  b += \"jNswmueDlSaIjyfXTwyZJhuQopDGcPVVI380eL4TN+dlzJvCDgVubdDHTDh/AMesA7fZb3DC6Xa\"\n  b += \"4zUGNcH5XnaueQXhjUC+crUZ7pAH7+kvvLG9NL7scNKPanYEajpOu8I5czfFWyAOZNXNPDgpie3\"\n  b += \"edXoZIJu2DeA6/nQOGZ3OvIto5dORXhAICND9K5XotQzJ62vvqwDv6DBl8SjOl1Cud+oSidmWGT\"\n  b += \"b04eORm5/HLma5rTTH7m8GwVq6XjztonDrvlp+wcJWmQnytYnsaQS9IMQNLWTeZFmxsvsHH0kGx\"\n  b += \"JyhFbhqSByTY/ozWPQ6WpHLy6zzVVPLxV80OLVzrXqJK3taN0nWv+oOH6oqFqwRfOX17lRYaXV8\"\n  b += \"WYNyXQVXKlV9nfdlouzwnKi+lJTL7kjv1STFYuMvIrXz3/P0781E8v0qR22iP3b/7pH7z7z3/3v\"\n  b += \"/7tz0zu8Rbh8eGj03/3n5594Sf//R7vFNxHv7Hw9w/+7E98/t+zPKs7cv78n/zN189//DPhHu8E\"\n  b += \"3B/6DHgtv/LxH9rjzXuiw8cRwKJoXvURsa+5V2Gf6EqjAya6RnCCxJ1HAsiDn6184slK1CzG4Pg\"\n  b += \"rroGIEthGcs4XQKHcI8zRKd8gcDj6RaIug5SKdUQZbWMugXKATnXGFzUCXu6c94rQVEtlLCpVX4\"\n  b += \"SKXyOpL9noDNY03xl/QOPHQVk/kN+h2IZFhVmxkyfvBqI3pzoBBiPWa1MTgcyQtcxUodemmiu0q\"\n  b += \"UmHnpQODY1hnvYo1RjG6u9YMJplUI3GsPAOfip5AKlQ2kb7VdStkEdVC3WVWxTyVFcrvC+aclCH\"\n  b += \"w1J4KOUJufCsImftCghuHB0ScCdY0gi0OuGgxckbMQoh10c8zdTqN7LEO1Ox1BtajXpWd9ga1Os\"\n  b += \"knSoVWo10axV9HaRbq/g0Xj/1+fOf+6Nf+uWpNo1fynzkS4+99yd+4xsv/LfLaPzC/dc/82OfPn\"\n  b += \"7qC+/7jUkWmHZHfuZrn/2L93zoF57+CHnM+jwDHP/kP5w//6HePd4M3J/5EGaAvz5/9x5vSrHK7\"\n  b += \"Gia8kvTAIaAHeKxHdIWo8pOEyNOU4AE+U6VRtEQD7oKv+9bx97RERZlrMCgTdMIkLZYNZ+P09Xv\"\n  b += \"111vsocnUytxx/tfbixWIfsfjqQBI2DdFz3sG3mikW/91j+d//DUF/7qTyriu8y+0wvv+dTUO79\"\n  b += \"27HvEc4k9T3/9H57+jS9+4Wtf1aiLIiK94gDl+EqvNsGy2TMMWiYi01NuGtCJlxprgvLWQlSLhc\"\n  b += \"CsU+0uBBSEdBYigl9nGealDAsO5Iqv9JahCoHKEk3Q4h5wZ2FRbpRIdFJRSapS0NPiHbBst7NKQ\"\n  b += \"cNiQVk/RldB+T2ps6D8CNRVUsj5U06zDiSlr6RTllBtYEJ4T7mkZ6VIDejQQklbiHnPRNq2dTll\"\n  b += \"6hLZuvQJPqety/xqdakX60JH03pXVeh4Vu+sSQy/zorMcF5QnSXABEkvcr0vacAYTmqs5RD+kQj\"\n  b += \"b3kJN0oqbXPwzUs6mNAW4tLmtQIG2UIBnlLgdtwoUmHKEBH0cZU7S6It7LAkgtHumkpNgf4ECNJ\"\n  b += \"Ll0qKhpejNs59IezXnDXmWjQnmtezhzARaJe4xLRIo1F4j7pW+JeG9xQrFE3JbeAfUctXQtPrlv\"\n  b += \"MvXsVX+ckiHCX8IRMlsoFO9JZ9YrarG+U/odBuUVDUGZroFnDdFyRY/sZb2OKwsfq49LpAsihrk\"\n  b += \"cGHGU2+Qz7hBecYNLqgJjzq4KwB7vOKfsAiG8l6Emy7rIVB9BdzDBeb6n685O1nzsif33UY3jtW\"\n  b += \"MY/XiWK04VieOvRuw+nCsNhyrC8dqwrF6cFgLjsGQ5ys8XOnpxfo+vfI293R1e6PIY4av4Yz2nk\"\n  b += \"1WggXa44z2ni1W7gVa5Iz2nq1WWoa1yb1gdPoYGZtk0IrfJDusZE6y08rvJJew7E4SK86YqxqFQ\"\n  b += \"r1bFtHqFWe0w2dWVbvaeoiXuZsMCpfVjiYgn8vNrrmt3JdfL1dGC3e3ykeVB0lyw6OFH19EUDSS\"\n  b += \"8SiUz9yPC5KGueG2EZfcUS2pcelvfu2vv9U1fEQvxVLhSj2w1/U5PcquAIoUuTqBzb18fyuuFWe\"\n  b += \"066Z33+pS22vxYq8p420PhcLlLHWwrOdhzp5oZcH5ZTI0EQtKZEIbsVZk43/pFJWXkTW8GPECZZ\"\n  b += \"SSl0xD2VHhhnQNa3WQ81X6OC6uI6aDF3VHtcnwdTbNEB9uuOFkwLqNaywZxMwwzu+mTV7u+K/y4\"\n  b += \"H5wPFif8MG0d2RK/moPkb/z7pFvSVDvg+S8nk7F53vH0ur2tEXH5aSH/DT6OUosbe+HCJSXuXHv\"\n  b += \"/u1xuxD279rONuOM6XztvJt+TE7/Lg23J60Rd4TovT1pZ3/wI9nTP0LWGGzOcQ+dxA9i51fNPvU\"\n  b += \"j5DHiJG3xBOatH1df75ypQTHIHm+JTOz5TsPdogMszOB1lb+ouZPoDLdS6Ra+9CTvI5sje2dGpq\"\n  b += \"gSTTBbZE5Szxbf9YlK9nH6iZv7t0uccOY4BeAbG9AEm0L3vx7aM4hRQlLWe8t2Np0DPZ7jeqznx\"\n  b += \"7vRnYFsw1OU1I3uQ7VWWPR90vhWm5krVw+vd6ZqqiNstqZYydS5X+88jA9c/fAJ86Hb5AdsP3M0\"\n  b += \"BAXnEKeZHcogFBwdyqIfhuDBbdvj4F6yfPyblbe2caqaYqyoxRrLfYHjdhPYNCoxLYxTU0cwz0y\"\n  b += \"5tC4G0b+BSAKSSQKRLpliOGDKrZAC9DltFLbaU+w9UzPX0T5OLFN0ylqoNZHAdc6pWhpqyWhXcT\"\n  b += \"tDkhfqD4yw9RKAdYPV0uqbaPmHgrBa2gCjxvDb2tBBUMscQJP7wGJ6qFbKhTYZb+N8HqE9ggqTU\"\n  b += \"pbZxzhtlDrU3OYZPCY8kNYk1jG+x2uM6gXO6525mpgP1zIvwVOZ931M4RM1vuk6QLOKrcejtcxP\"\n  b += \"AggCasJ5mo1yZWeZn5DGctiRUQcRTI04b8qOQdxivIujhq4tR62rEKAeCjCj2WFHc6BYCG2JE3l\"\n  b += \"LzOfEOlYklqRqSsmpO2t1TuRKlViotfxm9uJ5GmpJdu6dn6hEHw1o7pzBoEyyx95lPP47PC7Lnj\"\n  b += \"cetgU1FeQCzydqilfsx/UbqU+wMNUUan2qxpMrddfoKOqzzChb76+5zuS1R6Czd9GhjTqZcw7tK\"\n  b += \"irYt0cwbkv6YMS0vyDjlEObiwoOK7S7IPMdNJOQcQtt+skYgE5fnLmSBOaMk2yEeU/SgrGXTgBk\"\n  b += \"REkdxgkn6Yc55SQpzDtpj1TBMcGFUaNtZAUnFpr2yHyAdk1k7E8uhTFEGyeGwOvJFo/wAkML43T\"\n  b += \"cnI43TMfhNHDS4s3T8aXT8ZbpuGeazpXO0WkwU08n19GGvRHvmI6j6bhvOt45TafB/jidjjdNx+\"\n  b += \"507E2nPRy5dzqFlsVTH5GdNSVDx1wEBHFreuTqo+lWXLXGG+Nkmjzi2nRcn8byQDHc6ZHdR9NtI\"\n  b += \"5PTD07TYuHG/dMj7tF0Ox0yGhyhSsUc2XM0HcS+YXrkpqPpLolMRwcq98iVR9PLqN2i6ZErjqaX\"\n  b += \"IygenIYKYirkSONoegVlfMn0yN6j6RClsHF6pPdoeqWksJG+2zk9sv1oelV8BaW2ZXpk19H0agn\"\n  b += \"cjLfy6ZENR+XUOD1SPZruxr5tmoqVXiORIkq8OT2y9Wh6LUX3iVQjtaO0fHIgHZPia7lAu6epuQ\"\n  b += \"Kq/cgbjkJyjYg50n+UZfvC6ZHBo3RE5i/oCErUHbnmKD/318RzA5Xs0ukR72gKjUyueIKhzOO06\"\n  b += \"9OAuKTzJRzhNDV2lZp3ZBOiD8TXjfQcTX35JsRtJkfbOk29aht9tVVCvPjq+CoOGaLGpA69LR5g\"\n  b += \"p08dgbryrng7Oy+jFqUefVU8xM4rqXWoY19DyzicTeoF1MG3x5ex8/LpdCv17CvjK9h59XS6jfr\"\n  b += \"u5fEgO3dNp7SO07fXxru5EOkgK7ytWT6n7XTQg+qizXu8B8gY3OPtJ2PLHg/AJD189AFiIqAS4m\"\n  b += \"17PEAwAIvxThyfADVKyxLf8MRbaRlB4MY9Hrj7sOrfAwa8/5+9dw+y67rLRPfar7PPq7Ulta2Wu\"\n  b += \"h3tcxCkTWTSt8pYwghHWxVZ1jgZO1P+I3VJXVy3qLqpI18qLSuOa1DUTaJk2olIFBCDyDVBJJpI\"\n  b += \"F9xEc+MEh7zaHieIIRU6Mx6iDCbpBINFYkAzOGCCmdz1fb/fWnuf092WMsAt7tTYpT57r7X22uu\"\n  b += \"11+P3+L5d0W4wTO2KgL9ij5UAVYDmDmANAG18I3BzdokXxq4IkCstu19A5AZ7esVvDq1yAFDHOz\"\n  b += \"Bd7IqK9gebYUvU8xcyFSBBPb9HHdXXVMiL2/yMwIXc3M8O0iAf6KNwNZHN732EdTiZisml3UGIf\"\n  b += \"Xndu6Ql5+w698G03skxFu4LBBxpi7ZxJeAf+w6hIo/Jl9e4iybljdvJagHTdkiRykv/RZxOvIZR\"\n  b += \"HBPaB1S+ep5Hp4tBTVq3QAgtG5EvCUtA2gPWFvSkTQdoaGeBf8FDuiS2cRrTRtTrWAbJ2iZwD0k\"\n  b += \"ejKiCJIPdA+L+2fj8oUhcYynVpPt+poVFj3wBIkZvMXFR9BDq9yGQLwKnsIZq1u/TIzG79/4e5C\"\n  b += \"u3GRuYSYQA/BQzCRu6HCWFIWc5YEBpKBFKOIpm17vlqFLSx05Jzx4XtUCdbuEiWCUgI78UactAv\"\n  b += \"6zagUuiLtYGgcYbagL4e9jfhRT6bC9HK0+lQ3QVJ1IMZdeWFwNp0fybIagC5NnEt/7JdFXro9k/\"\n  b += \"K0JGDIP/FEslx4lkEorIX+FNtEf9YFkRmBPKX2pjNpNu6PSj0TFLDBEdX3+dCugQHSKa4hABCLE\"\n  b += \"FOkSEaztERE49Lnl8PZUqQ9EtrcgQW/1PU8KaicK7Yd9ePvMepzJO6k5TTg0t4/hJarbf49TQ+L\"\n  b += \"TKp7x/FVvjhN1KXY6GH6P2+vh7lzzHgW36h9Jbg9F0dIM49d5KcT7kZIHdy9n3Vk4QttBnnQvEL\"\n  b += \"zdMOmdnot9uwBI5/1ijH+ZPNiA141xk90yNrpgiY1+Rn2kQd9a+Mh/0hHHF3ogldhHln7O5lCd+\"\n  b += \"5rcBMiKuRN9V+OmOeL1QREU9+IGu/eT+7vOGf2DpjDND9MBbgLpCoIv8nSHyt3H2zGMPSAe6pjx\"\n  b += \"us8a2jQa09vP8SLoBWusYAEIxtm88Ipj8VAMny5NSEHyCckOTjHLBXvEPNakDgYLBsdgchoW1Fr\"\n  b += \"8I8BReSC9pBvOqXT7i8rX79DLIP49KZ/m3054px+UiKnO5CN1F7Eqzv0srl0P2oFSEh8oXvvvTg\"\n  b += \"/Its4DWIfSYncUP0YvRDuv962VfyzUI97q6wL2dOGbBocGgH762G7h32icftle9gLLQgGVnt+Qf\"\n  b += \"bBTmzm7YFgeGANKHoIchk/8m+136bVsH4fn7wkMHbJH0da4Z7FGJl+WcbRxYgbgWxKpkMKLsdCR\"\n  b += \"DxA0H44eD0eHALlp3OGAYuE62vZURx9yOD4pH82dh6OQGXX2QbGj7YYIPW94dQm5rsz5SvmjfNL\"\n  b += \"Ajfc69sw9myOhIP5rdr6XB6Kam3fCVto1AhMRxBAt1Aa5CkTrCiZLJK/O/NeWjaJJHtanmBmImZ\"\n  b += \"BvYtuK29oY2CyzjkWPs+OrxaCvW/uMsTGULsezRfO0s9Gise4iyWMuor76DSGUHAYkm7MZi7hhi\"\n  b += \"dWP74BOBW6zs/kDylvlzJ+Rbr+0KalnhlqlIViUg6aRuvlyJBQ1n76H6srR7V3Qp9uvGpVhXpUL\"\n  b += \"XElmVLsWckAsurvkTnAYvxWK/JzofsgtV+LfBKLOUAAHWuIooasfOjwv70VJIj/za/qBAyFdL+4\"\n  b += \"SHfJN2oq9iVPdVNLK0R3VfRfvEUTGApMDZr+zz4slprx6sL+zzzpFz3qzbhMZLtH0bPqhtuGCG2\"\n  b += \"pBC/wUz3IY511Y4Kmob3u5ZyoxzVNTEdLRlVP4Usa0vESk89liqLI4z4XMPgT70O2GVO4bMY03E\"\n  b += \"PCOixsjvHJ6OoRS/0ETTSWCmNVlqDtWEIgpsg5r92K/xivxn1LbvPuH7lIf94h5gcDZppAK8pOg\"\n  b += \"uLvF0hlbvJbfEs725eBWGEk++D06PkqMs9bFeLLjFH/6Qn3G7AIYse19HtsLTMaDbqmUYZG9crp\"\n  b += \"/0y3BcFuXzxytXx0b56HuHlvx183jK5VE+9zbElc8ggOIL/+BSs3rQVkSN5967risk9pTHvSskG\"\n  b += \"q087ly6v9oQWvCV1KNCxc7DQGn9+mOO+52oT2DawNGeGE9At+7ovXMzkHS0nBa7ZT4jTO/CcC2x\"\n  b += \"CVFVVjzNMuzXqzD3t0pJq2nHGs63Q5NkD9xKkzYz0GAqT5i8OwRV5UJY8FDgeFyY82XQwoce2or\"\n  b += \"PauE9Ybsjp0da4TarnpVU1d9EMdWzVWVx8WMKYdDQSodKaJzQMPykETygk3EF1Hu0BsQlHgoOtq\"\n  b += \"vKMwZcNZmg5b3z/k79BUK9dZbvCd0K5DFJjjjDMGkEsVgXTLANkhFiazFkFV8dkWurS93xt8UyG\"\n  b += \"qUYjgl16cz7WwCc5n1Kd02kpBeGLwa8bzb4FGuFi6sDTfKFF9y7O5hizI8LVFXwX10Lha4kHhfW\"\n  b += \"8H8i2q5qHKm0DFGpc6fWGDJGnCNCNTYbxBAb03JvZF3HRkaOqxHGjdQoWDWqAoHrzfTGAeQKWhm\"\n  b += \"wX3YE7fdlJiG9c3Con+yARj/CniXBNsk+GMKQ/2dCYFxga9rLyvkQcgBuJhrY5xKSY7AzCMrPzr\"\n  b += \"3G3jV6KXZEDfCnwP/TLggBLT+LtGfvDlB/nkA6PG5/iOyZlM+cgLh3oiR+RoJtUy1SxLsTZdC+J\"\n  b += \"ZyqdjJ2e4qdiP05vF+OHnd2SVe3H51zOwPtBWTx2DyhhHvvgIdoBBIZVrDwianjV1Mye8kVxj30\"\n  b += \"z7tcEuYGZL2Ug7Fd+W1NQ/CK4kiSIKRoTAJ9NAHUbBmJ7u5pe/nLRq6fqq73RbvCm23QiZ99ghi\"\n  b += \"lSdkA8ihMz+yqAmTShNBMcI1ICNwEd42E/DC3hHfwlVBM+7xH39OQS5RESJf3xfLGi1d9473+jf\"\n  b += \"Lujn93xnfjZNdr8DQF8Q9cHYH1kIUKRBLtJJosqVuhKCJcprpL0+Sce2fb2DwG3hSAwhUYJbBYp\"\n  b += \"XJu+2yvSboZaL1W2BcZwHiOHObQwjGkCAEidYBuJobmEdDNvGrWjhk4wCJpoBlc0c5slp0qA7JF\"\n  b += \"4PHIPZcCv2bTkXJ+/kowaz8WmwVc5efnnwSjrI7YHagrHdsP2nqHcp3jOirhwzg/Hx+clNHV4FC\"\n  b += \"gDyewaKUrEumV52qdNdqJH6h14q/oYEmk6x5+z9W67o2+6+71g0U6cYfvxIKdaFvhV9/+BLYIsW\"\n  b += \"weEtH3/1watB/NwmyucSycq1yBYKRCnWyli50v/lcw7uy3h/UzthteaSbszvBeWDFIkvyevpnsJ\"\n  b += \"+WbYDzQ3Ve8006qNsA9vxRo/IMSn4/Ez88bTXBUEmSrErg3HJME8aoE8g4bFfqoV/2rc+Xc/Xab\"\n  b += \"fUjUhOVycF954VwyKL+Y/5+2Al8KoGEzZXzE3vzaXz4eDF5pwHZryjN/qQZBY/tEjW1XuC5l2vt\"\n  b += \"etfBOm3Wx0M+P9TfCU3gMN2NFfuwo1hKXvnusP0ZX5Y0aAt3BMYa4PI+y7NlR+llvKNGzpjyvxR\"\n  b += \"jAWvxVs4v97sI5OzTf+8XgtaRjeiY4yN/mnT34sLcA0XNwstNol/ZEC+SDxsF+MmnjngnsdZFMg\"\n  b += \"u0mLZeO/9jBLkbtdx//8ittTmVaAsVgfvEbsaa3KXgrj5RZCR/++VPfejrSBPNPfPmVEoAkSbt8\"\n  b += \"9s8fD8qp8sy807FdsFfljvIpH6BquWdcQIE2L1f+7nGVjcVULp/52VRfcfKLAe5s/u1ess8Ornf\"\n  b += \"2wLzQYP/Z720AXS82RqL1bb5GZm7wk8F8pNiwrzVfJIv2uWIsf9TYPfoG29pzR/sb397bACzq70\"\n  b += \"azPfqF64jAPF40DxXRwcl+E5N+B4JctZW35fipXksOfoZmLK37DvVSghMULfsJiWubOoRT48JSp\"\n  b += \"CzAhqPDJTFFRhowTmJ9Mmvb6cMAYGOAju5t2md6uX1tXmxauHu/418Vh5oE61C+r3Wsl6OSx/qb\"\n  b += \"C1YJngjF5sKOES1OU4mOFLawKtQG+HVqSUiUDTHlQfz5qV6Cla08g87aWj7vOwvKhOPQqKprTVS\"\n  b += \"ecnefb5j2HBHrYccsIkIc2roOOgiecEJHxU0A20xBkgMBoOhT/W8ERcuIWTf6FiKJBsHIsenA8h\"\n  b += \"KVc/8My4vw0JJg264Zc9hRQlwELQfRcxu6vLSAkziAhKapK0rEt9hHIPLgI215RFeEHgs6gGVIU\"\n  b += \"9cQeRtRu/QtnSKWEiT6UEfaOoLiuLactLD22G61iwpwHGVRidpU/kNICieZOXtKUJc727UAlUlQ\"\n  b += \"0wZRjKVqNmuMlxi6Bb4VS2aEl6OSNneUtuGWTT4ltbOPZKUS+BkQo2kl25r6ClLLtZ3rEiB7xBi\"\n  b += \"bc0CXyKq0vkIR10etCNsk3Q/lLXddlKzYFfauLsGIazsvg8M1DY/sKslNvb2w4V3uEqVxQ2Zgj/\"\n  b += \"pEJVehFKE8bEHnzQGx3Dfi3TKnsA7CodBP7+qG3/PDsiNwObAYWgO4PLnBDKXcTUEBk64yun0Sc\"\n  b += \"mdzaCw0AVb70jzQk/7BVeRyTFBdeR1nDzHeJJM5XQxhpA9eBvvNbAzJUV/iY0R4LwE0hqTDfkmS\"\n  b += \"dTbGAfDUE973JJ9egOKGc2LJj6/FbHOVxH7eVNmzBLa1DrblNZp3OYWvT7JvfzYLm3Pj4s9mN3a\"\n  b += \"P2JM9sCA2lef1anN5Vq/GyzN6dV35sF5dX57Wqy3lKb2aKE/q1dbyhF5tKxf0arI8rldTlCPg6g\"\n  b += \"bZhv+wbaAp4pLbL16QQ9rHimjRntpuIIIIbJZvoxzJps1s8OQx+lxJeCzhkD9sq4dnEp7b8K318\"\n  b += \"I6Ej9vwCR/evQ0SNIRP2PAtx7CXQfjYbfBOQfiUDb/+GBd9G77hNujSEF7Y8OuO2cmZ4flt8MJB\"\n  b += \"+A4bPn7Mzt0M33gbjiEIn7bhm48VGyX8ZbfZhAzfacM3HStexnAotkMaAkNuWHbcrG5bzbVeBSR\"\n  b += \"i28817rCzXyyxmeuE4Viowzu6I3EdNpwCQm23r3GdO5wC2nK3q3EDYTgFaEs2uBSn10oBZXruUj\"\n  b += \"y8OsU5CE7BZeI2VG48DidKPK/Jjn666EbvcJqGpziZ7meLbqwPp2kqt4QIwVuL7tuop1J/v34EV\"\n  b += \"Q3EjbOERVK2GOe+R/ccMyszAL0glScm09BMQpUkpqOhHQlVhphcQ3MJVXqYcQ0dl1DlhpnQ0AkJ\"\n  b += \"VWKYKXoNFjGC6CFWwFDIzgktBLfPIXwnAzIENHE/zfsU9w3c7xDkTNwnuC/alxthKhPISiCKCYx\"\n  b += \"hbLbsELebFXwBvY38QHqb+P30NvPz6o3z6+tdx4+zdz2/3d4Wftq9Cc4Gva34sbMH54cA88NW8a\"\n  b += \"t380PG+SGzH7zOD83bwEmAtJCE2O+66cNvlvCODd9SD98t4XAnuL4evkfCx234dT68dVuoZZmw4\"\n  b += \"fa7bnmX01dL+JQN3+zBb+w8c4eEFzZ8U32eeY2E77DhG+vzzN0SPg1HFD/PTN4GLgSE74QI6Fgx\"\n  b += \"qfPD6ynqhH1AfYoI8b3PsPXe2s/OCcogA2+WeTbzgziTmdNG7ZZpdSgKk2fTHWA4uw5FYw5t1aL\"\n  b += \"z4WhMpe1a9PhwNGbUTi16YjgaBv0cuW/o2400p0bQQNivWuZP8EP0G4syyY7V8in8bCUTdi1Xf9\"\n  b += \"X0V62h71ndeWtfNoswM0u3T3zb8lmHwoRhv/iw9lmHQoQhof6zDoUSQ0L9Zx0KOYaE+s86FJoMC\"\n  b += \"fWfdSiEGRLqP+tQqDMw6xTZOf9d3w1VV0HH66jo6HeNgLT60KcZAGjfonVOvmwExPzyGcBlKv+Y\"\n  b += \"EfnzjqD9nxqm5RgjErurVPmhvb/vUL/pxIkwS6JsscJIHQvDwLSpQaOzc+taMPBaQxh4qWLQQbo\"\n  b += \"LxGDFoHNMIK/3XCF3ezaROzzfyF7PSLLb05eQuGSnKDWxVHj145Q3jxn36jRx9ancLNfDWqz5Hl\"\n  b += \"Swi4fLOZ5SiW5XLsWQx/JgtL9rnNN7QhHvfYJzDCESXAQ8B0dLxPqlbZR8zv7ODASwjGBGNq5J4\"\n  b += \"fJ9A8Wov0/5QygBbo+wVggmbiQKR+op8h8DrG8g2SUOKnmPDRRAI7gtyf2SEQbVhGhpGniFmiHa\"\n  b += \"4uZ7hpzagTQoOkyPUx96nPrQ49SHHqc+9Dj1ocepDz1Ofehx6mPg1EPtoLuhzPOlEIqKMP2sb68\"\n  b += \"LOeNdNNNHuTLfVH376diKq28KYfv6naruqHWHFUR9O8JdEipAk1wJXN8bR1oU52/DzyDMv2Jqt9\"\n  b += \"HwbXP4thi+zXmrrJL2sC4FM55SEkpQG2HvQRMoV0ImWcUImWT9viKTtPeQmwpF2Icy0yEEdksh0\"\n  b += \"FRZEitIaJTf6PyTxH3LjSUGMtJhb2kwNQ/5Tc6nq4oQV55vGgUPy1QFk0qQjWVuAgGFvJ81BCvF\"\n  b += \"OGzjRuNcOHqlHnxTBZNWQQAoibekEw0h1V0NCVnx2ExVrSKtVaz4XrWaxYP8w6HiqSVyqWF6JyB\"\n  b += \"fNfxHFzQPf36P1XwmrBcwda5xiRYzBT6car8kSFRMz0JbpSErzGg+rZc8dQ0PMtORYiAIMAmm/p\"\n  b += \"QdVDcyxBYS2SqEFy6NPONCQYMcrgpnSKzV+yZkZF38xDbXWDoqLTouDRqWIcTP057LhkdIVo2QD\"\n  b += \"MNXx8Z8cyCvrbVas+pWe6n9KQlt/aQZoBobHphSVY3UzoQakH0oGcgDmsLm2nLvgenDjVpKP0JB\"\n  b += \"vi4d0hRNneuM5lDipia2dW8NfA9KAcCmbORSehUvYlOHVSvFQ62E1KE8gsp+1H8FwyMC35RNlOF\"\n  b += \"PIE9qxzuIsdpIDNyHXM9hqYVJ4otx2BA8kZlD0IsRWFRlLvHQgR24mtEi8T5bdtqNPN5nVMf7jB\"\n  b += \"VkxYGt2HN+S3bXAXFRa5Cfbd1ju2c0VYtvED1SVIP85GsAfYPXOKxPD4FTe02j3DlgLrwhIo3Ae\"\n  b += \"x4QlBjgJbSGQGlIRI5sWlxp7QImyJk+RywGh/sJk9qlReEwq4TusFCvgEK31CF/4PMX+aU0WgXt\"\n  b += \"GfI3rmGIGnj8rZFmPcifeHW7tc6B7nQ9fJp/aNzNrzacl+G84bLjvAxbq7wMWzUvw7Gal2Fr2Mu\"\n  b += \"w5b0Mk0m7kTdvt4t/a8jLsOO9DMfunqzcCFd5GcJ9sXJQzF7Xjyd7bXoZ2ouOehnGk0UCENau8z\"\n  b += \"JM6GWY7DP2u+iKl2GMU/KPmgexC4dTQAQfwzdiCw5nAzs2bw3+JUS9lYMhmh2ZtZyTYYsC0srBs\"\n  b += \"HX3JGSFEDlWzoUMtM80Fs61oZhdZQYILsc+tEPhKhfDMAooJy4qv+INg/z7BLe82E9R/nIwFNkV\"\n  b += \"yfIl3k8PQeoXu6K7iWd+Tz/c3yWZwN39hjrSQZwf/ZCx5zfxpougNd1RhjIaf9QU/O6hoemnUON\"\n  b += \"H5c3qJIal3vuIRVDNTpOiAw8cgqAGSfYIhJPc2Ox2y8/OMuK3HdzVTRSV326xD0my4EfNq8u4F3\"\n  b += \"eStmbo82r4FDvl/QHe1RjOXgoiHnQ7tBZ4H46tr+3y5xAMa16LthATSDuJjbwbsPuFZjUzUrqdo\"\n  b += \"kKJJFb8P3dIaTXscQ0jeD/fb8S3QaLFmmJHW2ga7rbZXd1VznWHPFIaIQZ4GsY60gEZmFKFS4Jo\"\n  b += \"jjJG4BQXwXTRrhefa4idyUkzwjubeN7ZpM47i7lhiHfWlOFhssvGtMfmJWikSDiLkyBUpZGddcp\"\n  b += \"X4uMx6j1b55mN/n/DM2s/eniCgITUcM1CLaGXsV9a0KY4J0Ey0LgmpG4VeATHk2rAhBqRzjTyTK\"\n  b += \"iewNWACXV17Fvh2KPxUT0+jX3+SuTKNHE9jZS1YxKRQbxBiVIR+YaXYA8t50S3+k+ERdR+2fdjC\"\n  b += \"Hkg+/UoRD2BaORoymmm6xjJI7ULG7qxB80/wqMR7ehM/kkjPJ+mxvPptmIzAIgns9xrASWiRJ+G\"\n  b += \"RJ/kK1WKTwOKT0lI5etOsnOTu5vM3lQUeXXTuMiLKUqmlNmpoIK1iefK7W8uo1khCT3Jz/gjWdi\"\n  b += \"eM8fsFNBy3TZR9nkopwoJmiYqL1E3Z/MDf1b4nIrhmKhyM7Egg4ozFluhmOpH1cpmRdspcttrKX\"\n  b += \"Lh9rtdYPUwylLV6kIUAeOfRHSJPpdG0RY6VVVm2oBMHHwy6P5bfKgDSglmAzUurIWSIoM/ZA/+4\"\n  b += \"FTBanaphNMrXTNUdqEGipZUitIOdb4p9oBQlh4grB6ebpfPA3Mw7KWrvP/fMhjblpgoCqI1/ovD\"\n  b += \"dvlfAy4S5Z/jl6ZgT1MNa8+Dl9Du9vdQl+Hm8P9Rhg+UjfsXuXtZDo73xuxylEI1yT2Kncn51mY\"\n  b += \"RQQUc7adtA23nIlj3QQgRees++0QTKZqSoulSNOspKC3DU8j0ED9AUS3u7xrRbxKculm+8JBdXg\"\n  b += \"4GkAOmdhtlh5Sth93nGrbJMd8iHYE+SIKw7cPGuHHVPUsShSZI7RooIt/33vt21nZGK1t+2+YKh\"\n  b += \"ITh6MJF/y2i03Y5U34Zq8sYjGvCI+XU7AOl3TxGMKaBkj4aeT4/XqR2S7ON5iROuiz70Te9/TiW\"\n  b += \"X59eX/R3eFEs9mcwHIjaXAYTsSfbVoJVm+Zk22hPlog9mW3zAZ8bef9ScLwtGWubR9rWTtuLR5p\"\n  b += \"F91CRDXpNe6DpgrtF7C9dP3cD6eZwqJuJ/tCqdaQZ7shu4L97/8Jey25SfeeacuFd0rnvyxwQ9Z\"\n  b += \"m45un66rrrxV66l6xi0+LkL2q0Pf3kIHcGl0P+UXcVI7YhpkKgTmU1iMQBY+8h739xB2gyuGwoj\"\n  b += \"5YI0GmtgTXZiLOqqTtfnI5kVr8YDDlf7N0VnYy8b+TJSF0WOPcvOweWk9HAL2Q3CwS1vToZORcW\"\n  b += \"cVh5GMDPwy4Sp6J+A6cB7yHR0Ndd8a/7aupx7xAY5IvUMyDolnAldG8vV0ICUet7YbEkXrJ8oxl\"\n  b += \"54xkjNS7M8GsvmKFaTqtjxmPGuwsbUYhG0kMF/mn/qFfPBe97uQNWToChZs8Bk/DSuSeNuvp4x2\"\n  b += \"Exh+LOx3u4LrnqAl5aMPIkMMhXYl9jG1x5p6yEruSPpCJAnvG+plO32GrL5QQcsE5GXIFXwoEH0\"\n  b += \"Zy5JTwdqTBaAKbpmMraKhSzKWfwz9Y2YG0z90KpbQdGqjXqLVO+4GqbjdQ2kn2e9+d1fqVLRj1N\"\n  b += \"Lzj3k3mj7idoi3clekE/32XnkHImFi9U1u+UHUfLNVeSZe+OcqLmPfoS6Z46UbmtDMEuG1puuzv\"\n  b += \"4tBz/V0s127DnT1Q+JTPlWRf3N3AsVdd3ItOr35pZz2+NKOX9UHHMD/L7KfBPEbBDAaIPK681AR\"\n  b += \"SXnAUUeyf0KPBaM1TwDHDWRo9zExBWvtSGPk4hIeXrqOfitUbAfIzaWLG6gfPqvNYYTBRyYpDDa\"\n  b += \"81UXmtERhOEcPVIIzIawmshAmtfea0ZTDj0WjPOay2qY/g/SFhzRQwgcrm005RrJ3qthc5rLaAA\"\n  b += \"J8SnF1ZeazGeOCqTpqm81ox4rUV0b3xQW8xIsM6b82bdJqzw4nwbPqhtuGCG2jAfSNhQG+ZEPIf\"\n  b += \"Xmqm81gy91hy9nrYFvNXORmxhPks5hAS/qD2wn1PNeeKkr9R80liqS7Gd/DL6mwKkSNsxk3bsuH\"\n  b += \"YkzV7oaPYCAfGj3FXGVwzvNPEqD+FVHirNnrpu6rceyrceupkN0eezHpqYeX09xZX6nBnnc2acz\"\n  b += \"5lxPmdGHM2LyGGrD/uLmcpf7Jl3Va7fdZ8zSFaeetcQSPq6eTzv8whGXMecE9rxd1dOaFF56t3V\"\n  b += \"dz9Mq/ftzJg5gUqnEGAt/KtVwioSZNlt3sYwipO0kTVb7U53bEO+MaAVaVCyR53/eP7NtLMR5bC\"\n  b += \"PmVsDAGTuVKlRuC/cBXVuefzj9CixV98KVJlOq/lpXsHNIefhbWKQ/07cyZmbDeaXuGaGlz/mMv\"\n  b += \"zBq+e34XvJ77lrKOCYy/AVUfAja2f4BZ/hn11Dhl3JMJavd80MH/EZ/vk1ZNhxGd4YrqqykQxP+\"\n  b += \"wz/4hoy5Cq50yuClz/6OCUyPrcFza16onWVJ55/dPSJ5lWeWFn1RHaVJ76w6onGVZ54dNUT6VWe\"\n  b += \"OLvqieQqT5xe9UR8lSdOrHoiusoTL3x09Inwaq276glzlScujj7R5q58R9D+dMNkNFSxO47mDmi\"\n  b += \"1eqEot2BSrrb98GU9oH5fHHG9sAaEH0ApSDzIkGmJhA8ExXpSWf2WXELNlvD6o0kdvD5yjeq5Rt\"\n  b += \"RNjebadFrLfkiIe+co6WFRBPmeG+Iq2Hn8Cbi9A1zVSNyGjIA+XD1Ma2D65CBy0VUuwn2yUkfwE\"\n  b += \"fddFxkC996//Ewd9V6AU5frQZp5VMfGF9yY2AcF+fuMjBfxPa5pKMPKHZnaVHX1veJuoWoP62pv\"\n  b += \"BlFXSrU2LxBC3oB0VWIJEgVxKOr0ugGAC5qP9H1Q3EZSh34qQU6pK++C0j2smyO4IHlHIA84OaA\"\n  b += \"tViClQF4iFkTuei8PUyOMSoMFfFV4pnr5SlfetwcSye4kXZMjl2IlHdQ6fL66Q9FT/GlUdc0K1i\"\n  b += \"8R7Tw/D+750PTfhD/sjTQT0uLMDCRx6JTkgYgUXShsJm5SeaGHdmpiT2Q/359vmLimOyhnsGOVn\"\n  b += \"f+Q1DuilJwy6WS11BuuhmvEvtXHhvVYEXUzESOjemQEYbc9rnEH5xgy7IWWydGSabFiqir4tDj0\"\n  b += \"Ubfrosxo1Ft9VDgaZYsUMSaqx8QoTVxEXXeSc8L3q4jeTS/+JyN4p9HezvsPQ9+MMlaydyddL2F\"\n  b += \"SIFWIXBU8OnNVgXt9BRzutKuEA6R2FXFI1a4yDsLaVchhW7tKOdBrVzGHhu0q52CyXQUdfrarpA\"\n  b += \"PW1oq+lJIhEiVDP3ZV7XsdQiEKBxBUUH0QiiB3WH3wj6MHEGQM6gGKuP2lRtgUwd4Vz4HAAxblJ\"\n  b += \"yK/2xlk6DhI9wNC4s8I94Ic6lXdh1H+qlm7U1dVn9G1lbkN1DXNfkJ0YJFslnA25p7DRm+flV3+\"\n  b += \"7jqFyswt4ZOh3zkCWA6YbyRhyR8OYc1Pp7EyPtBVohfJwQl/LjnKlvxPwnCO2CYGDE238zAo0qd\"\n  b += \"nhjBZwqeBF2zK//Bbj4NjuaNMLUaXI5eyvMhXvWhkKxzIeojRE1YhlxhyIqzlr2wFeAVvn9cMWL\"\n  b += \"UVgfZLfaHaQl9jZApbrr3+DE04WQwPlXOey0AomBcVPjyNO1mYIVQ5QwxEXi+FhDhM6NLEnikq9\"\n  b += \"HkAm+4KBSlKZJkEoU/lakLEkIrhNMLFkTn6DXTJmU9VBDxOe3sZMgp7oJZGPknvydjX8Qo/nYav\"\n  b += \"yQvEzsj8/Tzr26rXyhYVsI+8Pk2jjBBl5hhKOYDsDqz+wAJ6G23/NGRJyJqvfsbeNfzdc/Yuqz/\"\n  b += \"1xl3hU2F9eEGENFsmD+T/WwF3vfCm4LGQ1h+qoi5FOSiSRfuUrbmIPtrAGxPGIhX1RbcGl2h8tm\"\n  b += \"/3wp7ga3I5vfBjwR/KZbZwW/AVU370E4+LfA+5reBmxY5YHu/PJw5Saqb6osvwMEGgCqxySwKH5\"\n  b += \"UDgZOcsX/NYHNhl2rSZxiW0X7/9RCcpaxHVl4HnHCqou24DB7vyskJ7wQ2QN3Zs9xq82sdBFJdX\"\n  b += \"XI4AxsKNngMEdbNxbn9h9kOfYQp98dxA9NIwCrablC/H7fw3Q/tlomiwNXD5URMyKSMnuDXIpcc\"\n  b += \"JnWoX4lvCTihIT/jybwry/fRilUUw60f7qUKJxOJtTi05+Eo0Ht7qqszn2tHe/GGjGVHWi1xIyr\"\n  b += \"N2wV0uVdOTB/n0V23H/Uj5lP1RuQvKjlNQpO49EAvOf4Jiwo1wgNTH5YqLmjRfYEuHRoUELDyAD\"\n  b += \"9nWuo/ZVgDhYg/xJw0eEaauFNFKwbdFOG79SujaIdAaBG66nGANiCHnjmQbWGI573Ns29Ke/Zqt\"\n  b += \"zDKkSs9/BWO0fPRrWrvyGVT3B8uTCPhQGrTf3QjjuYljMDvc2cvEwWgz7qZ7TfEzGsfdDvhq4+c\"\n  b += \"63BW9tngdXY+7KZgr4mcL7iZ6XfFBmsDdeG9MXJG24i4X36UczBHwSMrFMWmSHnTiyZSBPwL+SZ\"\n  b += \"vETemGgl5P4pd3tP8ypx6M6H6zXWz0NoF/QOz/NtUSxMV2b6R3g7jqbSymik3qLlhLmRU3+JRT4\"\n  b += \"raXF5POgTCvpewUUz7lpLjvbSi2ORfEDbWUOf2IJOU2deMrtjonxrFayvFim0+5Vdz5usWEc0/q\"\n  b += \"1lJOFFt9yglx6+sUW5yDU6eWcqqY8Cm3ePe+dnG985Jq1xIXxRaf+Hrv5tcqrnOuVq1a4h3F9T7\"\n  b += \"xdef6qXiuNYtxZ4LZrCWeLq7zicfpHAi3t6zY7Jy+4DV0rshqj+wsxv0jmyta9eJl52a5ne2HQx\"\n  b += \"6Apth0Tv3/Quf/Z4qN59T7L3Tef6bIz6nvX+h8/0yx4Zx6/oXO888UY+fU7y90fn8GLkDF5nMSI\"\n  b += \"o58TRsSiueeePK1GJBWrnxtBogvHwM6DFAnQQR0z6kvIfOdaH8rNY05uD/cGBVFuHh0l917cPtH\"\n  b += \"WB5xkLfp39iPq4Bwzu7+YF9ql5Y7BXsRNhRAFy6nBWjHnp6iuxh1dFZduRtURTthOiyIDaglUdN\"\n  b += \"6YLhWYDQa6A5xPOhxakrjvWu8JhKEGViRkaFeKkPwgiKU1Xma9izYB8GAIEP5E1aofBVwJViN5C\"\n  b += \"rVgPF60RypxurAaDRwjWrI3H0N9YARTP4mert7kzYnYAt4FJGrm/3Vbn+1x1+BOU2ugHGjlxery\"\n  b += \"y9Ul8vV5VPV5aXq8unqcqW6fMZdgiuV+EHJoTaB+2IBvQnvJLCTHVMHAeqTiBlCmT6Qv4kXe2dp\"\n  b += \"SAcYA/IxuSdj6aWADegGXMyekm4NRb041JChdJhSt9YCw7UCo9HAdTsMphbUWr5En7Xf3wjN3Fa\"\n  b += \"ufIB1xcp3TJwfk2Pi9yi/hf5O6e+E/o7rb66/Hf3N9DfW38D+9lPi0GT8y5mPrpFH6RZ5lC6RRw\"\n  b += \"l8c1SAbfpcJfpcVQiEc9R+CJgb7bKIWdUu0ZiJ7dqM2dsuypjx7WqMJcIuw1hT7PqLRcguvFi17\"\n  b += \"IqLZc4utVgX7RobERxA6UgbnIQ3Fek5dTWwJU/gaZvADTeBj24CB94E3r0JXH8T+PsnAANIgBSQ\"\n  b += \"FFP4c8OxIvX4O/ArcPP6UWkA7+6qTeH9W7VRvEOrNo/3YNWG8r6n2mQV2o80nveC12b0Pu/aoN6\"\n  b += \"9XZvWVtzdswkq6PKyA1FzvCijkR4G/9hjpGo6baxspLGaI43VGmms9khjdUYaqzvSWGMjjbVhpL\"\n  b += \"HydRtL9kW9BjbQMgFgTWzcxpUwv43r34bbuOqN3ca1rqubFdndKKpBS/ZPTdlwZbJDS+2Wrv0Xq\"\n  b += \"ePYPaNsapFwjs+o64zdCOcalmdiGl2ufNIfbyOcmyPh/aTBxzsa2FGP408OyKrogX5c0uP14GQ/\"\n  b += \"pSn+xEBcbhx5ZwO0eAnpR5s47TbIjNck8R1sFoW/E1huvaQ2r5TTHqPkwQOacRErG15cLn9Kwa+\"\n  b += \"ye0j88iAysVkLGx4o6piknP+0sOFF9GrG0WZVqYUNr7FG0VHqfpM1eKsUvUnm1IYjw1u/+GpLzx\"\n  b += \"b+OPh5ohujO4QzICjDW4N7xUNhhS27HNBfWJv8JOE63Z09kounizbGzO30O2Cigb5elTLaf8uVe\"\n  b += \"CLSlIk2QSznoTU6TlsA5LX/gE1wMtThI+VpS31q4++KOFLakTXpx5l9KJ+U7ncDgKBUSIYdzv5u\"\n  b += \"KC4HV6QN5Ll4QNvbB6U5dMj1s9cpcZjR8XFPEd4vKzOoD2OfjS+RlGHJm11Fyox8xYcE7juB4AO\"\n  b += \"H3HuRyxlSk309NeMEr4zd50btFEQ8Qic45rw9KUPOvGxeYkQhBilZV6VlYxoD9VoGrhay6QnmqH\"\n  b += \"hfqs6uv1HiQF3pOff6G1QY1VRg3E01dj/1l9EXSIj8FU3bUfU7FBY86I9yDa2nPRMOhhn1+h2XK\"\n  b += \"nap0qG3uhCkOc3+vxwP+ptVGOYGDSx2xn3YAsMu2bDrfNi8cPrZsOt92At4w43RxZi3uFyyl1eM\"\n  b += \"VhZKIhSlJQ62wOeRRguV93ADpQH9Nmkef9yj3NabqsFd74o2UaCyvkQ8RoHQq1i3VTMiNh9qFDR\"\n  b += \"aRxvF+zgWruEes5WomgPDr2oIWEtWTQD626ryp9es/EnjiqxkjChOq/Zyo8OqBZQP3x5j2h7tYp\"\n  b += \"M2hcDT1psi5LJeNYWA1ZpCGiGssUU6qNkqXBqHfgdsnB/nd6XjUuMCcTZqamGvkOr4q17MvzytQ\"\n  b += \"kF8MzFV0fQm/ahRpSAvVtwFmt7kXwuFp3QpttNXfAxaEQJ9X7TnPEE+wE1X9K5DtzZd/ttR9UB3\"\n  b += \"+IEyzJeSNRJvWpXYBuW/gbiL1w/k1sftm58/DnXC/L/YFS3swMe7Y1Al3DHIT1bP2agqz8sT8M9\"\n  b += \"lPS9uhXaGl+e32YVFLhcmNaP6u95m33Vm/k+DoZdJSv8yuR162fkb4Acu2b4MamVeXn4ZXNalCN\"\n  b += \"tXVfpyD7pgie3b70QL+H1wH5dQVso+iXZjVViJuB5ry6KtulZt1mq5q1WG1WAFhopu0121T7YP9\"\n  b += \"8n2kZxZWVaTFVxdo+1ahfXqW0YyoFAWN7bWbIXt//CtoA9sGn5RV2+vWgyW2axRZtUbVB23zyRF\"\n  b += \"u61qp2l83z8LY9y6zX2ZvZY+LqEQjFA9nX87PaQMI4eUYGSIn8SUgQaTpARTnrlzEkD8SZnzwOu\"\n  b += \"if9pOOHdOCkVJIuQyRqhAUpDLxPaaRDII4i5nPjzYTYRIcnBXSdKjQ+XPzGcHJ8WWF0SmMTlnIH\"\n  b += \"OxjTI/Hyv/ST/Z30VRUkyTMZw1g/JNdlKFtA2O9E82AKQb04TwyAC31LicAunGKSXdsLuYQ8LQU\"\n  b += \"V5A+AUlVAmFk/hO6A3K04g57WMoVWdMh3CHCYQK9ueQ3QNKMxxE2e0wsDVOefEwYcrdz3uhKfAc\"\n  b += \"NbHdj3vqmdhRzxADB7uF5GA3DUfyv4vQ18gfrYPXNOqveRag6Q2w5xybtTUm2qYdjw9DEAJLhlQ\"\n  b += \"5SFLHQUI3T1Qmzk810B3osAben+H9YKZMDsFrhxiSr6UMRXhcmtyvktFlDR6XRp3HheyKHSw/yu\"\n  b += \"MSk8cldW3GOmW2lCiItl7sqhWz/PyR1lsYaqM7u0a9avPPmX5IkEoxw4SzCiQud07KbjO/fZ3s0\"\n  b += \"b6JEgEhc1JCCndQTF2c2U+ISzt+t9m/n2/Y/KP8+j6Fgom8yDZb+WB5lIkmZfGWF+O9KE/759Nw\"\n  b += \"wi63cPKm1XqP+I3UakyHO3o0NS56tFCeguID+I803x6HqgPgq7Qp7kC5YY9f0GoATXKMn0pvA6V\"\n  b += \"MG0pzpJ8vqjJiSpQRYzbQxmx/4HB/46KoIabqygUccrtIM8Y0mxZFATE1qoDoIE2XaTYvjqoepu\"\n  b += \"To3EaaDtOML4rSYSgNT9lI02aa6xZF3TCUZpxABDZNi2muXxRFw1CaCZFwHoGvoE2zZVFUDLU05\"\n  b += \"/oTItVuIFnGZNmiKBeGkm0VaXiKZA0mayyKWmEo2TZVKyBZymTpoigUhpJNivQd4PbbH4Cb3hH7\"\n  b += \"CFIni6JLqKWudAmqSIhVkdDf4FQJG1WTENvAMadL2KSqBAR2nTJhs+oSENhx2oRxVSYgsO3UCde\"\n  b += \"pNgGBLadPSGaLqXMMSpxCIQUM2qQNaTqNQgMh22xI6lQKGUK22pCG0ylsQciEDcmcUuF61Skg81\"\n  b += \"j0gvZkG1LmeToNu3Mh5SrGHfRwnZ9KxQ21whsGc1R4kBPQjXd1Y9oc9yMB6yCtYHgEPM0Qq3Z53\"\n  b += \"LXbcMaB2zDDoZVctx2AK2PJ4YFbIHPFwgKLWX8MMlkFVJ3Gv4OT5esHvQ1FutjbaM/2OSXKbXyu\"\n  b += \"vUYoSoUNkCTgZALAEHtmgfhs4zHiggZUxPVyeaNYjvVACsP3pxAUpzTusoH5uX4Dvm2gt4nKl4N\"\n  b += \"xuSXCPgEo6NJhg5Vu0qtz0s4dY9S5tGluVGSDcrr8wvsdiHM0dKfNZthSaLGYbYnmYlv2xtiWbK\"\n  b += \"6W/T6RCLJY1BU0wcC+7kZSEcit6fzLuSejizjh/zM2XWqbLq2aLquazo4hm3yMGRs0XFxruOglG\"\n  b += \"g66c8r5+XbgyhBTuYh70KP1I2DncjuAhkt4LkXDRdpwYB/ArIyGM2w4W9oO/O1ZkA57kDjU4tbh\"\n  b += \"KsQZHsN1rUfZbHaWOmNUnEF0CtyLGhzfdNEe7hMz0id697lVd3+aiisVfCvFlWrvIXGl2r3alQq\"\n  b += \"F3i1uLXvEW69yoxImpXjEjSrhwV1yFTeXm2tuVDMwlE68W0tSubW0xXuEblSV8yS9bfbyiGzoPE\"\n  b += \"mJivgA0Vlr2flRgcSGflpYAtWP6qRxflQv8NELpvKaEs+q82bUs+qMGfWjulf8qI6buhPVvKEnV\"\n  b += \"82LqpBm2uGaadj7B3ukwDVY4lx9tMGmkXkgrlSQWzlXqgVDcgp6T2mzGQknDdUt4YJZsx0vRuoe\"\n  b += \"VW/FebMrWopcS6nX2JI9en/HyIW27Wdj8Q8Tlk2+b+qW8NFILun5eIH8V3jGWSQbsmw+Jq5ZnmU\"\n  b += \"TmwtpFXV+hCyNf5w/lJj/XYicS1RHXKJScYmCSnfBuURla7pExa7OFyL1clpxfk/Lzu/JuTayAq\"\n  b += \"fMLeFSVHksLTlizGceWptpi15PD1Uei/ROeuodVXRUPv9QjQirRof58dS0SYQVOduoJeIriWhLB\"\n  b += \"I4RTVKd6CuC9EWJpOTekUhJOhrgVzb6atnpcoUorGPDxnya6q88f0XRF1tF9d6Ow+rTJz1Kn3/H\"\n  b += \"j6uMUmih5B4W97EKNtsaRolR0dZazJB9ird7lFuKyby5PmH2gILI1+PE1mEKEVPhSRmskYrEDK9\"\n  b += \"iqMtrhUho4OpeL3fA+UrU8DXm/5LH6Jt5IFPgv6NM1+RVIuw8GtaowrQpJbxVC5eGkvBUG+CCc4\"\n  b += \"LQRgtqd0dFhy18sH1nDBiog/iyDUt8mLAeXoR7gA8DzBDGbj/zQbvFgDLaJXjRN0YX7OUMMSZdH\"\n  b += \"UVgpxLAqglD7ZrAgZJolQMKOqvCQdBZFQuCzqpAEHRWZYGgsyoMB48vUqAwJ25UBrTA0fFIGf27\"\n  b += \"UvG9mfffjXwf/G6S+ncDO1jCXbLBRRYu93uK+mitvhh5Rr6b5bAS8xtFKq2+s0xbQcZ+rPf1AVX\"\n  b += \"P0TXxHn9Pae7Qd+tC/NdRBY1+IaNZVp9j9RUkRdUIL/26eOhNV69AfQqoj3g3smvxI1/J2tNH/Y\"\n  b += \"31KelV2kWv8mUQ1cPoZOe+GHR/LUg+4MR/XMPVCPwH5z5TaYx1wzkNpTobujmXk5GneZPGR6Ezm\"\n  b += \"S1hhWSv/nd0nl75r4jvCDRv+QRiHav1L2BM7nzZXEPO81tY1m8BZIoERAaM0pLpDnmkxd+DP1o0\"\n  b += \"6o+22nMscX5iNc8xM+Q5pl5gS2aVYxfp5HykOHZpe3vfLHFbOGlqIX6sVUEnnR38ap8uP76HXdM\"\n  b += \"C8Z4SWFiZ6SREvJOGfMDmI3HgWnELwpBvmjheQV2kPlga5jyy1vMpW4nUby5Z5bKFIBkakRYzwR\"\n  b += \"SgZIze9YwuU/IWOJIFo35l8oZAEo/4fC3FDvGT2LIN5zSlvmBG3MD6zVXhTXk9VV/Sd3FVkEhSO\"\n  b += \"iRfaeVU4Uy9F1pUvT8VHNVYmqju6pVVuK4jbl5x5SWm/nz20jl3iR7XjULfpglq4x04EhZy+d95\"\n  b += \"1XqsQZIa0EZCX/irqdlE17CGEwxQ72RL9OuCQ7NCFErR7iZ1tTAicAC0BYX6uvDKYqp4z3DYuVB\"\n  b += \"isIqK12nHODGp6i0qX6BydKFht2xePyjK9nkb1vVhlxn2AtB8fdgKw67YsA0+DA4g0Y3R5dTrFl\"\n  b += \"fs5bL0n/ZdbVpOKkW1UoCKr6Vo9c4QINopYwUw2p/slkOXDFXP9DDR0LALbBx3zLjgFYVovKZMr\"\n  b += \"qpuFjTpVCZXPBFLWk5K6AzRQ5LvVWdqAU0WVW1G/GY7+qhYdypdfFWbeM8ZHCOgv7mm/8YHML6G\"\n  b += \"9lNyF2Bsl3u7li+qlfh8W7UcT5JvWToVvU5gV2pr5YoKY1uHqpsv2Luqg8/bu6pr7WGlqDr1dFz\"\n  b += \"rVOM6VeBS0S6tSgub62sDZQB1VftxnUo34ezpST03q2Jdlrfxajg08Imc1EXnQuI+EfuVficSwM\"\n  b += \"7827GMr9fvEv6gG6N7d0V3KOdRp4zztzf6IgMiEkBML598F1EfY4BBujTwAYrFLWA00T2EBS0BN\"\n  b += \"I6X2+NfuVNZ3u0Td07ayU0MZqb7NJnZKaAbthqHxGJWwEj3HsrfZRC/Q8RxRa8peKIJXXOAIkq/\"\n  b += \"g7Sce41Ajd6DUw6iWhrV0ijYkRwVOMs3CX7ofQK5+UYByvxJzB1gUYzKV8CL0nbs+5eIz0isSwC\"\n  b += \"4Nm8Jjwg+pzTk8Vj5ndQYB0atNYB/FuemIKNpzSWiNn2Q9jATAzFeyhdZtwm4XtCRYoqQQPalpx\"\n  b += \"MpzcNEgh+UUBtKewGNCAZifYo8QxC0Sntlw5nSwyShVRYP2jazM4lU+CxtZfNnHOT3B9JaNUAg5\"\n  b += \"opdykBFVf+V6Zpt7ZKgo6flGTb2ag8WsSR6yj7zZ0lbOmu9RMsuEcv9SYVmzR+JpOc/k8jvIzIP\"\n  b += \"58/he7+QUBjAMfiJRlBd2MsvfIxCAdtzdml9ATcrH1ehwEOJmXS8FfgiKB7Kt9jv5+FQoUROu4t\"\n  b += \"T7uKkuzjhLhbcxXF3Me8uXjR68YK7eN5dYPFM5PI5F3bZXTzjLlbcxdPu4pK7eMpdLLuLL7iLi+\"\n  b += \"7iSb2YDpc4iNSaJHS8AXvE2EhO4rjj8saZW2w/uJmNHcy/j9uj1lCxTN8axs+YnAL6pJ5PzIjxE\"\n  b += \"0KOyjKa1ILczp/JfRZLmnmgqrMxLSR3Dp4S28eux8Ax5MRKqjQj3GIAscaKVZ75A3CXFwIL1OB8\"\n  b += \"cT8YVBr3i4NULMjj3CSkA9E4N1yi1CfKBswOOxWd23xO8f0y0gEnV04cEBs54VpYTIfU706RAdB\"\n  b += \"jqOFPvPcJiMODMnuA6JhpJJ6zsFJEJW4KTB+ybiqACacrX1MRHuxiOftQeBcFb1+1+QwESHc/DT\"\n  b += \"jnYKBnblL4Mb7C5k+g80DQj+3W707YPtoJI7HFRg4HuvR3GA6iMa3QaNoP4OdQXiXXEGpeMEijY\"\n  b += \"GE5caSceLPdhJH9JCo/duqJAGJBI3753w1m4dLeY9cM+J52jxtI6O2DO1hscz+hvfDoAaHu47sb\"\n  b += \"aCsE/ve2VZOWX3cRt+lnfuHv21bIYaStJGiorS7862tvq//4S2ir1n9PW+HRqq2+8e4jg/Ib7YP\"\n  b += \"28lfO28tfmTh42F7/t+8iyw9cad1ub776DRsxdvAwIj74/7x5UPYPHuYh7nffZ2/adkSR1XBWvE\"\n  b += \"7L597zRJB/XlRJHwzlFroJJRguX3zPEzVsqHrqj5iXSm2nyrfvRkE/9pX7B+Wjf/CKO2fbn1Ah7\"\n  b += \"Hxa2aKtdbjFXn9NcJRw1QGXUeucQQ2OOHIGjR1JCEOEmcRhqOiRZ0bhN2rCDhd1pXYsFAKGWI+F\"\n  b += \"UY2T3WNtCH5IVEtC0gs5clUQLDX4ldDxbYRqFxnJjZxkh07EONjdqGdYEY9Ew+AoNxamDoPSd6U\"\n  b += \"mSkjsDp/DISCs/6bxImQRwHVYanBeVLgfzl+7VT9xarjyjCT14zhOKgjsyDk00ZqqTMIDk7zUXV\"\n  b += \"L1RadI6z001C4S5KBehrvJ2zmu1CUNyKpZaJ9LL+ipuSmndo0JmFVLhQ/Ddx5bh0+1HCWIa3mjB\"\n  b += \"TI10g4zRNhhVhN2mDpEjcGpibInOneXj31yKeg1Kl36KNQi8UgrJoBy4d/brdN0Of+7DuEtBthd\"\n  b += \"InRdZSxTaEJDs/zfhzR77zVEWw7D8fw7iR359o/dNnds6UqbjT0uJPupJSYAerIP6qw7hGL91fY\"\n  b += \"nI6c5to3YDdiPcqeICKC5O2Ek3YL+HjfywDzmxVNmUFKplJS/wE3E5+zDr9CH5UwSwRhnreNCYn\"\n  b += \"eX1O9PY4ctJvw4d6C63E9DH4nDSf7V0PGY2TMIWWBDUibwaMIDBTb1qW2PJyLZ0ofcnWNP36c/t\"\n  b += \"uHWLNtGsw3E5be3y+XfJZTeSd/QrHv+Le7b39QnsguWBtk3h27fzDQEFZYFBz4k1bvHpS9ykNLT\"\n  b += \"TcNVDSe9DBwUdLVv0ksOuAm4FbF+k+c35v/ZRDsiPly5/rNYY3aMhBG39kdwnOPOR4sI4Eto1fP\"\n  b += \"fjzrJSyTBHvBTCe2z1kuCLd5/jTov9SJw0/1p2GE9Z7TboFjRhrhZGmLGtdLuqmfD/DF2zh5Jsh\"\n  b += \"ttFQjxQ1DQQjBy2nodwHLEeDY2N7hjBGku3fHBuOODcccH444Pxh0fjDs+GHd8MO74YNzxwbjjg\"\n  b += \"3HHB5lfY7l8zoVddhfPuIsVd/G0u7jkLp5yF8vu4gvu4qK70OOD4fEh1FUChHOqrdnj5EsOj4ay\"\n  b += \"8yt1zaRt1b8wXkfmIvdUaB21sARWFfZqzkOEiVBrVN2TVOqWuBY0pATxWSwZpzkQefyYllJ0BXp\"\n  b += \"+UHEX49c7QdQQiewJItETRKBqViNkOHKKsONHeMwhUxhw+5/MFhm3/7EjxXGUOJB11FK5Q0JYHR\"\n  b += \"JCPSQ8n+CQMEdMfUFjaJY39Vq0RQHxyyuILS/mT01wVJpJktQnA7K/FM0ynhVebhn8pD9vwEIlc\"\n  b += \"nvhiiA7dbvcBsQADXFQhU9zBlRw44ndS1VOtNh6H0wE3iNQu0/7xGtXR/upo1lms1KX2M49AeB6\"\n  b += \"YvJrgyoAQqSi/ijbHIWw31mvYYcKmbhxGKwxcYcmalfpGg5X36Vei7e7AbZuQz4CXKXC221Pd+A\"\n  b += \"kl1bg1hyWPSCveUnW7lAyCzWzhmTGVnaZCeCJZnctJOAhWlzt4oqkRgIuT3sGcKiBUuZuCw8rJR\"\n  b += \"pepfQsMfWM0TwYzo2DXU5ybWnpJoxaA/fWhry1av9gzSIEUoSwIiE3JCGH0jYlCbk7LhUCne1Iy\"\n  b += \"A1JyNODbBhHRM7Mh4jIfz0xE5he9w6E9EhGfi5l3Mgx2NtEc8beZhow9ghrBf5gluh6Kd+WSAjp\"\n  b += \"YRm7pdctrrenwet6WYGVcXOvU2zqjRUbaWoW9SgLFlYy224BIF0mjpDlxH5hLzZmD+P6gXL+v0W\"\n  b += \"gdZ544LAjSCnPfH1J0MEadl+x7S025Lq33G//NuzfrD9RpLODomunq/5W4QAFqBxECm37ipe9xW\"\n  b += \"a22SaMyhb+2n3gWH/D/bP2d8Ps/QNY0DWKDkwBlRAGNJYZnP9sNTbYKjRplUeGxlwnDntmDctcp\"\n  b += \"IE2Faq1YZY0ZALSwpDmQANdADzgqiBbtK0o2hiLFj1gi8JUY4OhNBuQpivFt2mkRdCK9UZJ0CgJ\"\n  b += \"GyVho6T9rp31BsXWQTHRB9/G1RolK5r9bbZR7K9vlA1olE7PtmlvwrZKaltig20ZtF9s12llA+0\"\n  b += \"UWwb9LWJoavt/0L9eIHLsOBj0rxPb1kYxPuiPi/Hr5mLboL9ZrGOzYtOgv0nMZ6Ni46C/Uexr20\"\n  b += \"U+6OfciNFE9ckkTMT1t0JDE9dfiJgcqtjEIN8kfALeKZN3DM0FBkdDBG5eGGf7MT1IoxLbU3iQJ\"\n  b += \"jS/sslk3GIv531/43V9f7H/I/CAOpDOKfVaOQ2hCOXGDx5wOdueEMfOqJx/su78G8HpM6qcf4kR\"\n  b += \"hSTlhSfF+dfz464ut3P+XaPw8dVdX9ergEB8acNN8wU0UHnQ+ZydlNOeqfDdLph6F8AvWHqJM7h\"\n  b += \"SHtgzX5tHXbkKxYcVpr3aWnQOBlqDlsw5BhPZS9pE30B1jjSNEAav06VwP/4HaxWjBVFnYHUGuu\"\n  b += \"D12HAGaqgzEGHE2t9JzJTzp5UxTCmI6kObI8Y6ffXrbIgasW451u/UbHHmybHqLZQ8kekGUSn28\"\n  b += \"8peqL9RN5ubVHXrDE0g1Nis299xUS/2vT1QPFBzlh93it6aeYvdivevg41mzXOVXdnfgnfa0Akf\"\n  b += \"arfkdoIO6fm6rYKLs6GTqLINnapA5ex7biAgXqxNKGh74gZK0ZTfwpKauVG30wEenTfbEhjWDUV\"\n  b += \"bLds2FV21tBkv8iH7GZE3/QQzb9rfQEK4UKtq1xtKCflxw5uDQXubqbVdIJi9ztxGtLVaPtftYW\"\n  b += \"WnA8ZTZ7ZDxl+IY2q2MK1iTO0dZVvcLjbqZl30HR07pzpbKfRW4o34nL3Odd6xdkvh+mNr4fpgs\"\n  b += \"nDtXmvxWlsHnM2dLY7kCM2uVKHlSw+yZil3x/7vLDTF0fUjqSOquZI4Y+rpyiJBDITJAzJsUe1N\"\n  b += \"hdUodgb/hokpaN7M/rukltW3kseOpq+hM3oV2oJpN0fxOKjQ/4+HNPoNBdHAJbWj1ZGd0Kj5OTP\"\n  b += \"KDnHZrEsPEa9Ha0Bj3dVGzc8Zxw9xuWbUfMXzQ1weMmq+4ggirtSMmiuCCKA7voCyXUrUHKtu3H\"\n  b += \"zZ7IqWk3oDyEkY00wyyD9l5EIS5H/DCi0Dm5NNfZExT4sSxmcaPpX0013RUqIv1YhU37SSuNy/7\"\n  b += \"cyeWSmQXa9t+7yaV0Ptn21W69o/k3HjKvbP8l6hhEBewvbgLq4kSvtQGT1D0fwkbs7WqB5mylPv\"\n  b += \"GCJ3eCq5JVxJqqds1mIq/WiN3GENc+gn31WZQ5P74RkX/at+y7NkaM5mq7L9zRCrgV4tLNL7vXG\"\n  b += \"a3VFnBDAfCAIXHfPuXywai47hF0fjRpWk4ZMI4JDnxz3HzQMMO/SMnB5a7HWUmFdOa/ZloebkOH\"\n  b += \"c7YPmVTBI1m4kPD8VWb3EJsqsl6BymSnV1AuXxpXeIO8rHvmnoiuqaJpHGiYWY2NXZuGaB7Z7j8\"\n  b += \"Y3WbxLzEk0y/CKuqLEWuX1USIATSiaGYgTlyUVmLxWJZojEK2c4Epf0tYp90Ti9SA9hfUmEAtm1\"\n  b += \"aJ05OWAX1ZPVEq3FmjwkOEmwCtk5/UuJMNmvtg77CQ//cSYUaRJ+E4STqVENxQTXY9RWKqqJjoy\"\n  b += \"HVojUSmrYVkoV2ZVc3qErOEPUmq2UmGoZD4/hTLUct9iQqVbqDXPnvVmWmGs5C7Bhc62sEqX5cF\"\n  b += \"EVOYmZK4ZYxv5Eoczuqyy26vZSsNhqj1hsdWoWXbDY6tYsuITI3iFUrGWxldRyl3oO2201armvR\"\n  b += \"M5aS3I/GTuLL7HeMmomZfTKWW/RVG/IgouGekNWXDTTG7LkopHe2tZc4WprLlNZc7W8tRY6rL3K\"\n  b += \"mqvj+xsd1PUWdeiWMbXFc9ZcTyWiAV2GuzeAuJ1VaV9NlEd5HIQSAruyzAcWRugMvLa0WbMA5gb\"\n  b += \"aE0Y0hxVkSaURjXQ73qk0jY1hE1pVV8qYUUcQrz91oP917avTCRJoZw1VajSsSl2JKoaJqoiRS7\"\n  b += \"niNKKya/6mhIJCQYLnh9Wo9DiRGLEPrFUsWKNirSKu8qkqM+80g0kR1Q2WUT3wIhTtoaccBUKtS\"\n  b += \"iOq3Wal1o3VrWu9cjWkXEGVaGWobF5rGbuyDekf46I9xJpROy/T0FPsgUVHWs9dXgbf+28ad3xw\"\n  b += \"BWsME2Zko1rXZWxo2o8mYQi3d7v7K5S8TfZbb4Rsfd44LMTyRwTaIARuZWEEs9J4zErjMSuNx6w\"\n  b += \"0HrPSeMxK4zErTYVZaSrMSlNhVpoKs9JUmJWmwqw0FWalqTArjcesxD7uT2DptC9Z2EMbkj/mXV\"\n  b += \"fvnuHddXr3R7y7Qe++wbvv17uv8+4mvaP11L4f1rtncXeujI7IFlzaJxBTO1iTYEPjhZihF2KGF\"\n  b += \"GLeEgSSNr6WtLGkza4lbSZpO9eStiNp82tJm0va8WtJOy5pJ64l7YSkneoHSBvU0gY+baBpp2o7\"\n  b += \"4CuBE5hMi7ykEAkeXcBgOlNwHSf1IFTI70jqhKFPJn4t33uIUjeRKFx2Qi2PbH8pkM3Kbg/ej0P\"\n  b += \"wzK7o7qJxTqgpf/KgwMuplRt03PdqQUz+ngYkRXJhRgSHZl3BIWg1XOYqbytQrURFWjt6jCxIOm\"\n  b += \"CPm+d/wZ4TLto/0gb5QKhkQZxRtQr2WSExjMHz97PpqgbZMxDccTCR9Cg1u1neM6O6DjsZHShpY\"\n  b += \"nxgksfiB6G+VqGlvY68zHJYWDlSPOmiRFg5Ibv8e/VOdJXeuUskoOv1jlgzsncIqIzeMVeXAa7R\"\n  b += \"Q1cC+kf8zyG65hCdP23HwJnT/1SH6Ejx/oceor+chI11h6i4BmBASjNPo5mlazliU2mgCaUQRk9\"\n  b += \"XTRYLJbZ267r9F0v/JdJ/kfRfprAd2QEBnTowuZ9IoK7TmkS/pLNvv3VPl8Zbrxfhf75O/6W1wX\"\n  b += \"SV/mu+VP8la/df81w/qvVfU+SPQ/0XodvEbVE/Myl/0TwKk0F+XVQI2MrY/mujF48CywJ9Fw31H\"\n  b += \"bHUG6uqd23D8yWrZ65SPZk81q0eXWukejo8WzKHtFnLt0r12rZ6LVaPw3PNKv7PGfSlZtCVD9gh\"\n  b += \"Pv8r/1Rn0JHi/Q89g/58YuzZqcY48tZ+LEI0gnWDmMQeFRyiVCxgXsTzBoPJcFQmUR1SnQxHdSQ\"\n  b += \"qJyfKcFQuUSRdGR+OGpco8qpMDEdNSBSpU6aGo6YkqiBvy3BUIVE7SPAyHLVDoqbJBDMcNS1RO0\"\n  b += \"kZMxwFIKvAthom+hpzB8wkZhePuqYknrOZXURSac6jR11bRiR0l7isFpdJXMfFdWpxHYnLXVxei\"\n  b += \"8slbtzFjdfixiVuwsVN1OImJG7KxU3V4qYkrnBxRS2ukLgdLm5HLW6HxE27uOlaHBqVZHNsN9rI\"\n  b += \"7rTp7Hjf2f6lxOvT0iF+uBGL82VK1pycIRMetn7sLOdttMgaMm/ZT1FGpgbZy/GQwGRZjduZjz5\"\n  b += \"Ld+TEy54uB4Oi9v7L6h2wTEv5y0El85Bv/7STN6X10qx+rTKgykPLznk6FoHKRWjHquQXTfXOkV\"\n  b += \"zEZfuiqeVCXbPL6Xw4VPrzoZaajy1EQ69ZoHgGL7vJJ11wQrFLocxjj0HWVVWK6XwTnK/L03zlF\"\n  b += \"4aFVAsKOrD6LZETqF2ONOd8VkwzLkfONkNeeoW+UT7LC4l/A0Rfqb/rVeXUF0rdja9o4PteeUSH\"\n  b += \"zBzEFD4JmxWeHIYmxLSypRBxj+cRpEioTKn1Jcel7BFe04/vItdLdAi+qGLFceckthqHuEPl4ld\"\n  b += \"Gio6GRcXO+CcbdcXxfCi7hVf3aWmpAJcJ9BjpLTZWFmA8RUNPpIK9iSzG/cZd3VD2vAlMsWDE3Y\"\n  b += \"YJta0rRWRlmCvpIXMAhSfgKwHdhbXWp+caKEWTHdzNyngPfK9USSR6tGBkhtNVhjuxI8Z2x6bYV\"\n  b += \"7yzaB+3WSZEPC0fveAY4u20Wj7p71be/URQ7iyfuuCM3NOiIXd0AoLizt8Rey4q2HXqhaW2Lhka\"\n  b += \"LFMkjFaZluc/4rWU2oUYwX3ub6dJAIH/tr99VzQtp4W4aOq+Zkq2HRPc19it+2X7+vL0v3Ubh2x\"\n  b += \"Q37VX+5q4tpXgvmbe1PcS0+EJI9uaBSMni+NGXjRv7M5mDkaJkJjK3kZOF9vK75raqaJd2+B07o\"\n  b += \"E9ZbvovJ5mnG2b0lkIU9H1jTjszrWPcQIGgCDIVjYK2comIVvZLGQr40K2cp2QrVwvZCtbhGxlQ\"\n  b += \"shWtgrZCpH3fzhUGWK8+Nb+5LkyEIPSnX0quKf7DTF9yMQQoimys5aI29oioeuIUK8rcsAxER1u\"\n  b += \"EGmjXfPqltYh8j90uNz+wGwfaEGzNJq2XR052qxtRb5YJygDtxWzKiLHorW12LBYZyZzSTJJgiV\"\n  b += \"5ohhbrFOSuSQdSYKVeUvRXRziItMkuSTBAn190VkcYiDTJOOSBOv0dUV7cYh3TJNMSBIs1+NFa3\"\n  b += \"GIbUyTTEmSKdojNhfr7GIuSSFJClLJZYvFZp9kk0uyQ5LsIIdcY5EkcpJko0syLUmmuT1OSR6HH\"\n  b += \"dDgkMbvlPid7c8nJoHmqVBdKkxObIuVj3z6cbE2yTALH4j3RjrBBf30puDeruAkkgjjpqADqERx\"\n  b += \"tE1gRH4mvI9MEtwmiUNLhrXudCJuK+IUkgFP+D6SeqKTYyERpfOG8DEzMS1gbd+0aYqBnbKYmwi\"\n  b += \"TlU7pQYUq0leOqXIlYhToo9DiUfnYp8kkHwoPSv7+BA6f4LIEPaUjBzH0MrVl3092r+AA56eh5A\"\n  b += \"ccVyR99WHDjMpwDevcR708jQQaYjFvBCn5dp5lUihRZNDzWwvyX4NepEP6q/KIQqM60jHJX69Wv\"\n  b += \"4AYCEn1AsIZVy9I1n9BEQA7f81qtcn2Ur6iPPsZR9OoAY+6gKvUOxEvCFeseK/L4EmfASwgfDnj\"\n  b += \"lyqn89ELHBdB4LgIMKTy96Z057Jz5ccS05wTjlOxCdgxKIzwdka3BvZz2DeP/+JdUSb4CwXwIoT\"\n  b += \"n0v7k4ZwApdPAVVbKQE5nMZXszgEiLbI7yXdDC3iaQfMIoebztpNRCeGf7jWLtNeiwCkup8Q0aJ\"\n  b += \"o3MZb2fcVDKE1su4F+dXYM0idCNxOxOuPBsSEISYkbHSmag34bHk5nDFg92zSst8/SC6At4A/jg\"\n  b += \"gVhp2G78jHW59hZO0dT5WjqOSaa45SAakwAGQcZ2B1Qn1ip/K7x9MYwAGYtpvUWvpy0l8CvKybB\"\n  b += \"LMhHB+LVEBAQK0MLybGF3Nk8pkgLwpeACFIj7T8+2v7axMma3WDoHJByUMJ1nw56UtpApi0UOFQ\"\n  b += \"4YldgwpU3UDY1u2URAxnIzglmtKy2GbMiuVO+hqIgR+ARfWGgbEE7XLHsxgkeJEbc2eyw/UIcZn\"\n  b += \"bT6pR60WJJlag9qnKbwaNqW01nZEFclOO/kmG25agaykq4KOf/Ki6TuI6L69TiOhKXu7i8FpdL3\"\n  b += \"LiLG/dxpO8cl+gJFz1Ri06UqVYWu0URBVTRqax+oSx0iyIOqKIVSzqURW5RRAJVdCarXigL3KKI\"\n  b += \"BapoolVTrBwKe2xHjrKxnd+2H+H4K80DuuuAq0m/hXAjgbEEdiRxSwIzAn9vB4w473cQfXz7Ebo\"\n  b += \"Z6TrdwH0q91PEE7f3idzTJQH3sdyz6Vj2Tq3gIVI0JQXW7DbX6+1H6H+kNJ+xVgGqVAayk2rl77\"\n  b += \"S/HQtw8AUgBugBCMDBgdi81oGDySTf5ze5U6wfTVngnxq5Gmfk6mGDQ8pCJc+/TklCj9UHZw9y0\"\n  b += \"WOnfKvCKRAQOnTQrwSixLvswUUlbpSQzeyKzhhByiQ6Jcw0ySEeKDSxYFY6j6opYAbb3zOKGUzC\"\n  b += \"cLGCUaFdoMYyj9VCiMpTwxUOKJSDYE9z5+7+DBrpCpOiIJ+Jhbx8BgC7HBXjt4RnjVzmIFY+Y8g\"\n  b += \"wccVLFujudp5IFc6kWIaYkUGlbTyDf9rGCsqprRnDNuK13USaHhsH2hVz1NrGVcPStVoXeXw91Z\"\n  b += \"p8JpXmY8AF5RFnuc/aYr/J2YpK0cVW9KHKwrQOq4tj69mHqruwfNLfwRb1uLMZ/fVEhh0M8sTEe\"\n  b += \"qJuYp2PmlivZXm7poH1xDUYWD9Ge7+JysD6EsUvNlgNrC/FzsBaPHRW4srAmnTpNLeRomZDyMiZ\"\n  b += \"lLGzGhnZlzKRPKSYCx+6WjEvmZoHf1XQJV/Q18k3F2pB+7GKOxTgujFqCz4PN43KEDyQEscid1j\"\n  b += \"XEDxdjW7dcIbg840aunXDGYLb0Dq6dUMNwRcalSG4PWdIZbGRW2gMI1s3dtnq+S7QxogH+a+hur\"\n  b += \"SBqxs/oww0fj6+tvHzGilP1VKu2DH9jsrAedj++anYzBCtM3CDdUb0PAHNQwd0hDbePjQohu/t2\"\n  b += \"fyPlhQz1YgfhThq7CF4ek/oa3rshpuFxCOWJt4tPB+Z8HzsEZ6PjnCA7B3i+Xi18HyMC8/HHcLz\"\n  b += \"MdHj8fo1ICqHfGMjfu4GNfk0BQH2557euBCKXIef1/euF5aRLfh5Q29CqEe2yjZMUAp6k+JxOSU\"\n  b += \"elzeIx+XLxONyu3hcFuJx2eMs3+tz4u99H9eP3g6uH73vx89M7wfwc3Pv5fjZ3ZvGz57ejfjZ2/\"\n  b += \"tB/Ly69wr83NHbiZ/X9G7Cz929H8LPPb1X4uf1vRn8vEHEwrZ/ZopXFj9U3FTsLF5R/GBxYzFdv\"\n  b += \"Lz4geL7ix3F9xX9wpau2F68rLihmCq2FZNXx4vCdvB+dNj9hyGlsn+zomn/toq2/dspuvbvWLHB\"\n  b += \"/s2LjfbvpmKz/TteXGf/Xl9ssX8niq3313OEZKP9QkwcDjq2QvY4Cv6kZ2dB4IiBwDH/a48DgeP\"\n  b += \"8r7tDEQSD+S8mNozQexF8kyNIVYtd2NzV0PewDDtVVah0pJD4+Xs6HU67+1CA4zJIhB8RCZcdiq\"\n  b += \"E9tvcacsgG6IJR0IW513TVwRib4BJD+6sht9MUeAVleBeYKmy0PcWJpM/M5n9AH/R/xCpMjFRhQ\"\n  b += \"qowtU4VQlFeGsWLiPKzcVWH3NdhfLgO7TXzItIAdn5hGWLDR2yNTMgHCpauyHZFhdT+s4n8LkZk\"\n  b += \"HML7p5x7bj/SbCNkq7Z5GmU0ypRz/6wbAepu2sHfuQvMRdyllqEoLfcesieIz+qeb0X0MZ4wpSx\"\n  b += \"m7fkE444rgbJiErWQNExlPhu7Y2E0a0ezPROamOxJ1AksGGfy+RWuISb/5zyXafRPeSve5Ut2ek\"\n  b += \"WsUWyDOkBiW+xUiXljHE7dnJoPQwQhCHO0Ph26Xx65h8l5/f7CyH3lSYeNW/7melC+QX0m7LLNw\"\n  b += \"jmEB3ukA483z6BiCC3ADYG6bWiGEhgdplk20R6qSF7fL1GZnRZWPXf4MFfsuI4SN3c/6ckDMZv1\"\n  b += \"6BPwlbelamDZ53nXneDdyd3RbkEfAOcOBnF7KPMcUcxswwTlC+ImTZQLCFvB6EO0i1k7W8ENKRS\"\n  b += \"oXbu8vy8xW92CGHFBPKFoJGQKWTAiaaKj+nEYnE8LtAxk4/3WtOoRXgSxAW66wuXRHyM1FfYq9i\"\n  b += \"bHzUbh9Ohvwg3cPp+zN+O4uU64PfrX42aLmM/2J3CzFR/JvWAMlxUYNs1/YRS2l39kUIWKCQIuM\"\n  b += \"Ad8iNWa3AVu7ZZIth6MRYpusaHYWGwuriu2wC1xWGg9h8Ej8CCyqbq3/Lvvtu09/kL1TwL7AqUs\"\n  b += \"5+fPXmjYVWVWr4TfHqcT1Kh82/yFM0cZLVcSbWtfoPblu+eXv3aM0XIl0TiMoKXK3/q3v/yBhNF\"\n  b += \"yJdG2VQu0avnlCx/8jkTLlUTDcxo9UH7uN37nbVI0uZLoF0Eqgej/eOETn5FouZJoaD3Qs+WfXf\"\n  b += \"qDn/uXjJYriT4OIgFE/+LHHl6Rd8uVRC/AqhzRP/87b7+HsbyQyBNmIDKkf/fpr3zEMFauZF7km\"\n  b += \"t/+aizCvJzeECPQJCY/bQTyRCUy5CzuDCg+pJBIgFlUAAlmwIy3Iq6ORNYscKUsEwBKMtkOgXdq\"\n  b += \"DiH2Ywa4SoHdWsR3UTlP1M0anEUXSH8ND24iiCcE1cXPhW89To5BulRBohMVid2G288duH5g+k4\"\n  b += \"hOW1Ge8M5R9T4ShNU4FOhVEEQ1Vl8mWTDgU3WT8tnCZEI9I/WQWiagHSf2mF5cBJSprgEk/TJL9\"\n  b += \"rbNvVgnQH2pXbKsm9vQsjaVDhYHOPZtrFtW4E4wX4eUGJeHNlQkJXIBIZwTOaBnphqESJFniJao\"\n  b += \"jJxiZMg5GuC8rEGKgoFztLykb7dYaA0ZPOJqTEkAAm9fQhAIrmjTSH08wAkIQFIzME2JBVFpmgz\"\n  b += \"woRoeynkmocpL2z/hd+tzayBlrbWbk3x0l50MF5QgOZ/lfRit9cJsdex+6QfDb4fP7cG2C5QzBx\"\n  b += \"S8mw3ChP20u5mcvvjN0L2FL/Yz6BnzY5zjyQbH8CO5r8ei7bEVvSmYBz7HQEZaOhWoSF7NS+Dle\"\n  b += \"1amP9hKJqXTLY50MFgyOGAhm3OsyH76h+r/MVI+Qsp/451yh/K3s94YK8PxVL6CV/6qeHSt10+I\"\n  b += \"5s0Sqp3gjWN7iNukxbdGE0LZnUGPTGQ4AR2eBowxPVNmsdiM4rFVm3SNOraNmlhbZOmYt6/i53Z\"\n  b += \"TKGnTsqh838T1wab8GBl1aHcvvemYAa7tCLpBuXTwrBpB3v++2mXe7JbZZaAxKHDRd2GzIgaYxr\"\n  b += \"bvhtDjhtRdITlcx9Rpd64+DWHqHbgD+rwdCNtqExgpnzq/OM+lkJ7zLliMYdDhMikoQDHuAATFR\"\n  b += \"R1qNstgnHSodVECOWrWAz2qYpjugmvlHDqiPIL/4ZHohPn/JFILYTxTtuzQLt67hx1SQ/7NFFJP\"\n  b += \"6JATt4T+wGBBHlQ/ldKgYqGvIWTtzburcFU+YvnHxcBwsSgfBLXL374cZEfXFNjU6qVvzfpB7GY\"\n  b += \"M7KB+dpvJUrCJfvwQNHsAkH2kyQYdC4DVfhF0GgYbPCvms+BblDLJ/+kCBn6wf4Cmpn9h2XQBvn\"\n  b += \"tbVqz2uH3H5xcOFX3QuFWy38DsOCX4DhKaeBlkUzF5RkG2Yj8Fw1nTQnLf7ZBbRUW8Bx/xvP/jH\"\n  b += \"VugdLdGMe3IBC7jnnB68AJzgVhSxLTutsFFfGNwcSu6E3l5Q/bafVXk16jfE6voBYTOoLR1JegP\"\n  b += \"wMLgxTwRVCbG5XtxsJ9JGl215LE5XlxKgWng08c3xhdCXdFZyLfCqjkSkpfYRqM+nS7NdnlerIY\"\n  b += \"EJWPwGqkcUt43v7iM2CyF4aSVcV1vBcs1wfQmmel9cMqKnPlPtlAG3fgW87+khzmQ023W19R3lz\"\n  b += \"lqR3p0kANeAnd8HQy4BMuLeao0yjZwykhQXQetaP4fMpqRGcQu/Jh6M5PptQ+oEhfBgTxBZpbfT\"\n  b += \"cOY5nSThrdpq2zgK4NOGpWAY7GCjhqT+u/GxLHERbPqyBHG9cOOdqoIEdjWgVcDXK0sTbkaFz+8\"\n  b += \"PeKOBr7VU3hOf/Qa2GxtvktHkEvp3CeiBXj01b/cdZbdOz4zOxnvS6eKCuG2SKGIfHaeKKapsIT\"\n  b += \"5Sirv6sjTZ1xmwRd709iYkax/EIag0SCO+sMjIuS52cSvbBLaSj63mot97nvkNwL9/Jp3zRM9H+\"\n  b += \"xt3dKoukhoE7ZrcPzdRVQ55/URW6i8yffJEwQdGF1gKbTsrhiMcbiKnQUpBS1nfxyIWyakWlzR5\"\n  b += \"eWjIHoDGgicTxS01xsxrilYI/lIr8lsiJWOHJI7BTeCXCghge4OZvGSoRuX2NRMbqoGA62/G9iq\"\n  b += \"QOKr8W+nbwWNtXLV5Xe48ImKHBGgRdlAfiQD9iolw/y/zvk3hEIFbqZNG0RESdaa1i58BQTwsgv\"\n  b += \"8bV/nSBL4vGX7+8m7fKUXSDLS/bY+uFq5aX17rgdWQI8C+YOm1xLkP+1bHIEcjaQTUqsIradt4S\"\n  b += \"79ZDOFXmPW5GB4Sor8nG3Irt9wReqNf8as3j63OMeBUV2CVBRmmvqjTaZKexE95XY2H0ozp1PNr\"\n  b += \"wphS1IQ7ASsfEIlN7eTqTgrOeBTc5ZpNaK8s817AKubO8yEoVQ3QFrxs7KoJ8c6IajhOqRJ1SPY\"\n  b += \"LrzzlANJCi4iw7Y7iOdu3HM0WH+kXQDrWwwLvk5Z9hjhPmpBvZQjoM+vF1vCJxD/nPPsI4lXfMT\"\n  b += \"evSiqkA34gu5E2Qgr4iWqUnAFhyCTt5uyqQVXI1DX+PQnc/XoJCP6hTyoatHqBTyISnk0SPPpvV\"\n  b += \"i1dqBOk9piTZtul7LzVf0QB82L+WL9k0o15x7J0SzBRBMCKmKQMxMtBTghwbFTZunZ5rEhfih54\"\n  b += \"T8oGTyyvxvTdtOVCd8q7Kljq9uVVv29vvjMBKT5ZOps1vKalbYtHG6UQPB4AV43/LiYx6CLgJYU\"\n  b += \"hWgtrSSjqba3CXIlVjI2ww5Kd4YvVGmOHtQuTVY0tnkZKTg3P24KsOVaFAM34r91ZCdO2lbYGxn\"\n  b += \"YyelAAKwkU+W0xW8NI3EHrydTnc0BycEYaoPyF3jHipBHxwQ9rXxepGZnqTYwh5TQwJG6+tODr0\"\n  b += \"ORePr9DX80vyDPOy51/o3UsiJd0lBEpbgdfV32jLcU4T3K/VDlR/vruDOZ1u1hhRoOR7UGohG/h\"\n  b += \"eSCtddO3QJ2mhMOkvyAu6vHomF4GkpFhgmoRGMfCPOHNAZR45mZhWLYOixk8giaIpwKKmwCDqYE\"\n  b += \"QN+gBrUSFqnDSZ5wGomQaNEC0bF7j74jCPtFPIAYezyGBdGeRY0nWDjKw3Ds8Y/rhgaoUPH9nGE\"\n  b += \"2McfM4z1YRzPguAPZrUkeG0mOBpGwTjmh5iRif9vV258Y4Tjxzs9Ln/kWfy0BM+q5jdyHHk+WEP\"\n  b += \"SOoC/rXwgjwjDZOTqJZQHxtEaxFLi9e/CqlkCeo4QE4k4d38ZmWhO9+Iyj2D7mf916rZAU+DyEh\"\n  b += \"+jvhiXygEiOVLYAXkvPviJCgYHUOt2JfP30wNuGd29EM5GMKFcMAJw6pOKxXztWQHxrD0snN1v4\"\n  b += \"vqqUPSfExIsllinMOHBEiYsW8qBQPfjHETTYUi18v+SKmqT5PJVMla9sceHfrJHs8J7iZYbA/nt\"\n  b += \"ECqLkxhWFHvzANUjd06iXSe5DOGLhE6PhkPUOO6uDIly0Tf4e86z03rfiZIaodl2Jwez7RrmP40\"\n  b += \"P0c4d5I2Xkn7Qrlv76vm8EIy8aL5mwsSSLLiAtmBS2U7/A38Em3G2DLkYOOZLXrCUq2BJkTXEoB\"\n  b += \"viA26aOoWImDgz5C8k60qRkkqKdOmTS5UUaWKVFCnZFeVeioQkz39J0+dMf01SpEJW2h3rSpF2S\"\n  b += \"rrp1VKk577Ik+Yjy0vrS5FOfImnqE8tL60pRZpWKdL0kBRpnHLFqu12lr/5JTVDmR6Uz+D64WVn\"\n  b += \"hWKkagab7I5NK/WZlkxfSMTPeFiApJEi+JleV4A07QRIxToCpKvmIwKk6Zog6qlYft/F3RJFlk+\"\n  b += \"tf7yKdXiNHq+E5c/QqNrty/vJrcHUtRy0cnfQyocOWuPf20ELKha0Ni2gVdr7QuJPVih5/WRVL7\"\n  b += \"GesqoDxZSs99lAQEnrJ6zEn7A+Fkouma+37W973rKP60krrk5aMU9aBieteOSkZaqT1qO/t8ST1\"\n  b += \"olqdMox65vi9e2OWTyU2qupfD78Xk5aOmp5TOKoPft7Omrdt/Nc7c3XlsWLy0ujJy0cpuQA/ULi\"\n  b += \"D1Nvi02DVmYtMYdMHsBJtE6SxsOBKKPgp0ZlDky4eaM0hrbl76QjdgP6A9h3xzbEjgL6ugUijTk\"\n  b += \"6oOj76IBqKj41JwZqCbe9MZVINltBfyb28xkOCwjEZIIivYN9Ui0teVCwryNF1/bZfrZfmJzd6Q\"\n  b += \"fUClKQEFbvRQOFVr1jKkuQfarxQF9sMmzKhDa8kkoOcNRuweWvpFSVHJCR1L+we6+jzvfw2ADPN\"\n  b += \"1hAWMUfETsSu1kVA+eISWm2CR2c+JYH4ldYikUGxnJ2RL0wpA4Rztnvf0Jt5+L6nb2uxzWG7sKh\"\n  b += \"lHNDd39lr8obJACD6oeMcRtbzis8p9l1S9Zf2Q1vawvgHnQnkV3lomG/TjEutR23ZHrQD5PJ7V4\"\n  b += \"c0+n/T/WDKCNCFXVP6hW+4fxfh/30XJ+Eb2UMrwcxFhLueuclu/eQ0h/sdZtol25kHy05l8ufqp\"\n  b += \"DBRbmCSg1DpwfEBzcl5jLgg0cEfEglB9mtF4qDoAgC6dF+SuiAlMAOjSJ10AGplsL7U3CMK4QAt\"\n  b += \"YjeOLktvqrJcCvowaw6kolD68C1GYdP7WgUVUcjHInoKRtDVV4cpryE1/Nzh9sCgKvkOjgr3xrA\"\n  b += \"XDbdt3thj503cTW98GPBfl5lC7cFZfnRT1B0gxKUK7i+8lsquvkNzBhiCwBy9TlVjFHvHahYLqB\"\n  b += \"Z0pBeflubNIEibIAclfa8MX2VMDEkZQM0AwmU4lk0qv2Nh9TwQmUB5TVEpDW2DDtddyhZicXH4P\"\n  b += \"GAs5o9hqVERYWk9+GH7OhfCuocGzCe2Qt7oKXgTjexTPUirQ4oDjg34snBTtumn4WetM17WRSZS\"\n  b += \"wNTvC0ojMEzJ62GdGKkHhBtOIcfJLf3zzbu7IKFBBNj62A3ouFARMMBytptFJx3oEsVPoiwTO/C\"\n  b += \"rEbHmtC+mMYFkRgXUOOvAPcNwVABGWLZ+ilbxdZ9h8qZw4L0p+Ozo3WxFS2JtGev84P8jpLyxEN\"\n  b += \"KHSitoRqBWuNFGH2w9+iL/bv3qEmo3W//EsR1MGeKnT2cnRqWDKd8gw1vINtMu2Z93Gk3KVSS4L\"\n  b += \"AWLEj7PHTpZ50PucjLl3SmDnwIcUzlZ47DfY3uPKQr4mMhVepvm5+fPzP/p3ZHf4HUgPb8eEZ88\"\n  b += \"Wyr09+SMrNZuz7OyX4D7Ix2k7dNi8Vv+D6ZV+gsRCUK5Om/JIgoNPMSvyc4ZCpvgNqTO5SdDMqJ\"\n  b += \"kVztdHnXP0C+be7bRyqm89NoBeLai2L/olhfFK/1IlGUeYkaZWSyloVqNcqdUKcthAB2aJzSqaR\"\n  b += \"aeYIh2vVgmGMyUpkbAWR45UirVKCzUgdmkFvBZG2IxA3gnplCpKYSpLS5PPjXSHQpOlCuAeHibU\"\n  b += \"rQfKSsuV7gt+RQI2KJruUrsBhk4lWZn5PEDJVw6LYhspG0Sl8Vr8JdpQxHcS98KpHvpAJlGg0LY\"\n  b += \"6IawSXFMYbmvXK/RjESKYbHOHU1d0XhnZBUxvWW0bYDbwKlItJWmnUiySrQ0qiOYer2F++I7X6E\"\n  b += \"EtkfKEQy+2b8yt36YVeLuZa/f7+n/+n8/ceuhyJoD5kQBypXDNUEWPCz6/cXRu5XRu7xefI8jPv\"\n  b += \"243UTnQALR3lZ9REGDuK4gSo04dU+IxNMjmX8iqSDtB+XpXq4JfDuTc7t7zrEVjqtrlLQ8jSefz\"\n  b += \"lu578Z9k3pYE1xLLi9H06KCyFmttq6TpdVCCL6dnGLeRyxaxs9QcEUF+JaF2un5or35r+fgj6Yk\"\n  b += \"o2Y7MdlggMdhcNeCRJN8vRAZnk5WhtRcvl6RUKeaONwtA3X06ThkKuaNB6c1qaID1BzehaKo5rd\"\n  b += \"xel7YJrzqa88Ljdo7w640C8/TgUMj7uY8/PfU3wQLu3Y82fl8n9+XFzcskH5Iq5feMapEhf+2N5\"\n  b += \"uKc/Yn/xDaXD1Fy7/8cgLy0t4dpl6yWdtZtvK05c1sw9HgqUww62qOFEK79hVDbphw1k36A7VoB\"\n  b += \"vLKSzdyxmhvQrnipppMnmkg5I+bF+jD1tJTU45I/abmHFfU+jhlmwBcyjK0Vl9d3SknJh9gJszx\"\n  b += \"h5bM9Zo7FuB+K+xoY9FCSMcFUJi9Nuh/Bq+nuA7/9+9WDQTmB1yEugJsXd8pCxmD/tDSSKirV+g\"\n  b += \"Rlc5uVfM7H61K/5feIifN7N6v2tDO5wricodyM5LCL1twKtmKTUQIoY5CmjCw/iYeGnkEtoZ/Ib\"\n  b += \"Sk6aMDtvdxWftuJdccfycG1CkMQuLwnCbE4wGYoHHn0x+OvKTy8+4/EzIz5T8FPKzQ36m5Wen/M\"\n  b += \"zIz83ys1t+9sjPXvl5tfzcIT+vkZ+75ece+Xm9/LxBfu6Vn5+UnzfKz33y8yb5OSI/D8rPUfmZN\"\n  b += \"/J7XH8X9PeE/p7U31P6e1p/H9bfM/p7Vn/P6+8j+ntBfx/V38f091O2uxJHtweZinQOrVLsf+9Q\"\n  b += \"jduVyFnJXVaVmR4HYhrD7IpWaGArTqS2Q08LDJiwWuR/aWAWdDEE0iGuTutEl5RPhoLGAKVNqAi\"\n  b += \"JCXwhxbsiwYl5msY2SfkpCTVkUT0LR4vylKGGV6T6Fzr9Jg17bF3aBDkwrzQrnVvCSyhb85bwKf\"\n  b += \"yKpe0yjLZQvLbze41Z5pjcE5lGQnP1gsHsgxKDeddePhn2+LsUinHOY2GPRmlnDCz0psNPhWQ+0\"\n  b += \"cJtcyVTv+QO3qExAaS17JhHsImWQX4eu1a5PGvc9p1e2Q2/p89UaK3GAD6fIr7RDohd7isJ3PvO\"\n  b += \"OtohWu371MlaqZMqNc6PVyLdD3IYnGm4YbCQrDkM5olwI+cROwyAkZYAko7D4HkOg8uxGwbnQzc\"\n  b += \"Mnon9MFiJ/TC4FPthcCH0w+DpuDYMHgU5W3k2rA2DlYk1hsHJrbeEL8QyDJ6P/TC4AkMqFK/tjl\"\n  b += \"AxyxzDF4vDAJEYBn/DYXA+9MPgmViGwYpa5F2KZRhcCGUYPB3rMDgbumGAktWHgcawQ5awOnwq9\"\n  b += \"MMA7sA6DB4N/TCAuvylh8FSKMPgkXD1MHg0HB0GTJ2slTqpUmMYnCElx59GQlQKvzrRrZGaIf94\"\n  b += \"rJf8K7fOuU5uVRv8aVNPiO1Tvk2Y32UX6hyX5oSjSr3Z5L56LNDHjpNTuMfd4XzK1WQhHbid2Yl\"\n  b += \"UMY8NrAec69YpuYSg8HQ6cD5cD6c6vGxZ5BLyqLNyCcqd83KJNfX/Ze/to+yo6rTR2ruqzjnJOZ\"\n  b += \"0UTnQawgzVZ3HvNHPh2nNf3oSr3plULwkyoDCzXO/iXXf+cN171zuuE++8k5BhfO9A0kiEqKgRo\"\n  b += \"jQQtAU0cSTYaNSoUbshQhijNhokKGqAqFFBo6ITR5zc/Ty/395V5/TpfBH8WiPL9Dn71MeuXVV7\"\n  b += \"/z6e3/PcJR+h+zcpH1HetU0+QvFvu3xEndcO+Ygk35R8RMHXTvkI5b9d8hGVX7vlI7KDM/IRJWB\"\n  b += \"75OOLUBsuH1EL9ljNy1+zYO0P8xflL8wX5X+QvyA/Jc/yhfmCfABkGmD+RZYfLEgkiQ5W1JHqgV\"\n  b += \"G8+xAizHZNCV0t6isRmhW71RZnXTJg1OguBdnt6mLDU9MRifSoXrWaRDdJkHoEy1p9DQO4f85gC\"\n  b += \"X7KaxA2QgDrSmfyMJS6uc3UnZXEQSUdEId0QEBEkgRrZVfP4p6eRV58SgxWnBQh5tCn0bF7H3nx\"\n  b += \"cXYrnasvGftS7HMDUdjs/2ZWUpoOoCmRJmc9se0Q2urSplZWsfFp17ZA26y07UbbYte2sJJY+Ny\"\n  b += \"sNMORfvuA4iFyX9O4OwoFHglltbocKs0ho9BFxVKjVzn3aff0FAz8A9MBtCybwDqKRUREK8wSAo\"\n  b += \"KES6rBQS3G3V5MHxY7sP8XmRXWXYAjhHf0KpzL7RhzNr9U+YSMGF5Wy6cFcNbPbSScyydxhXMgY\"\n  b += \"xmPUTz3KwZMU7HY1OtQYit4tKyfG7MvNVEr9VjO7MtWCofwe7H+XiYDJ+/1V+/mImwel0k+PqZn\"\n  b += \"2dZSzsrFzVMcr/XTZVpd4HKVwTiEH3cr2wgm2pNzq57ZSF9swzunT+BWTbmdpXf73affjVu1t3q\"\n  b += \"rJt9JhOzecPVHvVVTN3K8JjdO996qcjAmcLjqrXo2lrrMmbSsYuqHHyuRYxpTTTzOqR+C7P0e46\"\n  b += \"WQrT5oMkV/IeJTVxxVWoLFJOjKEGZdw622G2k2VoUwytcauzQHGIz9oI6aorCQY630mnzEXdiwo\"\n  b += \"UjWdm1TTiCFiQkyzHiJpUgQabFkHDVsy6POOhba/LFS0ZSqHsarNKUiXlWTlh60Grh6Jc6rPZaW\"\n  b += \"eb4rRKPFHsg2lZS4O/loVM7pqVjC52Nmhae4EGpQDz3hE3+6sjpnTyaaQ1CuthYxRKTBL7aPT0V\"\n  b += \"Bc3eGeMPJatMuqp1tqTZN+C/LlNMd6e7sw3XJWora1f8gZwRY8cNuVDKuha/nMYxd5XhftjTOya\"\n  b += \"rjXlgVUWUtCqNwKNlNwPdDhBD1EvP4wsXZ03EALQkmwCpsjDx5ucDvagECl3VCj/j2NkJ/BpFvk\"\n  b += \"Lx/nkjaOpa09aFIeI3oakQ+JwtgnW84EIlb4hvULXmNT/9iRL4o6WFWqoTkCCo3aSr4TNgztypC\"\n  b += \"K5IAyAnc7Sf+427/5u/2l074bn89tq1ePYwZASpykGt6M7uGuqGq1/OqAz5f+tpu+sbRSMhRBkl\"\n  b += \"l1gLCU+iWweLCMQZXICGeB2v+/s4QzukpOV/eJn5iWTu5QJbFVwylfDKQq3Tz4nYeIztfyLMX8f\"\n  b += \"Y2eDpSJCSkWMNDCcXyV7JgjMDvphIn4uTtuESxzuNd1C+ixR4eoljZ41SMJvsjYfSWLr9eKhxjA\"\n  b += \"PHzliQ78WA4XwlPgfOT5uNP5iPi/kEijjKTT+6aFsondwkLVAgbl5F3vDesmL5QqEzBiIXNYh3k\"\n  b += \"r/6NC3Y+UGx8p1JefTP2zOj7Io+gyTtD83nD6LyMdIYavNFD8wgIqQs4tSF/5o323skCtr0gWwY\"\n  b += \"lSaza0+ROp/Qs/g+mTs+dnlep0032y9g5mAmK9/pygVcE76MwSojQgy24ipRtVPG486olm1FgCD\"\n  b += \"8cXSOPJwA5+Xzt+CJ5nzN9WnoExKqaInXtvjyqglcVenA+q7knB79YuMFfIdTgL5fjLzupxOD75\"\n  b += \"E4jW1Dsu1Hv7z1qQetULe9aAH/bMGnLCyde3XkdPvZ5QvB35dm3QqySld+HO/3egFznnFsTjxng\"\n  b += \"i63M6oRu2wp0O7zyOqg/7nnVZeBiGTgjA+eR2zGR24hYIv1L5HYsyG2kq9qSR+p6SqpKLpHMj93\"\n  b += \"IbduF3NY3GJdzhhL0Y1QModuxh27LBj3QbU523Wc6GHVBt20J7i7n2/tjZW2KPV6f6XP8LhrFCy\"\n  b += \"rZ+yALTBndBVX1YShwa5vg4AVSABO4XlEqln/rKpY7brsA5Qhl227MeQwZ+i5YOiuNBL1eIvsNx\"\n  b += \"XJfK0thjPrQ+KDxQsoqeOsFlEe8ijIbgxqy0PTIP/5X8Rn8gWJenwgLiyjyld4FYIZ/MsgJH1l8\"\n  b += \"WLwEoAxs5YilZu9B/mq8am8YuVKIeaTD6JKKRTNY/HMJHalcugcnkk9yKFZ0IkDSCkJSgOI+Zk2\"\n  b += \"4+L9Gi18AzdMnbDY6UfCL/X+WspB9ZclWO1Ke7EhH3O0risSkbg3lWIL7EyJVbqulWLJtKMWKu0\"\n  b += \"qxfIERdUrLA3dVXQ3YcMRwsLmrrAglJHV1XMESxt1YwqkqlnCDCWDCm0xAE77TBDjhO0zx2Y8pn\"\n  b += \"tCdvngKX7Zs97Wgz+Eg2/1Bvh3bOJRewDxea5fFR2CRMXFda94xx2H+GCx5+ThhZ5Oy5hSk4aax\"\n  b += \"EjMaVyB9Yy9cjE8gHEWpg1s3fUX9VFdF/ayjc4rF0U04ejT30RM9uvVHn/x8pYoik4m51arryUz\"\n  b += \"XyUy4lDstykp4shSf5vGiANVLAxPARHlkHpuBGYkzCs5CCPaE/g9YCvcn+5Q7HErNIQh2xB5sNB\"\n  b += \"6tjxytInDZpeWLhUNJf+RPTdIPGaGA1lAnM8XPw22+5zhvs/JEjgeeyCPe5nuO8zbr0dd/cPoEb\"\n  b += \"vP7jnSb9ciH/nn6+G/zp3Gbtx7DbX7bybnNh8NtBiy3i8pibaH1M1YAAHl0lk2WsvxIeIZoa6HM\"\n  b += \"5Js1oWmNBaOct21Beq4IMHKGDk+LCVoWVMD5SPdbojfaQtZnsaEEFUGZzFTcD6TySPI+WRME/bK\"\n  b += \"S5l38uoOgNjIyNq4r/26kZMZq3bJbia5+AHgHdwZ8kpCgwTw4mIPEbPL2e4k3T0bX/pV7KvA1T0\"\n  b += \"bNlTSmLx2Q/QnmKfKiAd6NCBHPSG5KJKoDkTizbg8An6KSKMOw9iPHBC69P8ueznbs4Cujii2Pu\"\n  b += \"QfmxVJMNQnUzt7H/Ixd1fg+rwTpEIV1NjJLRAVVbwZQQcVDX3dHWVqsf0zxOcUzj5I8aPwxL22B\"\n  b += \"iwGbxK7qey72GFWaHjO+xinXMO6wPROrLqo4pVwpGUo8a2gq1UmAKL4xBk9+jtAxvaKkEhIuqBk\"\n  b += \"kEwDOk/2ANWZlMRTqlcBWKpxqSQ/BQ/aTZCB08A7WDfnOuSuXp106KhCSbnhsyzZ9qSUvbq3qmE\"\n  b += \"h2msWWNTU7WAyZLbWhSHHQp1RjiQhLIizvNNt0CrJ2balIm1RYZwd92F2pozOOQabGM2MQCcPxm\"\n  b += \"Kv6laphjFp+jLQ+01bqL30kQ5m25rqT3zjRO3ntr+lO3vkc7uQ3fh/v5H3eRUqrQoPiZWZVV/Jr\"\n  b += \"uAeHFGMcCKdEfS6mOxeaRLEOUQTf5G5I5CapfXEgoUoDCVVNIlr1vHdrkNXPxOK3gF6qHhiovHe\"\n  b += \"MLQ7YcguWCbCDe+MuidGZeGk8HnsPaNzzT1lQQlW3O2B1O670up0FruFOOlNLQDzFGgZuNRNVDl\"\n  b += \"d2JRQi7BP+KVts4mUcKNUB9UcRg+PKK13bV3JPWTx/rFrYZvU0SiwlK2qGHuxjzuDmULwlvNgKC\"\n  b += \"6zWVEX9Cqqgtryzu54KL2pXMVXcU0xF2R5k1yp1VL5qKU+vbKdXCWtT/dVbgRHwdVSpr6PS0BMr\"\n  b += \"DBMfehIVCNZQseuJ+DazS8PcXHHUywBLsF6DjyXzGqICbheuIWJBWHoyrgPvnlQH50nXdShx9Bu\"\n  b += \"BVhVqz7xxWbIMb6X7dJX/4nk/nT9krnWt7t9X49tVee2yVedLSciFA0a0ARuXOUcRznHjqja2+C\"\n  b += \"8kEcfvQoTj1nCSq4r89jwM2DzEYOe5b/M7Ihw0MIQ/cPz+9+UDEsOkj48W0xGw6LwVBZzySwYMY\"\n  b += \"7jFiDvM2g6Qr+jx2uLPWAeNHN2fwVgZQSB/uUdu8qtsXYw0hyD2na0uxsaSTpH9QxvUXe5r9g8X\"\n  b += \"o+evBI1eM58nlUtAfVIL6aIBK5W1trjzao88wLdtXd92hm+R58bx5N15OYsnLzVR85Bl+QHqkG1\"\n  b += \"xxhVYTlaLOAu+rtqq+rbaemaldTi05pXWM0Pr6ZXWPLQOVlpPD62LKq2DoTWrtC4Kra1KaxZaG5\"\n  b += \"XWVmhNKq2N0IqFwbdyYVvNj9FVXsjuefhLAeDCrsTpVq4q7OXNLytce0MsCwwDakNJhaomFpaVO\"\n  b += \"E86+lZVWFaYsyZBrdQOk2UFqNLqplLtNG58VRiDzZCjLcvCWL7qNWpvTQmfP2hEPpdfI19W0/ZB\"\n  b += \"nUoKPRLeGOFtOMCozEqsF2D3GTC+EvVgVKlRmzEdVdOutFC5dtJ21bdNCr+7CZKs3acuj1TVyBW\"\n  b += \"5Vtm7q9tyiT3dBpqI4ZVSyU/DZ6rjVymfI5JB8O0bGZkpDm0vxRM2xArt9mCSHhUGYXWGkx6zFD\"\n  b += \"LyfNACnCOaImFCk+ykcM3OiegnIb72PTgnaTZZW0rzzQ3eD9GCG/cMvIndplj3DaCbJD1y/TfYl\"\n  b += \"r07GRJiVn86yf2ZYuIbREzheIOyy+3f0ONtkX0xZb8kqpfnqXfCqRYVRn2wWHSKtn1nOhqOoiWR\"\n  b += \"zCzFXe47bBZ+v7P8Ykc3OqdsyqK2gRxWjbLbbrftlW7LGms0p9bCX5MtlxuWKBYRVzL9xDSkdHV\"\n  b += \"keHqhCamOkbu+XU/w2KfJeXWDHdg5lQ32hg3wRHHkTDPchuD6b+I4ZT9O/bM9qONyg82+Hg+pkI\"\n  b += \"a4mxwo+Hd3qi2ZrWjX+Fisza1KWmLqojuuObX1196LPmPuCipvBd4vSRt7mUgsalDjabhDJd7RT\"\n  b += \"5HlCY6+W6G5ms1fDlc/kYr+lK5+gk1xeTWMwnxG5p2rX5O8eQ1Ou5rxQm4gzE+YJy5h8j2RA1+A\"\n  b += \"rg015AmTPBvXxiYLcll30wATtoigDSXCV5dKWiiPL5BF/CIlkmrXpdj4L0l+AmCVm4Ouv1aLc6l\"\n  b += \"LlYcxcespyoBNd/tAfFpe9yXLiSfBY+dE0RFMzjUW6i7kObhabtJzsNLfrCnoXgwWf+LuttZ0k+\"\n  b += \"QbxGzuHhTWs/BVKSOi4h87C85IjXu747n+l9hm8RMkdFzHf4i/hEc9FgFhBQ2+wqz628JeUdQv3\"\n  b += \"0rO65lonbPX9hrYD1G2AiXnKGzxO87eujlUK2LdBFOMuwdIUw8l7iRDuFXo+JoKio0xwzSyzdBW\"\n  b += \"41KF2L77LY2tiWpps/gZ3rYaE5pvf801PN3IulatWfxy9g/5OoTfRopHYC/VNiPit7o4feUVxcK\"\n  b += \"VbpTmX7g4h/nas1O2Dg9ucpprXnslf1l4jfuMn/7+mnUYsF91nUneB3f7ZH7z9ytwuyNF2XWCqT\"\n  b += \"A6srUoHp5e8rc3m9+MhRgCMmLi8MVLOE8ZAabNeEXy8VhCc5iYZmJ5UdzHPbE633shQ47qt+LQe\"\n  b += \"6aiYmzCuXPXJk1SJXj6PeGFD+CJ2GuCScK0JQwduRSrtfzJ3euUfSOWc0lM0Z+++8AYEQRCTVcH\"\n  b += \"+p6/9AhRzsJrnTDVi31XfCyXao98qULHkD1ek2ueNP6iQzG1nC8L0mgWEl5YjUy5bLnzTZil8Vh\"\n  b += \"dKqrlQP4QXqHdHXQq9mu8Ykwo8NW80SPqA8KEIuWp9zAZ12T6E2pattKs6lpnKzuTyGqdKSTpuc\"\n  b += \"hqnS6yWoMiq7VIZLUykdVqDSkfU0tUpU0ICZ89tIAsV0MLKTk5REXwfOgUkRB/gQgN/YGgBRZJb\"\n  b += \"PyFgm56kVSo/2Hpy0FZC7lyAmVCBbqHhoQGZoR3VRr4AArbtHcMLAinPX5nRGIwzPxf7ubMU6lT\"\n  b += \"BSWqZv4iKldBm2pevohaVlCrqucvoLoV9KvSPKM6DRSt4nzB5b3Y94+oEQxIp1S74PzZBwBNALn\"\n  b += \"iw+SBNkrdbT3AgqJ3CQFNoWnGCGtcu1aFYTSWxruMcP7yiO7fXe5RfDTWr8pCvivttDUTwINNpQ\"\n  b += \"i8lAffniLX3XvkyVQOFw49mVYOzZ9CzZN7ip7C5tvLzbXcMsmuN+E4w+Ue5UFkt+xJUz1dtrWWl\"\n  b += \"10uO9u3m5II9Xujm3speRHO5+7Ldp5uypQimW737WapnYxd5x/HMAkS827Rscz+mxRfs0QEpdL/\"\n  b += \"rfy3f+vRfzuWf5/r/r89//56rqS5263jvei6RDJhyvnEl+76WBWoCw9pcTNNGfrVKT9jaLlQTGC\"\n  b += \"x/r1zLy6C6hmKFeDiTsD5rXL4M2cdflgOb47l8MTUMAR+Xnn48yqHf9mswy+Tw9tjObzMkoyGMZ\"\n  b += \"7JAZK18NKwFL5aD3yZLIRx94H7LvpRWfAtGUdOwklJxyifPCaoxO4QZ9d885zrWL9FrBSH/I/l6\"\n  b += \"+QvX+uQ7km63yzQFGafMYpYNVUsmKCo4tBjj6wlMdSuqBJx93ixS5UHUygO+R4Rrpd6RK8EZmsB\"\n  b += \"YCj0XSFuf2m7QZF3edBiaqy4UdANGoIkHfb40XW2cjId/V29cLLQdR3883qQbRWkW+QptCmDbIt\"\n  b += \"zq8acPdudvRh3L0pxZvYkNYXZCSoH976MQpjf1V6+EffEpkkjIioFgPE0abmECDGSqev0bH3iuU\"\n  b += \"hTlJwbFQNewrq7kQ6rFc/uyOswLK/DmfLG5ACnivftenNO1Dhf9OpH2srAqMxDOV+zMy+hJlByy\"\n  b += \"YAb5sBkhTfqnOhlQ1q58wrmpiH+qdq08wSkyqgQI0LZJ2KqS+GUiFk1mv7sVGR4Myt6GJg4lw9W\"\n  b += \"nmZvNSoefL7Qjp09hypDPXs6bcoF9N+gxg1iyhVld4FmfrmUJYn3jPc4EhzCKySJfnEx8XF3Nxt\"\n  b += \"yMcWOj7ov+z4WhHFhyX1MMaM3xbYuSxJuWkNU1pC3tH81EJGJZ1iIkYD+zA4x/4ClYSDypdACoV\"\n  b += \"a125i5EQZGUimC8rB7w5emXV/iZTyTKtY06yIaVk6ngDVVmHbZifqQ1Y78ldKeIilD3kPlsNUqV\"\n  b += \"yqNuedI8PoMpycXAX4nr8AQSYxXhP67jruHPvsjxmOEYrMm3XIPDAHcspq61u7Ozw/dnidvdFMa\"\n  b += \"ciGXVBAzT5bXO2leb+pSKDN5KCpv5g25sc23aajq4HEwOee0SM3rQBN5cE0wYOPigBHsaIWfeR+\"\n  b += \"hoV0MzXuNYPlncTTPkL3Jk6UflaXZ9QBYXwkMiHJNTBqvwiheX7g2mLu5nJujux7Wu8H8HYfsos\"\n  b += \"VUqcgTZWR2l6dXBKwuzrzLVMH5pf473vNS+52Q1Emjl5H7q7jDasod526brM7AnUgKEucbZe+tN\"\n  b += \"QVE6+7HD6zcD+A7ZW5jWVv20UQ/+jq3Uj96Qdcvzkv+tymWNFIzmshVVj2IZ/t/ahVdxx0RIcZC\"\n  b += \"HkeljkmgUBoKoN3RaiJGalShVBoTabSrKL2RrGrbyo9WFUrxU6PvT0IzkxAGjvCkpjSELPRY2Gu\"\n  b += \"iHvaaWNlrgOOvkVNT1UiJ4xRB0phqzCWZDWWUrwaSHa8FxTGyFy1sFlnRyH7mFoWLnNUon4eQm3\"\n  b += \"R2+/111syjaUWxSP9m+vfQ4X/qFP+4Etwxbki12V3OCpHrBnZ8RR69ktNZxpC23+af3M28aDE/t\"\n  b += \"2PfCuLV7EVK4ZQ9UCfrqGGmOLdCICOKLBaIejC9rsRW1ncZid+PoqyANPw2j1ag0si9OrBaVvBn\"\n  b += \"SohEWuSf0z1Actx2/IyRJ9kmSDFZ/+ftUjHq9iSF1EfrbX++PO68Uqq0IFoiH2QnClHK5xgHcPv\"\n  b += \"dX8f66o5yWjNPmj+3kkGZDMUEoHhXg+qgGlTjppwFD6lFNVFpGzNiUm0xVZNqg357rdhU6403qv\"\n  b += \"gMh51hqsTVerEKusISbv4Kj9jfFWwmdWoEq/vHSt44PiWsMrY45SURBY3dtWQfSfqEx/JO9lhNT\"\n  b += \"KVuI8v2GFm2x8iylVoCfxy1xLLveJ4JNaGuN/1sqEnOM+t8IMbbUMBykD79mgp9egMPFzAEHnfa\"\n  b += \"aDOQ2mqnF0rdveU/bg61fIWtwLHXT+w0VA+ibbQIc+tawRmabI8AFymFDWPMjb7AAxnVxZ0UoiG\"\n  b += \"DwiapX2FeUywmE8BEglXIlhITwQl22YrsZzEJMXKWYNHYEiEUmFZX06xbJtggnu7lS+xIcdM1yq\"\n  b += \"o+0in24PPOt3gTBkiVYuO1asMQDSgF45Ue2JcvjUdILArLoEGHgS99hJce8JQ3KzXW+pr07PGaN\"\n  b += \"6uaz1q5CwejQE4sFqUVRJh7tHP+c+Hi7HAsRdODstK4ByDz60yjk91mK4Cz5QKvoJUkqBGlTR9Q\"\n  b += \"ZZZ2KuV/YZVm0YfpWqVRficlgH59M1qLFgtjHBbh5Uqm7p6+G1L+gIg7adUty9wS9PVSCao1ykp\"\n  b += \"FUR8LX+AZl8YA7erBrosrkXTNAOfKeolVKkAzL1bVi2dzN0FFEWT0mQEQFK6Y6K1APOduJo2886\"\n  b += \"QyMghTjnSqo2J0VIa9F+K6e5+wsgzL05p9TVJj53pG/WM+oBzD7Xpe9nDaPN6uyM7Zv/gXK8gyn\"\n  b += \"N6OvLSAwnrPzo/A/v9+eU/PPoJCgFuNsw10TQD1YapNQLfDxbPvnQ6aBVtuBzneHQqzfTAW5lwh\"\n  b += \"YhAUc4sHzFR62K4tdqleEsGQ7sTIxqOtuDqn1HGzeZqarCVhUqy1qhlJ5LNO9iEDkeaWs+VqFVn\"\n  b += \"VwL4C3VW3oFOXlpDCRLgJktE3eN3ZGAvk6c4I+GDaBp27avFVBFovlqKSFFu4By3DkaVyuZeGUA\"\n  b += \"CXrlvfTWBu8LTMexsRnjK5qmaksibXZL/J28gTfIqJim3y0Vko2+XTaciVN8NUP/qGO8fGpg5ta\"\n  b += \"uAFoQnf/9bFxekd3rc5MJSyTUsegVg5E6Mmx4oqtJl+uNY7EdYv4m6ae2+ttwqXfLa+8rm7CldS\"\n  b += \"RKAXKMtwt5k26/QmTTvWQtzt5siVuMmclbj1PKlU4oa+NMSTqeShDliZSMoQju0pUNxr+1Yozlh\"\n  b += \"/WFSBwe5XqwFXVef4tUlolddKfn9ug5NvTk7zhbcbzNyVt1Yqb/dv9JW3oNt6ZqOuULeE8jA3pa\"\n  b += \"VnIgVcFygKkL/uTyrK485/RUI/Af8NRQVqmCHuAhQBit5VZnMrNmKNCgEvif7Q/TnXuVFvvJevm\"\n  b += \"vOPzrKDJB51P/whAbquBdJ87g8Cim6Lc6L8JdF57tN8zE0pXNdc9iScPyXrNigDyb4NTqrthoA7\"\n  b += \"IDbciQptwN0TNdjWKTYaIOPZSPEh9Nri87nS5aE6kQ64onvw20fcP3ljMUnHG4t7Lk8f+prIrdv\"\n  b += \"+v3L+lJ6UGAHdIJbbqJ0aqisDCoQW6qBFTbUYoXl7Od15LpM/6lSFIyuqzEBPWBvkmY+uDyzLFV\"\n  b += \"wPVK+yfBJsNBctJpiDnDYNquKxWTLIyleDmSZSlRtUZ0iqFwQxKdvZkbiLkAbNfiEWkkgS0hghW\"\n  b += \"JuLchZsNBg3ICPtJSjn4HznVYMXzimePLWpFE9+Cp+fHS8rNXQlBAjq5ml82nCzUuoUT91EzpnH\"\n  b += \"xn35xW73U3FWcehm3zBxM7fY4RucQdBYWwZ3qxQU6iPPRTkiFT8sbt9FUu8uEoplK9x96OKgAFX\"\n  b += \"EHBQUI+qFlBQUIz5e+z8ETd6ocE7kXZwT4E6YF0wpKwHxOJOng/cTUQ5Ci+BuHzsnxYZU56u0GH\"\n  b += \"5dRzgpMjHX6oGTYl6Vk6LWj5NCYmx86DiwClgM5tjxjP4T/zH6J3P0n7YnxSEcT/gPLoIOYSwO4\"\n  b += \"dQd6hDaY3EI7VwOoSUK8GQ5hGPH6BDuCQ5h7C6teOYYHELx+Cbr8vfj6SzP75vW83/PaCbJiAIC\"\n  b += \"HpaLGFoYUT6UwZ6AQN4TMBjuTtuwdBF1cbFIHryXXj+sIjWGGsIUQcqc3LRFx0dm7pqQfDmzTMI\"\n  b += \"UEOYjlNC1VMgo1qU+TjEiZBSemaJMRvHe2FBmIy9dUo0NW32KR/L6ZiH1ePmF1KHwmg7LfMzyuj\"\n  b += \"rhFNfVs38SXhbdWqyo7ACUE+Bkw8O2Or4fUJM0V4vU/Xpz7IssvYUpoisQDA9GpdtKGCViVK6KV\"\n  b += \"NsKMT5FlY5PGyjNxh5wj8YLi3H3J5uoSS1rMpR6odmmZFpREXv12BSXT2ZVldm8shwHx6wlLzwm\"\n  b += \"gb90K/cK8Qb4XNQZ0+e7W9e9BkyFdU7yRDiZ80QIFxS7gMLbYk0mHXgUwqWE4W15odmyF248QOP\"\n  b += \"mgWocjEiGSwYsCyo1xf4HWFd9/a6Srg8YrbPsoqVWC0tpCTmPp8kae6vLfLEFe55V7HlA9+xzq9\"\n  b += \"5zTLfqPcd6q7bcMo1bNeX+/N7eqvfMfauuv5W10dtunT7eWzVzCy2mZ2/RPd9+HEZsX2NOIiKH0\"\n  b += \"t9vi3X8walgse7E5z2fm+pjse53re7Tgc8pX2excycJLbd9Tt+M4s77+arM3O8bDn2OW2z0DR+1\"\n  b += \"ckM2hPC5kKFUQSESJhpRc6IP1rECiGSGyFZIUmZtovxo2ZXVtt7vPtdkNSUlu/xFHvW0vIyoKN3\"\n  b += \"8yp4vSkFjlJ5F+pYK265eBYBq/5ewHmrlYMR9SQcUzmEE+s0uipTpk5p1yJREhWkQLWoFWewlwv\"\n  b += \"Qp4cCxjHVlqNy6UGG6f7HSbbTqJdECfmtdUezDN4KHi9oV4eeBIhawfLnHQn57wRXFwb57hAOWh\"\n  b += \"0hYBKHGgdRCLKdCvJsbsqfpnzfSXGKMuPelPyjGnmialz0Y8OecYg8KK6AlSfAx6ECLIHGW0oU8\"\n  b += \"D7I1TzMCG9FGk/NAWT3XxC9/yxmkkPnoTITmfmJtXcAyIyvadSpUIL/URpRySGRheYd9+JKnVsF\"\n  b += \"JvBaRfPU0ZeStGppP7kpKhoffBgUDOtQkIyUSRCaERIXsSxLnsWTNU+Bg8KANXaipc0lC2j4dBI\"\n  b += \"fPXB3cZebu4IyZu4PIfx9/B8k1StV164k+ReZZZI+UWuJJWPHu1yZkJs8Ysu7/secQwcR2BTThw\"\n  b += \"dhcPHvrvTRb3aZgLOKTjeAY04rO5KNCn5QhmhXI2ObmIi1Fk+2aGj79Y9G6p7DlPSkXzT++gOHa\"\n  b += \"sU16ihdeMUQAfyo5TPf8vZKnO4Mqb129AX3ayqGUErPuEKH9hVcw2rqcBWrpCnKP35PyHySf6By\"\n  b += \"ySpZ8b8hDxbxJh9AHNy3Da0oukvpfqniJwAlT/4VZSa6IM4pnby7Jnu9Ji+sr3M9nFJv8t7vUUZ\"\n  b += \"2whLLkDZbmzXN/UdE33/11s8wQMBYo3W2hkt91qkHVFSiLOROhzljTFBAMr8hbOXI9IHx1vw3Iz\"\n  b += \"F1381bT/TeQ49N8998Abrl8nef+k08YjUb2WrczoRdJUBzlsxxlqwhxYNlgbXY/oGz+f3Sfvu55\"\n  b += \"4uX0rp96+rqwXVo9vXya4/T8twGyK/dIfq1rrv2PSfYkTrLwIlWSe1/FbY8HxQGWqSfblKrjCxf\"\n  b += \"0S9bbacvUTqv6sO2KFwvM4Yg62aXW9jLxYEvnWshj3PEuQ6k50XWRAO6S3hQxX01BryGe8q9qdV\"\n  b += \"sAI2KJFSQ+eUxzN4/Eooqq3n/ivX8FD/Ky3qweNnOsnrXQu/SXli6920d8+juDT4+JdttbvEsfI\"\n  b += \"+W7znv4b1RW2opr8mVb2tjuNS2sJMFk/NRaxTRDPpqpaKlHRDZUJ4GuR00GquJvkIY8EYEF5p+i\"\n  b += \"Pl5HNsvryOSHi9sN73VcnDf6eR0XN/0pxevwrkWWEwcCz6Ob8yOtSl9U8qz+p9Lz+LItPQ/ve6z\"\n  b += \"teDHTAmksOZB4HO7qur6CcVKfafU6Nt3nbtB97pm+T63cPrdh73/chp7bsPdk34ad75rmbVh/k3\"\n  b += \"p/P1JnYyR4f0vsIl8TOewBkJdIuFay4YvgHWogD5FAc06U00RodDQVjSTd3UoglYjfTf+tT9Ij0\"\n  b += \"qSHesxWAbmL2kCSCyrXp8qi4syQPFOvTnI0RicnBmu7N0Dq/l80n6OH5QVdqPON+K/URqfHh7n1\"\n  b += \"7YluOkdu3F3/OxIvci9TEtNhZ2sqHkxUO94DJ1tS5Hfh89SE5jd+jAHvoX9bizzeQ0bAW7tMcN4\"\n  b += \"fMtLgruxBcwlr8XdxyF3rbkF2tUmgxkTgjLkchBUwxrh5rJsn1Q3dUnY5J99Mtbp2uUFoCmZQDx\"\n  b += \"uvaKdFDrBcPpS06k38YYAmF7Fx4M+KPLcrmBv/14THstQ0ZxzcGZor2okcrJ1eAh89ZS2Gm8Un3\"\n  b += \"Sg8ALcYpZX8psIbR/wxL/beo7/h2yuZLMuLA6Gxu1MJO0XOBVxf81shLqsMMiJeKEumM6CKu74+\"\n  b += \"LWXNGpOJlByPiQn9EVjzQTqog50lpMg4T3PItkp6W2HXjvkJFBtndoqNj05LXDe72ogMsBILVUs\"\n  b += \"jkXXVXrVr55c4aXysAQ2QkPxpqeIm+XLo+z1CY7gETEC3WgXoz1LVnoYnQBMUgkUFwXDR8mgFNw\"\n  b += \"4tzf1LTdrwUqsU0rGvJiv2Pz4dVThIlAfmswq6QZandiaExo1gM4i5qIG2ZJH7Y5lKLiwSPrXik\"\n  b += \"+uQbx4U6euIGWvM1MV7eeRasbPy+Sn3mWx7tdFkqf0b17KJ2erL3KfbDFToau7Tee7GvFZK4kcU\"\n  b += \"FC73oialg+He1DgoSFnLoRM5yx738XY94xw98ac/tG6O0/MTaLYvbfJj1gG0vkZUOMLfNeK/IZ9\"\n  b += \"XI0oxzW6oRc1HbQiXxpI2iJjllyehiJ07d77S6+DRhVcrqsYdhUcQKv565bvuJpYU4C3GNxF5nx\"\n  b += \"pYGwWwjHrAhfDb6mLGno+6fbcQYrZILhzgQgTlcC8PxH24PjHSSgoJd7i4GXQGNdwpj1icRyL0O\"\n  b += \"djFRC8I8PJ2eHCPSqls+J6qh7hXBR6fX7uAj37G/UYrLruzzudeyBmKjd93c+x/Es2Rdfi87/s6\"\n  b += \"3z6iC9yU9WB45FYIhsdzfXYxHV1SAt6ISkdhKuFuQMNlX0vcBGjl0Hn2sBK8NZDBGhGMOqNXZ0V\"\n  b += \"7Dfgx5MUERl4JMwiLI44+NAwqwbI0eOY0PT2qVHTMYrL1hHMOIqXDc54OigfMBkLHRGzheaIlcK\"\n  b += \"5A4aQoVq+F5C0HvGaxcxvYnt1kiKZyRv9b68KiHKvKKutW3DKf0lsa6WQfNvL3cRxzij7gJ+EDV\"\n  b += \"vkTbBGvVGkHEd6JV7K2IE/cX0P3J5Ef3R/dMV4QJ5ERV4+FFiu9INRMIpBLg09FlL1YyepwLGHV\"\n  b += \"WiVT0gxJs7CRIvzNMRztNEUTsof9jzahg8vwd76yLagZd0weMKOlwac6+wfQCsuB3H3UA2XyyBd\"\n  b += \"TCQ9D+iZTHBzkN+exWVmRxrRGI4QrlwlqDsMpfWd9pNsOvyICIG+iGnpxh/Kfm8HM4BaBVe5KHq\"\n  b += \"GPOf/CxeJjIYSSJ6PJ+nYyGv01AyTF1bAOGCQprr+OEBgeCaKaK7L/LvZnfkInX3pM506OeG6cl\"\n  b += \"IrKP+Q9GjNe13fMFM+C50OW/K6vuzCg8ZpczOhstwUuHixSZms7Hh0bW7dhYI3rRL4erQ38496p\"\n  b += \"0exa99Ozhxdec1U7FZ4n11tpwa/r1115FXeqEkC1zQpVUs1RzoHgxsqteaqEF1e24z8XblicK7l\"\n  b += \"yM92EdRuuWkmR+UYuqSB00D2MW3O7tZ347qELbj9lzogg/pZUuxhrF1PfxeRIXWz0djGudjHq20\"\n  b += \"WgyadgLLGqK/NqWiipK4ZhwtMMfL1w1VnJDNO4xKfGq2mgvh5rEejgJHvXUPq6SfcPggmYMHX+J\"\n  b += \"G+dLZDfBW8dCpFGYalI1JYGUQRplitJnxhHV7bnSb1O49VbEa169dYroSGJ1a+yCAbRB4AEanrK\"\n  b += \"RGY2O5vuD2eUuJqcjSedx5NeJWeb587W4NnIkVf3p8KDNhRVuf5iCeB8yfbXBr6sRxv4r/trAye\"\n  b += \"iDZwWfhwSCIQnIgdcxPrX6l8jfykb7CtmbAGByOJb5ASGHreXCU69THD0OyMTDDjwl3QJnzGeZQ\"\n  b += \"0x2KTKsbZcKjV7iNPczZnYQfKvW1O9Cwy3tyOfPwu8YM4RfI0woJ0HArRhViB3EaAtWxGoJA9GS\"\n  b += \"n9WacgyKWDRU5ym3+S3hhzXVPkz/UH8j37LSPasdBQ/d3eUFFrCd8ZN/GUGjrPXAFS9/hOkONuw\"\n  b += \"o6Q4m2GqbIe1cdc7LoJwAmzpekn7vDEIsFdZJUEnydfmSoGJOMvEvTF1skpqPp5aoySWLN8W0RC\"\n  b += \"oKAioXgCCfpgxRErg1YgviHiAO+5l5KWKZ80o+nqbnhnFyoySlu93TWurj4UDU99v6o7b6vt9H/\"\n  b += \"IxtsuHR9qyU1y50vmfWlpJjE2M1Lf4ce4NpIKmVc3oGinUuwi9RL2lBn5II1Iubtp1y29Tdi+uf\"\n  b += \"sO6xusEK405QU32PL283SjWXp43isO/+uU/dlbmdW2to7WurauKMbf/6zkZYcp0DnrtlRxOdBNm\"\n  b += \"v+uy0A8mKzCHwLewmt9B5+Wea/cvoAwx9TPiCwZA48X8UmcodfNNy8rFbH+zLs4IMCTeJ2C+PWp\"\n  b += \"+Rz2eicDUBInkSKoCxSEmTTokkiP1yCk2bUrCIb6WqjhMfPYEQYO77Gk+WtbwJV2ZitvKMazziY\"\n  b += \"KcMKPb8LNiQs69xjYB5VbVb9mDevZ0rU3C8fFTETp6qbnhVMn970Nhi/u+4VSp9tk3WJLE11n0p\"\n  b += \"KR9S+yzyl1/KNG+22KPrZAoHUo6uf/JPZXZ5rg7JyF2dNauNuLFpuKwc5L2oBb/fyn23a5hVj/O\"\n  b += \"B2M/zgds33HeZ8txFm2YAJ/nOKvAN5Hv7zEC3D/SOAtq3o2zV+/uHedtJozzpOke56d0nA+0ZJy\"\n  b += \"f0AqeyZaM876WjLP7Ptc4P2ZlnPda7bu7saZSEgDAf6I/YZy3HOM4U+C7zzhPhRjTyArC9P+EdH\"\n  b += \"vR6IYvRq/mpIljxnht5nXAlAedXJwSG4y1G/iz5qrNztk/fNi5Lfujv3Pvr1ldvM3ZyJ0XR9FL6\"\n  b += \"TiuQWfr7tfXrZDteraAUgOQqKOHpx958X/JG0NC3tsAhduT0V/Sz12DSBF60WG7O2o4YzLnkZvk\"\n  b += \"mpt3MY+wtjxC4laMl3gXdk21vWd/+l6TP5iGUapDUPxJHjuT331lmvtxzSkGThTcc18QDd6BG9y\"\n  b += \"ikA0qHcql/JsUG26cjqpwFkJKXiZP5bnOrr1zsn45Po8UvzrcvHyVsMu8YWxy4kr58rLiLWMz31\"\n  b += \"ojX5YVn7zntnen8uXlxSOTt/+bfnlF8bm7H3xDXb5cXHxl8hOf0S+XFk/v/foN/598eXVx00c37\"\n  b += \"dN9LitufPCaV8vnvynu+/SjHzKXr2qXlcvF2ou96pQSnwyXqlIldUrew5wy2EOcknW6iFO0iMWr\"\n  b += \"lpssCaJfzU/YUuXryE4nYb3w9ATw2ykO01pxjl4CRy+hl5n0eHq2SK7gUknnDCYonD3bx9cj4rj\"\n  b += \"H1TzqKZce6xnjo5wx+rOon4Npux3M7q8PWS8KMOkDSb6gU8o7EQi4pe7L095aD0DHmBTGwqcPZ1\"\n  b += \"rMJ8a37ojbNThsA1AMGrPXXDoQCwl4zXl2L1P7vp2S/lIB0jEKouUczzC1vEVLoDWuAzq9A1FJp\"\n  b += \"8fwzsZQRMyiry0sdtphynjcBFu2lS0IXt9llsbjbhTACvhiYXeh8Ff2aG02WSFJJ6XGnF0sJt/T\"\n  b += \"nz0JHZhkAOkrYUgnkjmHdDwM6fXP35Bu13Kw7Kcc0u3WD+lBEURzC/QuUx1TWOr3x12DOk7nY7c\"\n  b += \"tB3UDW3barkHdYZfG65OeQV2fHMOguk4WU0cY1IkEg/od9ZVQtpf4gouknb7YLaLF/FfS+hNRMl\"\n  b += \"0KmTqRxux+N/yTpsxEdlXiIo2nZ6TpQFIfORh+yg4kwk0nK3kybHcaoVEB0xRFL6YM0jEwFJe4H\"\n  b += \"wGPWOLaJGIqHfh26iaiuhgT3GWLYY+S4i6jBaTSPuHb7zSC9sXhakucTSKH3WZ6rzOResRwpXRG\"\n  b += \"dhrJC7gn1vtOAa3LDd15/SjhhLhg1uuFcd6Q9o7zDaf6cZ7hY+XJLXWcYad+zo3zlD2+cabtG8Z\"\n  b += \"5ry3HeY/tGecZS7uH47zHyoDMWD/O6MD+3nHeLj1Kih22a5wnffs22zXOu/SwO23vdSZ4XSpXyn\"\n  b += \"HeY3Wct9s+4+w2dOctx3kKDoQbWYzzR9R+BRi2fqYijAEnbjeEHJ5Pdrv2Snok21qo1mmAqSkHN\"\n  b += \"z/+1kAMY1ejGhMUxGzEhsqiH1iNG0PQ/rbyvNBjpX/DI8NRQ0kpcYD84DxJ0M28Tg4bmm14rUh9\"\n  b += \"LfGcSJDpCNpAWxh/GheyvwfY33pPf83s/h5AKbzvL6FZtIqDdZo3sg8kAQrrBw1gtrkG7YZT/aD\"\n  b += \"tHzzGQds/OOeg8eb3GTRA0jg6/MBLc5/KQWOzDe/IMQ3a+KnHOGhuw1mD5ly26qBtIa8t3+h9Ja\"\n  b += \"ZNaRsQqH17ikRPUkLhh/NolbJytaR/umQper0laRjkcVPC9SMbN4vd7yNc/5n3+TJFDaJzzfo5V\"\n  b += \"rBI9YNEvQvhNNjctg9kwihkQtS0YJhrxEEWTXfAH6QSvZmrUB2bJKS+kj2jWXv2E9/p2jMR/qik\"\n  b += \"LbTnc2yecHMfONmrIzxjJU0sPISIU3TcROSn0KRcqmqy2uorJbW8mDKzn+kilchEWV/Swxqhc6i\"\n  b += \"nRw8TZy2IuZEnvSH0AQ0uSzUcbSdFKrkscccaV4vbrZsu1cflHros1SrLEtsnfLtflhLJhW/Xw2\"\n  b += \"8zcsTyomq6LElzeWW1WasSLmVGa8XvfIMzH/5z8dgb1Pv0I3swOcrI+sVJR1bfu8rI/vxkj+xeK\"\n  b += \"5e+x8rIzlg/slgf3ts7sroQ1SoLEdsnfbtfiHRkd+nhd1o5YnlRNV2IpLm8stqsdQiXcjDpP7Jf\"\n  b += \"UGjDWOojpYjjZj+zkjHGV0kaH+pKGv+AeKdzokPBOic65B3WC0kJIV3xpkoDmVGuLhuQU/6FAfK\"\n  b += \"TZ3lcCdMsOIhjQZ9IjrjBgG32/USsQC9/IbvdZnzn8Fs2RWqDQ4ZUp7mK8vohwwGzn6Xhr5WTjq\"\n  b += \"XiIDEJ/SzoxZ0xdRPRl3LCx/Blzy2Kvuz+7Sl82e9/2ypYdmBrMkDbSLLTuEKkEYszEGs8fLh+k\"\n  b += \"SRDarn9W0Sgz1h5hbPoKf2yovhzKIxJybBdXawbe8Aw4iHpgOKQcoukzKucsXJ1u4aQJ9sRQV4l\"\n  b += \"ZCKBT0YjXtl3akjxg19LGDKGbEsVDNwxGHNFZOOPriiSlR3yU9NZlijoasSw2rIzgqExFNtzAeZ\"\n  b += \"QsmcQthTZR1hrtLCpwhjCDWL9b1xIEvF9JOfS/HC3w97PUyf54K/XUz/qKU+ep/6f7XF76lNq/I\"\n  b += \"z5iKdWHcUqJQOk6Tm+qKoUohEXuOuryD2nUooBFeiaaDxLg9Q8ue3C0SxqN6yy8xGSVZcWiYXui\"\n  b += \"yriaZTZ+a7JNVQqh5S4a08funuIDVVgudyn7Aa/yUkhAFTXapKq5o4Gcf1XEZPWU4xRAedTtovF\"\n  b += \"p4olEsGbRNlJl2uBCS73wgEA6khYSkqrTGKCgx0x9WMR+IzVqcmYbxCn+x2k4NPAcSxmn8A+JdE\"\n  b += \"sZZN0FQTsJrSOhuifp63vVUCaynuLO6dl8YC0uEmOAFNnlKJixMgLniAUDbVuot6QI6Q+B1RqhC\"\n  b += \"4P6iTZz2uYnwh50BQGSww9MEmgSKnXibG2Jrm1EaHDp/EpdAGsDCArojvFxlQMaM8DQP8Iz/ob6\"\n  b += \"1KcPURNlEabTl6rXceuzhJeMdSgqD3xSp+TyZok8FWugETDhp4uoMKYGiOZnvklx52kgYBuY4AC\"\n  b += \"LfUOTpAycpis9dHEoXk+zjg0n+HKIbm13bSgnss0DlymsVRCIVOU5mmT05wEex96Po3tp77IMua\"\n  b += \"NX5o6DmMbTyjqSkLwqYGa1t8h6/ouPHjdKFfy2mJ9k/oc4ebFCwplk5ZlQRZfYZJvfF2ZBFJhEh\"\n  b += \"CqgbbKlSZcqYUNlxD74RUseapdtBj0nsLNS6k8KBFdsrItwivFWqy6UqaaXrhYMytdJ2yxIK3MH\"\n  b += \"qG4+xlnLxSnFPtvDXcwnDzWk6NoNL5ocRMcelaK+wIGsRE0R01xXlCVdKP7Nushq84QmVd9ALOf\"\n  b += \"JeTFkpQUOWdr8pDUxUpo6MKrXD7Ir5smS9ZYki5064ugUFhMRYKptSx6mgcQhM3nAxJhBSDBJf9\"\n  b += \"s+TYsSONcFDhPF0HOQSEBeqH8WeQ2udrTllmAJd0FNrRGoOSOs0iNvUwrwrT+uYvNDIbOg6ZHnV\"\n  b += \"JGTOz8vCHzmogryXVgTouam62xaz3Mzw3klpRJb45Xm6RoeveKeDUT3tlyuq/Fok6bADroyC7nD\"\n  b += \"59KuyrLF8SRsbGQZrat4g9nvVfo+jW2ddTtUP12XeJJOOfeDoxUP469wsHc26ES861xs5SIWrvc\"\n  b += \"v5CJFpcnvrg8ctfc3A4gmq1wgBSDfJMGO1V2xnDrqoygpso/5otJVS8ecADV2iIwgqb+vYqSSIG\"\n  b += \"SIF6A4HtBSVjClgWlDZFrPHx7pqfl+SueIe7GCqcHaTmEA1yZSEY62RNGHL4K3wdTVTnKTISnNv\"\n  b += \"uffI5qsIdfPut088s3uvnl5UsRNeWxFXaPCdVuymbp7h3pv6DJ9wIbJ2mt3pg3v9kaWLAwO+UFk\"\n  b += \"QBBi3EoxDWzH6etF0jDtv2uoYGGU6ThTjRkaMik4UY0nIKGhdKwDg0L0bBAGn76pN9iQBq+i4YW\"\n  b += \"GlrS8E00zENDUxq++KQ/y3xp2ImG+WiYJw0fR8MAGhrSsDVsUZeG94az1KThXU/6i0ul4W1P+ot\"\n  b += \"LpOGNoR9aUflvYTy0wPFnlNBDg47YgSe0H7jJX499ZeI2cd5ACApbj29B6wLxCBqCj221Tcl3KH\"\n  b += \"Usi0iOrPNAO14sGtACJDViZvEpiaWYMKY3BdS6lFMKBT60bGXZh31HPyIVbShdoX1/Tg9eIV/q5\"\n  b += \"VJ3yvfZLXpwA72PWKzh9v+4UsRVnUFVLMJa53q7fLEGOg2By0bkHEXNVCxP0k1gm0FeotRZCtJn\"\n  b += \"kZZWRvJz892hnnNE7elgM1+SqDuHucSwZhvWKAkzEOV3n7aObjBr2nUkgjAQ9c1Dzk707O/wwpp\"\n  b += \"DaZfdnYcalhqDDEVDzW8EqAHZi7HA5MqlivNRdvx9MS1fpVsVQ3yRrISZJ/9Q/hKwK/7dEhSbiR\"\n  b += \"FNew9G9BvrQuIKjkpa/yi3C60RJ44h2yztZ5qCt9qK3LqkUjDLoTxm9vjEsuo7Zw4zIMdnuHt44\"\n  b += \"jmHJ+kdniQMD+bwYY5OoqMjqH2GksvRSXR0aJhjdJLZo+PGvDo4iQxOLMOQlIOD/kehddbgqJ38\"\n  b += \"7uc4OL0PzwmPjj48J2F4uh+e5z4+z+nlmrAn6eWasCfr5ZqwJ/HlerftWlTXKsEbFa05nYZPg1o\"\n  b += \"kWdXLVBQUdVq1qJ9Gn6bhIy34j7TSHzW6FEtByKVamB91VfpHfSv9I5TUG1mSoq6a+6hac6+Crl\"\n  b += \"20AFEXLUDUSwsQ9dACNLOLQrH9+3R8ZuzRybqfOiJZ903xMZN1d8Hr+hNv3ziLeJvpRe4b9uzDq\"\n  b += \"n1TfNJYtd9EVm1mHNwcHaqEj/slawNgdvgvVkrUJinS1Sf+lqWrT9JLll5x8t6xCQ9Pj8qCCYZI\"\n  b += \"A16l9LwtPO8hCsCz1DkOnnBMUqrlvKheh9tWfF570WJW512yEo7y7G2oCwL6FLkycETw8DD0VWh\"\n  b += \"n2L68ORB5J3tmU2B7cw/elxWEqdldqz1UNzoWCkANorOk8eUM5FnhF1ymmi4AHd2LqxPT/laN9p\"\n  b += \"zIGuY+yeMTy+vhHp8TXsTk8TkJa1jX4/Mcl7DbjriEFQmvrhwilP3VepexVs8qVh0eId45wtuV+\"\n  b += \"LerdbKWsNZJXMH+H9NcW9x59QPim8Nt2Oa+FIfPIFf8QkBqTVuRCIoZkASFBzmfRjoGeA+ohsHO\"\n  b += \"KIg5g/9ctBhnmt/cCTPLk2wTGcnKHOdbNlgrUx63nQSWbQkX4wEZLB4Uxuqkm2f7NH2XSGMIou2\"\n  b += \"4SrSNQKwQbWNhEaLt5CwGnhIQbZN0UIm2YxZri/hbLnuSE0ZC52A4ZdUmvW/Ppc21JZBpx4FMm6\"\n  b += \"Er6TbJtD8PMu0UZNruFi7uuQYk4pTVXI7bfEnU0AAIV5+EbzvpsKero0hzQ8Yw4RiCqTzRGsowh\"\n  b += \"omMIda64ovojCGD/ewxZOSHY2irY8gq+0HRjbc6hvFZDGLGGMMattAxtBi8YcTZMIa+Pl9q+ssx\"\n  b += \"pBr89keFmF+G0VaG0VaHEQ97stb3/x4d6K7+G+k/eIYqR1UAn3CKG3CKa1jy3UeYKftMBTGK62f\"\n  b += \"PlofjMF3a1SIk3mc26D9ZJn6ytCdrsrQncbK8BXHISpBIw3LBKv3tJqEiWTSo3EiQ/Nz5p7I31S\"\n  b += \"vcfLeiBMFqVZd7elCyOZoMNeyaeNlopIWbp/l6TZW484SoiX8ITHHXZ6eFOCKvjw5fS+n1sbGpw\"\n  b += \"9E17vt5165z/w5q676/QFtDvh0845p1+LGxHl8PLcRPg/j8bP0atA+7z/8e8yDr161bh3eWiAb8\"\n  b += \"H+Wf+mhk05BEdk/aCpHKQPpAwoSoLB1NRt+wyR3+Fzdhv7p74OubfWy56Q5du2ao4f6MbYLovDy\"\n  b += \"1IHNbB8ayo0QXQySxoZFEHz88eLuzk2rZj1P6EomoufOJKw6h/OMGe5qP103dOQVpg36b7rxTN9\"\n  b += \"VI3iZs+gd9N530m2qM71/vqG5qqpte7zfV6N9+v6mP/k2j4QV9T7PnDt1XH/LN2PS0Slzw3WiYV\"\n  b += \"4kLrkfDi2bFBcd10spXuBlGyWKYZSiuXNnR2tSisXqVL89BHYv/yfT+dFX4yfb+dKUzivhLXP2F\"\n  b += \"ZC4GKTNOFhd44eBoCd8nkEItiRL51FjCxYuiyFFLPmVLokw+LVoSLZJPg0uiQfl0+pLo9KbMJuo\"\n  b += \"EJ/Kn4acYq+SzUixrxUPkn9ObPzfBb2IqWAxsqyFTLXgSxXPRkYRqeo0iSyee1oXuDsCOUroYsb\"\n  b += \"JYUr0oPwqn4QnSngRuWpWLwutY1YoKck6SNybVEAqMsLJ2miyQ0ml6vU7TGxIvCU+v9iPIe0/WC\"\n  b += \"Qlen8jlaW4hKcaSrutLikNx1wUmeoEHY8E/09I8GHey/wQr6VGL9eicaC+YSZLiXgK73VaFXVW8\"\n  b += \"i/6yW06M5ImFyXKkV91dasJQTRta6MtMxoR4KViZG1FkBpir642PYkdIH0vJDXEGgP8zKxsWLIW\"\n  b += \"JnxOdLhGXRjG2fmzs9a8YoBmT/TwVIv0oUBgrbx+hA7IksP9rl0sOMiPe1jMfG0EQuTMjzZz0T2\"\n  b += \"jRA0fSWJdjsj6lxeHrXD/+UpfJwMdM+YJUQwwpOZcT4Q9PhLubRkT2vbTcdq1si6ASrQ782kL+c\"\n  b += \"BYNsiCjknJ550zyFuvFbkYkeTY8FNs1wjswKjJYBDK6FYOF2XDucgV8NWTlSNw6oSsHrTqlVhpu\"\n  b += \"19zilde6V7R1rqG6mNW6F7NaZTGrVRazWljMarqYEY+WdfoyOhHYBEq2lrw8r8fL/XoEaEZh+Yy\"\n  b += \"O3e4688xNjaH6qG0q6WteX9c8ZBQuW9XOSNpxUgpnJKpVjVd6ykjCvketenCWWHV+BK3qRpd4dN\"\n  b += \"YRvqlYi9OSkMXLS31FpvxMl140QwOjxjVwKekj/Nyloe629fLoEi/4hTENmEnOkI7wGOMU+GQl1\"\n  b += \"xJRkBdxkgiZUPp5ESrHcSh8kpcVn5w5iT+RqImuajcKZw2sgFBobrYWu/dOkWbDbi126cd4a7FT\"\n  b += \"PyZbiyn9mG4tdujH2tZiu36sby226cdoazEpH6+qkHEc79/NK5sfDGsp+fiCK2uDuhnM9wWxm1b\"\n  b += \"cW3Xg29NulIp135mOsjtAgg9vi9vTqSAOamXbTUx1RJ44KkPWH8YDy5Nl2VdrnM9Z230+k8nmcv\"\n  b += \"EbykZWIcHoleReMfM1lfBpdIpn8Xnjd7yED+Rbmn2o/tIO+hV5iaMq6bq71xUW9R2PiglqkLmGF\"\n  b += \"b/rwDTXXFPUJVGefSlhXKkruq3eAO04zfzBMZu61TlmSbfME7xY60nM3Ld5YXHvNbFmACx0ZpI7\"\n  b += \"vD0nAuzHemTOab42Hp6j+8qYuKAGzonmERUROpSsHIB3i+xpsVs83ajHU2zq5tjkC302aZIGILp\"\n  b += \"AXbbBYmefCwuh7dsUBzmpaHtOHnVAwIcSVLJbrWC3WsFe80pdW92Fsz6Ewmox15wWfKc4V+Bf7B\"\n  b += \"YzYiikxMK5inm9U2w6tcPCC4GU0y+UyjwrbpeWZCiAkNXyXLL2gWkfPIEkdU8vxBSWCjdBpDh4K\"\n  b += \"1wY26wGH7l4TOJW3eWa6qFpC+Dek1bhykWr2AgcN1gEi91XExT2zNW6APnhmTDdw/NEyw3PUzo8\"\n  b += \"T6h5N9kqh+cuDs8TrWMZHpbt6PA81Tr68BxolcOzryXDM9k62vCMGxmeO011eCbw9Gwy1eEZJ0u\"\n  b += \"0OZbhcYsP7ZZ9XoRAtP9mTA+OZZfpAbJIcmMWkmW7ImPdv9tNJ/tVIh+kMftoWv2VuvGnVTeotm\"\n  b += \"Q/TPAeOLMGtj4JRPgO5jEAi1mrMAAKRhc04dpyEogyusk9+3oAVMkJsI/FU9eUM7AA/oUQ10h65\"\n  b += \"5woI6rvnOgU/MnWxQGyKiQkwHQz8AXk6H6LSQJ4l1Hz17SWfpFQnKOIlMvR46aynzBKZrI94OMs\"\n  b += \"zxoSOJGvPQ3SSOxLEC+hPdBqiiGYzMILGlF9/EFSTQrNOqaXhJxjEL5yQoPw7eMfhC9UB+Erv6l\"\n  b += \"BOGS6aXJiYalB9kV4opJRc+06+iajf7GeWMAGuJooVT4Xv01S5bdJK/w2Abl1JNKsOShukpLiJv\"\n  b += \"W8PMmV7eQqcZxAyON8Ak9xkxyV4uZNKhw2aYOOVcSpjvNbIpOlwSJxiaANOYLuXt0p4FEG6pVbi\"\n  b += \"uEFkd6xwrMsO/J8iWh3St77dZ0hseC12FATDRJNrCwfQ0ZJKOT1H7bjp4YmUgshyik867VQWghc\"\n  b += \"DjmbPO8L/elAVtkITCKFp1SVKnU/FBPmyEPxRKtnKO44xqFwO/YOBXK9laHY1uozFLJUzBqKA62\"\n  b += \"5h8KXpoah8NQsRx0KrhnN95dZYFSV1mGGuVe/PkxxUMR+qZRRR3QFuQwpBEsKQsLqQMCeDvY2IX\"\n  b += \"1tCL13HaVGPwecLO1T6phoqWMi4P1aPo+u8k8SfKvT8QAXdV25qFGLWgcDtSH7ttsih/HajoGhh\"\n  b += \"Twq82OoOXg45gTwkihQ2daVztmXat612bNmyTGB1A1HfEl0dnHTFtq/dTihO/F5x2a1f69XszTQ\"\n  b += \"GhQbYvT0s4hx75Lqv7iTHYwFL7Ar1IhxGoLMCERKfMLVdFjuoV8Pxh1pzD5THg1RkB/F/ljkQpN\"\n  b += \"TVmo+pGpMyXyVNIvdeCL2dV5kEDjfF3rtBhKirOVqaJnX+luCcJ7fakNcbuaOKNuN++0+FphxKq\"\n  b += \"8QXoFIZesoaFejXkIspFnStj3tSkXHfGY1TibidiBBZSAFL4wY7+KvZuIKp7hKqDqjVPvvhkhTh\"\n  b += \"rwamYGYCSLje3rRYtSKnCmUyEgIcWx4zEUC1ob2cyowZwP6O1G9Q5I+u7ae1fE65yJhd6ZwpXvB\"\n  b += \"u5xvuh6OKke923vJuw8huPLxNLxt77BCkI/K90T4cNzliOUpV732cveWCzsSjVeWvzdkYqphkhB\"\n  b += \"cegKYfkURWUrlsBSynlqFPlaQyQu8TG6uaOTcn7arVgkJbKiDIpaYOGue1NfF8/q8ZStmsBSoS5\"\n  b += \"QycE3Mk2DPhmCDNot1c9qgsxr8kEzY7iGBr9I1JCDmkiHZPzj3kGDF0cr1Iw8JCt+PZ0hY1R6z0\"\n  b += \"r1nSFB+LkMSaCF0SCbsCQ3JO7sKaRRTD+7dC0vCZ1MoJS8pk5YvFthslb1uQWxiGj6CewrFA12B\"\n  b += \"Q7WdGLiBTl3SLCa+wt5s2uOjekKoDiSYxSax6OIxUJkqokrl3BXmYiSItYYpHE2KqkVWUkRYL5i\"\n  b += \"ghzXhI8wgrSyIs1vjYMD8Zodlw1YuIdffPf3bMCy3lcPyllmVfRyBihHPFKCGVKUEyT3Qi6VzNV\"\n  b += \"j1gntQcx41xKw9/gXznKySyrzpXdHe88g2qVcSgZjZ+nxd5jlt3lnOgfcJ7mZaP/OVUINqC3FhW\"\n  b += \"9Srt2GWlGxYO2ww739vBuNDJzoYnykH4129Dt9gxyurKDyIaImMoWewMaUqrKJ9lzxBV2IVhmpn\"\n  b += \"gY0NwfpBviUtolcN2GLqXjd1DBZ77w1TB4K/LBLweQ3KgdjC+jo9r7dC8/rLNjjJVlBIFnMwC0f\"\n  b += \"t8iGtLf0koAafTBVG4NknS075m6eYllg/7efXA+hWu7jey9Qc77i87bmOy4F3TmNcxt41fWLjsj\"\n  b += \"eMy94jjMsHMC4fmHtcpm6kivrkRs9XsgHCMe1im+/WT401YtXlR0fOPpzMQs7qeiuMXQkYu86nC\"\n  b += \"5MIaZcVXKxRXOxa9lpgEzF1peWlgN+ivF7CkB8AsXrgUXPNpWJf+ewDyLL/3OowPF47FoxseElu\"\n  b += \"ev4cIBDmQoumLrUmdZVU7evxTJ1kj0frZXfPTB3Z4/n4Q1PB49mPz4/NqI1/c3fWwmilIC/Uw40\"\n  b += \"k/aDSQb64W/RVh2JVXRXpoLenbUmAJqGOsVeEhznMsQ+4Z/LPim0fCBq4w/bsgWNUGqqkHsq8w2\"\n  b += \"POj4PX5P5QvXUuMVj1/UQMFp8PblHfr9iJTv1pcdB36hNdQ6OZl6eUpgKphgK8nMVBbdFyJ012u\"\n  b += \"OfrQ2bI+u0H5FOxljNK2GfuImFukj3ixgofaDDIEfSAsF6VqKJ67HLUvfISqkd795RRwyjmFn7z\"\n  b += \"o5i4ZEymkA869C0/JkjnFJn8NIGf1u+b86dx/xPnXru22P6pKfeAzJVCZ+r6Yjpm2PDIWfQ4ZNF\"\n  b += \"jyaLD5ZqqHV/W3EjWPPZZ86hP1jz28xB9wUSknLuy5pNpue1anbMg7SRZ80nJms+RJf+uqaa9FJ\"\n  b += \"3pwSihOsMj4bogcFKdcQIQuEp1xhEQaR4o9Bzwcs1su6kAi2xFnIyXukjNpEUVM1310ASwXtGUt\"\n  b += \"n51ZYzzAoEFvmrAFHftovGx/sGpcubIuK+HU1hf5UeFjx+kXgWxXyW+8cZcKQnmq2Uow1SniiJU\"\n  b += \"oExIai4CsMz1QnXmuCgOc4dhRg2oHXIIQuyH0z7wiWd9eiYKM64sqmtA/gudh8vgb2wesqMCVBU\"\n  b += \"Uvzvmn7IzzpQcQsc3vc8dV/sHySN9W9zBLnX9jJfal6H49X1TZPL3/byM/ZyJKG1kCEAA09AThh\"\n  b += \"fp6x8Av+Iew0vdjJlpSfz5QqhPrTf3Y3Tq0sj48udcBXFGTXMo8pqPud06ml+bR+vcFJNpPfpbS\"\n  b += \"umZKjsJq8mNjaPgmB54uKJkr2J5PahH7wQCS2+Wi3HP26+UJCa8g8F6TnoPEg/YHodOXLcLtHTV\"\n  b += \"H8d2Hydo+DUL4SPx3T70cGkUz9ULj4xt3vh8vSR7bqUlOrlp+vl9SWa/GOObpuXFKOrgSai8FXy\"\n  b += \"hYJjwWZ5A1/h+PHUT7dXHxrWvR39C1EffEXz0340nRLu9uwwtHP0J2d+9XuhSEf2eLRaH9CrHEn\"\n  b += \"+ZDdIHC7w/u74ukmmWwTgExqdrkuSR338Kqc01AHmAbE4i8l6kg9S7miV2v0e/iKH0hgM/GwNmt\"\n  b += \"CRaAep+arMIp4Q7bJGsyh6tFbbZFvkGK0eUE0KQyx+xeAbwsOFoxRKZFF8SHYzFAnvtkujHsef1\"\n  b += \"djtm98eczt0EKcn2MWIMf6ZXvsFWrvyWcOVv7b7yEblwESdpkEY6XPiE8Re+DFe0paSJ4nW/yQq\"\n  b += \"XiS2ut3LdL4Vwgy2vG8Il/a9bzrdsRUk2tc7ysl8aLnvMymWftyS62vrLdvtlG5Puy97AzNxjpi\"\n  b += \"SMr4iYWGZMpdCIFZqq05jdb+jHodiyAn5DCRTpNGYqTSNUtoBAXwC/xh5CN6hA0hhM8gqUaxAON\"\n  b += \"xiwcWkVG5d0cWF47guPGnWHeRkZnNUri5Wr/TBuakVejTwpqqImatOGmJ9I5U8jfE9UPrUhNUtC\"\n  b += \"Y0Wf6tMl6wp+8awrPFA0N+uKu1fxwqNtBoTFjvSom7kZKvvJ0Y8GIpXv2WbzO4qd7tLs5LSqjFD\"\n  b += \"9VDp/vRqdaY9GZ3okjc6qeGZSEc/8linJemuerBcOBMGLnraznQqntOQzhPy2wWQEy2lK8ttEGn\"\n  b += \"vIemNP1lvrJetNch451gw8Y9D8kHaR9cb9yHpFv0ayGmUFnmfU1T3CBW4wc18gklpygZLDOoYL7\"\n  b += \"KZw7rrALgrnygVKqspzNaddFM5xPwpnf4HIZHVdIBNYukfz6RLln6L1fNRSEUlWV4YtPOBD8A7j\"\n  b += \"FaSqrw0gx1jvwnzJDnkDe1sm8i2p2YYalXx+TllY8mc2ytidRncXeaxXyOen3tYCFrqYfJezLhc\"\n  b += \"Iv5y3uVKxudJi/bvEGUkxeTXwTrhPanahKqAYvwnlIrVorsu94dRjulyPAJQdwuWOn/rbernXqn\"\n  b += \"19DLGtqa7Yllbq9QaPiMqVKJcEG5Nl+RxS04w5THx5ClGuPV/2PoFllEu0qg+l/QNZzz40xbgEd\"\n  b += \"jpSIEtDetyHIb0NX/Ysrvtx3j8tNnxFz8sYn0RjkkpmzRvWrSLRuoSE9mMaeIAEbsQ9l1gF0KDb\"\n  b += \"hhW8Ho+cpwtiWzPMtklOjOmPVDIk/YMyPvUmHi7ZVKXO0bkSdqnEyWOBG3CBTbrYG5Xl7K497jr\"\n  b += \"PLvYihzlRQwoADf9rMe6dsGLLV6n1sz00qJu2xTe8tafI49hGRLjJjzAcqTXUBeOOiQ5HMvdwJH\"\n  b += \"44krmGQ7rTGIqRpTzqZR19aPrHp6aNbay1a0RVcoiuhFRP6zQtzLGmOGM17Kqt0MGMtubp1qva8\"\n  b += \"zwYvj1/c9tens8HKL6drMzt5dg1n8dW+Q7wq1kNMF5hVq4CYB3Fi+YKSMW5P6vaOCnz840ip8Ja\"\n  b += \"OFWy9aoeyUweCwcB4+8/rGp++2jWl6e6MxUb61MnamNdY4/JxrouOSYb68fHZmO9NaaNFVc9Q9c\"\n  b += \"8TdgaJiX4C6eRbQWm5AdTUnvh0T5/IMrnIMvDE/jdREpaswPctZF9U6jkaDWTIwytnNiVQDBWok\"\n  b += \"xaXKVVSyhpTKuWX8SqbcHIijCPa+nPXJPnhiRg4fdpuExtSa0lsjQQhRCPGTOKQhOvg2pAMQUfT\"\n  b += \"V33PEkmCok2I51lRQXT441KoxNHxYEqLhcPszf1QMCEJTowJEvhDyO+jrc0JalfKZfhwX22yv8Q\"\n  b += \"021QK3If8nFJFWVls1sTkY48tGmK0NDY28DFQW1JpGXYWSHakkrLPv1KugHwK7vZSn45BOZi+Qj\"\n  b += \"nWLZHZf1rvdd4IOpk21L5IC6fR29vNB1fcrHJY9VtMW7k2kOF5QbhLMZxrrYBD/VE1xVqyjH7cJ\"\n  b += \"0eXrjGxDtw4RpT7+WFa6xJi7/GOikVeI269yF/YaIAJNsDG/ZaL7Ok18gPbNNrjHmNusDgGmP5O\"\n  b += \"E6cnlxjHK4x9tcY6zX+QE3lrFLx5a4J70wsT4+VsJDnGoq8e93oeBLlQIugvqyGdP1i04Bgu0Gp\"\n  b += \"ZDbEgF0L8hqEPTGeV5fFxrnjGR7DVBzKJI8DV7lkGbKf1BCPOoBF5KziwCMhYslVttmla9ao5sz\"\n  b += \"DS/mICZkx1ogqAbr70XPCxOrouQvOflRrx1qxEmvFipHFR+weAsZlCfx361z0lEcqklVDsTucEB\"\n  b += \"Msl9rgECXjIHkLshw+ql7CvvTJYWyV+KxwGGTspZzQapMmkiY+vgv7oV7YEy25MNZ79L+wX/2GL\"\n  b += \"2yvBpqmWtWIS6ksPzZfaahuxls5DpU/tMnXRsV3dK+Y33QrkKcH+M21Zb8iJBMNS+zGefzsjuPe\"\n  b += \"l3kI0VBRawOP61qzMRNAs275fQ1jPqwxKLb8M22buz5YMVRKNXY5QfY2itm3jnBlAXYbruzu2u/\"\n  b += \"YlT1uBL9+0EP5qXZmMjNUk/llyoJTWWVP2xKRJngVmNgpQotEFXQtTNEVoiMEJqpEkB1WxICsoq\"\n  b += \"Ty2uVM7nAtV/5ZL3SQSr6BXLh7u1Rc3eq2TSOdcZVttuGFDEf1Sd3hrrucR0SL69vlrBn3zJp29\"\n  b += \"qxpw6wZd09MAcyD3uusaZ/jrClvfnafGwJnKLr5ctcHpzFf7rpretZ8GVfny7gyXyp47yv6jDoj\"\n  b += \"JlEUtcBeW1oH5exerDBAnJzXVdrPYvdKaT/q7qul/YkGLIFrJr9LSSs/2MM/kPXwDzS6+Aeq9AD\"\n  b += \"V/g30y2XTbvmqGNqEo91aF6NQtbnDd6/UULZsUAa9skXKzqYqLQfZcrDSMqHywWWLCArPVFrGCJ\"\n  b += \"t3/4aWSbZMVlr2CbS+0gKpP4N/XQsJapsHTIgayBpgFAVGXn0vCIDxSFmsRHJZ/e7M5tG1S30dB\"\n  b += \"nFEERBPkOrsC22xCm2xXhHKGRfnr5qTOZ5YBp3TyXwbyUOTdIrrb55WJYL1t7gndHcSzfX7+C2K\"\n  b += \"kfkqwkGovT0nekhMXJQhtDzS5iG4JCr4vstQCtp7SLvdha9oO1P5IpgwQ0IzAo4jyq3YV0rVFIv\"\n  b += \"n83gF6piyZ2Iezc0yHZZPgp+sBmI8Hq5du2QAeScidovt90yrQIj7dtGAYB4rR0t5NOpWo2sLZa\"\n  b += \"9dfq8fm16nvnTsr3QzYAHmBHvh4gVSir3L+cTFwmLvw+orY7w0hZfA9eerbiXhmVV9/1hkDSq+P\"\n  b += \"+7ygljytUao+D3dg3IjtUq5mFjUBWqaTMS9ARDa5wstHsekysCeECfd13E/zkvedDdIsYu7kIv8\"\n  b += \"TV/ybUe+5NvmuuQnNJg52SxzZ90a49n7ELDb4ueOdlL+6BrDr9kjxi9m+HYdHKBdiebYrpLVbFc\"\n  b += \"yav4qWYP48Tz84tb2dqrheDx7B2udPC0Pj68muwJTK/7NPmIkOyQfMNd9xHjr2m2rJsCoSUcjTZ\"\n  b += \"RNNnGN3zdV0iw4qFtJcpGNCvNr8QXUkc/rriNfvE48O4UVfRWbNJWfyH3OdiNFUlIKFY/LMbjBU\"\n  b += \"7qBlMwn8HfPidJKwTxL21kVKtOTP68E2MGYHwWKuLj4hNTCGyVdi4sHhGnNVMrdtTQei2QiQg3k\"\n  b += \"KC8XoaTNqm1ygJHaIKYpMCmelXsSY6Eno/ig23QfBEfiIdYIlUV6UEFIKPtkV0Ou6KmWkmqKqIJ\"\n  b += \"UAGrwvtRZKKTf5FoxZMop44Bq68RaSSNPaKxFftsAdoiOclE3nNp7UfsG57ioDadWL8oXYfZe1K\"\n  b += \"ZT+14UQ/THfVFIAXVf1P7BThWVMFPqfUu5laBLfGJvyw1T1cRepok9PvRndoom4vs+DDMcwjBQO\"\n  b += \"9jdpX8AgfBnNwiQyTLmIXoH53aKHe+dihgpya42btTWvcPN5EsldDJ+A0rebvAlb0QunSfaCn0y\"\n  b += \"gzyJO8yX00Bl8p3SF9QIGxb6mCo3ufj0ssjz8VcEshf2pO752ssFs0jUIqE6YrtGrxhgwdyKwry\"\n  b += \"KrLK+FkSBPU0P1NFQXeyrCwjUdpMlLDWN2onwDK8ICbqFzZLjyi36+z83JRsVm3ZpPsEj6HbuUj\"\n  b += \"fk9+E6adzwOnfeqsaNB0E9dava699EFIoMRVWd+hHmG1HyHQQ7tOzbCNseXaztU1r2nVTKvt2Ve\"\n  b += \"cGOPV0P7Mtdy2Ok4kN856fu79/wwd0L3N2lIthxmareg2+3FOw4r0uwY6QU7CjWux5k8/2aQTGy\"\n  b += \"oMIhsINHnxe7FYs2ID2J6M0kQVzphA1VPpM0RPfdP9XHUC1/P3i/PrPrA5e+x2IXBzyY2VkJ/HI\"\n  b += \"W9cTxCbdAUGtt65HWMFnwUYO2CBe6020ORC8ax46rj6F/9oDC7sJ+217sN5CRA3IuKkgI3joqYd\"\n  b += \"b9QNZbApJ6u/tU/M/Fvn2+ZGMWtPqg3/Y+vKwy4sSYf8wGgTfWPCxwdpgVUh4V4ehfoKTVSUfeL\"\n  b += \"uJ2wvXTjrNPJUT8CZuv+xivPp8SX9hfRIP6KO0YZbsyFaWdz+uTuiEN4vHZhwPBXFysT7uJIiBj\"\n  b += \"KWAQ76YeShQNEjA+/HSQhdUkmIuhC5qdixjIgyCYc393WdbQtDuyEfjl3m8r/HJJFROEqLOYc3P\"\n  b += \"QxMUqc/15XQxHfPgpF04sXsFocMD1E/7ITGmZ2vI04uNC152920pFADFQkfElD1FxqkShcZn8fo\"\n  b += \"oMUfg+rxyhSNGHWniYBB2/mEvn2YF6eJgt2bfSpqdsfhQX427SZ9Mqu2ZF60nuaf9kGBJpXyWQc\"\n  b += \"M6txOzMdqTKrZrMlQrDVj+JVcUgmSsThq2+51la+2dWcTezdyTN5mfK6VFDTW5+B/f6hXokFd1a\"\n  b += \"DYo1YWKHYBZWFXCyM3s2p0KiEYXEqFRItLMUEo0wrVivkJgwH2eYdaKIobo3LBA1s2QKr7bV6R3\"\n  b += \"RZAYTfEShLFYrtgvlNp9mflEJspjMLTvAwb3Db8JQIeAX8SUDQuWLSidO9oPFTJjv1l7sZtkZFq\"\n  b += \"JgH3qA+Frs1U3iZG2xRz4LeEo0Kk6JlP2RgD5hIoaTEkX+4M7eauodczams2q7vB0JPmJtQFHFZ\"\n  b += \"0r4ivXlJI0BJYBS4eQUt7OMdro1+pL+hPlx9pXaLJaCwR5ZtkwZkWxgRLJCtUcNYLFVhEz/zC7u\"\n  b += \"gdzbuXknuzFWZsDmp09u/7/8fPSfYgDV7t9Q7X7s4W6xOtxyfiZL3XVcILln54BQ92zc+bkPM+p\"\n  b += \"OOdRKQHIDGyoT+no2VCb0iJ/GrA+mSxpuzPnnj8bBLRJyC4b6EVJkzAEoznYkcUutjBSV+N06+h\"\n  b += \"AMIRwIKtPF9nunIz0p4+vFZLUBYOAt1YYJ/2ULzMAxSxlrow88wwefhb24y3WGLyNpZUZYCJ4rX\"\n  b += \"nkI2TWUNtIg5iJ8yEhMzOrmbVoUDHhVd2hKxJOM7ffpsnMwYKYnyFTyvxEMHA/hTd0jArMxUk7F\"\n  b += \"biZEaCmYkHh0NqkzZXYpas6KbGj2E429I39daDxQ4+26rZieuiqeZfeYpdVaZZLU7DedkMqibfu\"\n  b += \"Yb2D4n/Dne02p4SIXsQ+h3+y/0hU2vIhn6K/tIzq5eCrqexGHnPmtqaxwEY/Ec1+EbNtzEatnX8\"\n  b += \"O63mt4NqpcgwisfNIE3neWdPl0x773+3SHF80s+CIRVmc179vR6qFI2UCz9wnVi7NBBfgCXIdAE\"\n  b += \"lBhaa5om0CS3Hb3FQLN8TJJ9MDViggOY7Gs2CjG0/2yLGdtp234HJVvdGVN6easFwCSpCxdx55N\"\n  b += \"hTeestldah+kAb9oMYQJsOK9L+YCEMjlEyGXjzy5fKwUrxpEbFXEeT2ySnOcvk1yqd2U8kxq7jC\"\n  b += \"hfiZgQwZDiCCXNR4Jqt2xIkHo7JcwkExaIq9C0OgIzI47vWEW7qMxG/eRHQH30ZgT9zFyXL2/Oz\"\n  b += \"mB3l+T/Jb0/kB6Ar3/7m/L2P/qRJ6c78TPb+8/1hOxEXhCFMxKzi00jv+1FhSBh72qo383YVg32\"\n  b += \"zw4rZZsa6p1gqONK2kuIMBsVw8J1zo4yKmMzOik0gBf2RFBZtE0RugfI4ZahqaEd7Praj5mk2C6\"\n  b += \"qUp2Yb7J7owDyZqGiEUIndn67d2clXEx2c1ZGaPOpcpZGWud44RwOujRiNGB3eC/ZqUSl1boKFG\"\n  b += \"43wIs4bGwhJdSWh/vAw45XeIsgzJNIunqDLMZr6oBp9IN3fmsJTaiUV6jP2lZbdBFCNf2h+M0Lc\"\n  b += \"ds9ByzJZNpQ7OywvWW1wLzQRrIQqrz5DF3/KHj7Lgiwo/Y8YeeQ8cfKPPmtNhGI+EUDpFlBK5J3\"\n  b += \"m8KUjQYqniWWGnYtaZ4WbVK8WzXINFkKdpFzPk8KWVkNNlIFUkZTUZDbzTZIJqMUsZzuwxuvj4N\"\n  b += \"Occwg8lGcuVfKPM4pqpRlCj18DlRmmj4xEr6hOVAcOEXYlahUg6PXyzsMDbqPn0MuZQ422681I7\"\n  b += \"wD3+iD/+wutu6xRS2qPdsYZrywn8SP+KlrTITtyOSUosmB6fPpGp8RnaNICsUbzllO764Zokt/Y\"\n  b += \"7tVirysntTrW1WMvSWEMQpDWfas1ske7lJYTPLzGimb9fUmxgXCpTrhmFkSj98Wqg+E6tzR8UR6\"\n  b += \"Nf7SdO391uM1NVl9x1377dwStsivUdp3hZzLL0nO3DZe5mF7u+CzIiVVlPfcUhpjK3iXGBxpaQY\"\n  b += \"lcqXbDMJ3IbAWcJKmLaS6YaC2S03TfkiCYU7KsVVQ+JTb6qFxLAXIIez6o71/8q3mrzZ6dz7Kyb\"\n  b += \"mPuNjuh78c/SYbiwsrX1jurFAQCWmq4QcA4EPoyeuSWaN7ON2yPrydtjVZvQNXqvdXd3WpRU+TR\"\n  b += \"+Q0coDX87+gOnmGAIwJfJzYuJrTLj3pVKEnficR1TlGrI+ixJpbDBkUaxkUWwli2K6sigXaxblU\"\n  b += \"s91kxMPIQF1rMrF+PSUDF1x8D6fBFIOp7GdGlD4nbiQqY3TeiHjN/ksj5IubblJY+f3lO6Yhpax\"\n  b += \"Lgivkrvt26lN5TG4mcLTF3loXHLhQKQcIVQ0Ohxrlal/xqQ2Nfe6nadjo5ttJWbnK0rzAOJMSrn\"\n  b += \"OqPAhZCvuGc25yfKNTjyduSosIgHHIDHEwLTgRAfWrm7Xzqe0WJ2s/ShhxDngQAJv8/Nau64a2H\"\n  b += \"VFxKnAmIo4cJGuFUmXnpcbHaTl8kYJtADNELgmziw2vF+flg9WDDnNNbn57SssR644ewSrJaKx7\"\n  b += \"Vd1wmF1YkRk0CawvBMp71T8RCIAtpFO9pQZjYLrrm4lj4BzID/dDoAPE/bXCTPRCdN3dspUO7vn\"\n  b += \"OXc2SM34zj59pM7Cwm4HWKoJ+4fOThFGfndvah0Hvh1aeGZpPOLjHa5tHV+4hjf4z0PzompSG5o\"\n  b += \"lI8W+e9ydy6V0YNvdIH76sLdhIiFECzJFkVdBCd8V3+m/06APbPGSJN/SXYYSdcGkg9SJkfg33a\"\n  b += \"yGblA0LlFXxQvBJF4IJg5CMIkKwfQImqhESSF2zejV7eyWWleYZ1QqtZs+CiqPQVfm7MFfW+bMZ\"\n  b += \"HvAI/Tm2rFnyLbqY1DREqEWhXB4CFIQAiHKQVGY7J6UBBv+apYYtUazpSbxa1x0/oBmlMrEktvG\"\n  b += \"2KXGFjt98lJpKOBUmWipqaQw93+CAOY9n/BVZn4ZfLPxQqh+DqNcSUGnUeppUjBkSzRThXQGIq8\"\n  b += \"pCK8a8w9UtWS6d3aEz+EyKKoresxaX6ZqOgiVWeVtv0COxft8Z2lqUw4UT777J9tYA132zH3TEb\"\n  b += \"Pn7mnbF+GXfTF/co7fLGPllpSSA4I51vBsJCgoGf21eZLdHUO2IKJsgWVJKG72A3Fz1jGqNO3je\"\n  b += \"BrdZAs1RmbT3eqosB/TJLPH2gB5bkvZ/IChMhyhQ3AOzh8AGam79dfURYURKqDGzfvoh6FUKDV2\"\n  b += \"K0u3sudbUXVMh+JQKxBib83N4V5qeAFSqr4IMFFJzzxy8wvKf5Fkj7qt5dpSYoE01WBZv31Rnq4\"\n  b += \"aiOTzhRWy9WyLYdYBmQ43Pu51lpKJCwYIesA86jbhVbfyMpxK5/DX29HPH72jn5+jo7f3dPQEEj\"\n  b += \"/7bw0lxK4vT8WMPc16XY49/6OImh/Z562Ph09WHw+GPr5f3+yZ5IiqWsR7ApLwLSam7rJD1P3ZY\"\n  b += \"v3qiaSOpvYrallYiILiwGwprGPTwEqq/VQJhrn6iYwW+3kD+7nJSD/HAxh1Iijc9fYzyAGcYD9F\"\n  b += \"H+F4+/nN31A/P2W6GaFLbHPSFoZeQWuhu4mUbHOWNKB6CsKPDa+hLiUtLED/UFqJOXVJJ2CqlYd\"\n  b += \"++YAX8WrFzWLLx1k0t2W7XwK3b2fD/u0lXZmpln58WBEVnzlRRIVUGB8FUCH1xUfBU0h18VHgFK\"\n  b += \"gt9n3+1O9Qn7eXDwktJjqlsd5y72J2OaWzadPUKd6ws7yXIPBlRjvySqI0okyuBGgtT57WmpM8r\"\n  b += \"eXJ07L+xMV+tD994pibhccCuVl4LIibhccEuDkpo62e+/abpp/P0e6lQ37+JpPNxz2ZfP42VpTt\"\n  b += \"frfH/T32bjasf890/8nk1rIY/ki2LWFuJU4UdyRGkJsG6Y+SYzBqz+pn057TnHUENWkZ475HOze\"\n  b += \"Rej87kgW1LR73LSIV1JFyrnZaevtojLNf4fcp1l0o0Zh8jbPvUy+WkD/n+X4fytJRdi0KGXUXHD\"\n  b += \"t13b6OxY2sE7sO+uz8qJ2IUOYBYOq13CTV8Yyr5AJw+cXRyIqCHitWsTxk/QYrMiWRsFp5ZHtOm\"\n  b += \"5GImV9qvpZ0Ulmgk7IB0djySCsxf7LHa0AgBh4x5QW4Rarm7Rowg8ojmCwb9QzwsjzLT1H207ht\"\n  b += \"lYnbednQN2U8n7Uif3/NqFnXrP7eWD8Uj7o7PzrG9LsFo0Z2rWszuCDdqQkC0iaKDtxvIp+KvM+\"\n  b += \"6dXmyrvkBH6ZY4LE0+2oVsRsTGpBYexJfJ1vEApUbBmvLaHXfJL1X93P2MPy6iWb1gPpr2AVHkW\"\n  b += \"3k0F+14Tg4wtfwdWYBZXzxWHoqTSayWObwqgGJPuaCD2FCszL/0rOnQgAwesA0UkQgxmwEQU3Ub\"\n  b += \"MQMthG/9/MaEMQ8Ih5152vHAyYkuqxGOpnF1eQpHq+m5xMriR/vMNYGGV3Bkw771ILnBVALOfcp\"\n  b += \"TvfI/XvNo0FxwyCVU8tlngo7Wb9TZQ/3uNeYd3hjnno87Ruzd9Q1hOUTEiGeqQHLj2rlpwAe3ZO\"\n  b += \"4XJJXSTsl4VlcNC9BQFJrkT3LWF9+MxFbqZRhI7PYFrYuJhh1hAiAyU3IObrDU4eSa8O+QTfTj4\"\n  b += \"25dXWkuD4IrmyC4Epe7PANR+z2E63Z3RbusL6sZV4WKFCOdXUb4pE93dYcL7u9ryXdnmwdS7ffV\"\n  b += \"SZBA1u/n+DFMH/I+gibUiYmnq3iJdGI7HC2BNKHA/b3XCkTJgD4nTHvLB+IUFAtrIjDuTyC2Tdr\"\n  b += \"Mvmvr/n5fmPZr4DWTBTrhF7NhF5peDLpBM3WEdn8bJlWhwOE4lzxD632SkskZtH4ecAUemW1Vzp\"\n  b += \"rfqaMnFFY1ttTVJZdoVS6NmjW2mLHXVMys4tgrS22sYElUYwTklj2iHtcv7V3j6Od40DvOXxli0\"\n  b += \"T+fnfM7ufS3d+A3TrpybdrgRJOzQOjZonNrtCVJOpeoCwMB6MGSvgFxscjRtujchMpVr/Cf2NRq\"\n  b += \"V+/3FdsV+5nxFrhl64lTgKFPjmUkiPaeNyyR/2SMQ+RP5CnigAhpdMa7Rr+tNp1FBnW89qKoUaZ\"\n  b += \"CVbEbELmvnaDJFt5vYOtGBWUmiFb4mRMx02MrBVMxRidNLPZ9RqaLqzY/cKxh1oj2tRW7Hnk3IR\"\n  b += \"Rk/VUVR68BkO8xZ4HpyReV+x90JcJVX9nmRB/P/BgoMrr+/sh//vz3ONnN03rGcdum+7TYxap8f\"\n  b += \"cNt0336XH5+4T//e6yx2KgLgpzyl2fndZyS4JvbbGHDZGKt1o3qQxEpxXDEoIvpEJT9Exssf+z0\"\n  b += \"1o8p5O2lKvhuD+JkDC1mPc7VU7WrDysOU1D+MXrqZcahdnrCP3dM93T393T/fo72Le/j0339FeO\"\n  b += \"9pz7+25QrAjw270toFaJlVjFdhOrxIIIDNQqQOnk8eVKXtoWpjWpN+lHtrKn1lSxhw7K6SSZRkW\"\n  b += \"LfNZph+1OCxVq51rBQUnX9s8IxyEj7J/eeDUt1gJ5FGaElUWYxkKewkitaUa4Vs0Im5UhMxBwuE\"\n  b += \"VDMLd1tCJ/7CyVZ3YzCzz+BTVMdutSG8opR9//08M/2fL2d0zVoDRgRz/61c9f++inP/nkDWshS\"\n  b += \"mBHP/SmN373xseeedt/XRq/wn190y8nn77mnW/9jvsKr+Tw4a888W+HP/twfWl8nvv6zw+jbz/6\"\n  b += \"7N8x78nOOudvKhgFI1pq7xpPkTaD+ki7ZlSZ0g5M0R2+VarXrfxccYsDrkbKJ2/xJOSmLA6dgh/\"\n  b += \"aZuFmNRPq+dGGy4ZDkZRvluraUU9Ym75gfKl8ypfGr5FPI0vjvw9Bb0K7QUk25Zm2x5gVfmtPjZ\"\n  b += \"kgcJhsFTUUARZI/jMW8lwj4IVBFEGWJl0kxNr0G2DPArwA+46JprBVBkeBmAb6Ct+suVemAlj4F\"\n  b += \"0asTHH9xwUsVDulEY2+9zO3f2ndNbffculfKZJN6Pfznh8Xs2qDHGuyN36+7h1f+/AtY1f/suF+\"\n  b += \"BrvH2Qubfs/ypz6Hre7X57DVs+KwL0UZ5mcgm1Hs+YySfdwMh4uJD3/jUd8xlLivqOCIA+JVotb\"\n  b += \"uBXbrZZ5sLhaudPPJyCp3xkdIJDf/wsVSb0esfTKarG8no9FfDzCKc7VWmY2Z4tlr71VuE3ebiu\"\n  b += \"uvIx8CjzvmVpkV2X8Pd/2flf8pC9qrZGsK1dI53/9W9qgVJqd0NoyrtqQiMIO3vhHs5Ui4mdN/U\"\n  b += \"BSXVvoHzZ2orUIoMvH6P8JF26qY3ZnkjwRTF7KurIiWASE8SNZWlWEM6+vydrKYgULCR2X5XUXQ\"\n  b += \"KdhiRB4uog6cSG4pWAh7X8zD6BEu7trfppxdh2yTWjw+eva89HFv6OMHTkYfb/E5rsh3EpGSMsa\"\n  b += \"H2dZ91Ox1iPidJgAS/3PANe+KAso5O1gN/MEQzN5hJPKn8b2/bc7aUON7gvW4qQTNn4SuDZc9++\"\n  b += \"Gx9uyHs3rG+ehtvWHR8enjiIRaHwml+C8jofA9NBJ6CiKhlpFQYeFFf+Y3Zx2hGgm9pfRBVfYKj\"\n  b += \"5qzGKiLPaiVd4RhLyqErYOmUSIyCCyj+bAlXrqwknJNvDCdyrUAnT2Hs5N4uZZe1pwyiVpyQSve\"\n  b += \"jxJC50QNqXAdLCmf47KTUvnqtRpY3foRK6Ey7Sbr51uyUeYZoEM3E+1m4tUupZuz2Z1znfySrgy\"\n  b += \"DAQF35d1qUPyVpLSxvGANK95N9RUFhdXNYieJSqHJvpf6Vi2PUkIuwGDx46xz+MPnTAYoolFhs9\"\n  b += \"lJ7ut7uvv6pdS39unrl06kr+OSbZpbLi3K3p9oLT+zHnMRBtOnVsLgoxVfy6XPtU2rA8JfAHcCT\"\n  b += \"i8YYCIHIGiEKda+zTHrRL2zTtQ16/ioOTMLsrFYfj7XQNa5ynGxc3k0OAwC0LvdS5fUAl2KRhAs\"\n  b += \"GZ9sJcURl4RQEyUJFTfyMQL9GV+ZmYgliBBLGxmkLKIDsRxDAgV2dlqD0QmrMYO3aR/HlG1XkGM\"\n  b += \"6w8FPKg7z8p0Jk8CESWjCJD0mjC2SK9pW7JcxQMWdFSOQvbmtmBhWjBtGMWTi0nw9zv4sfT67c0\"\n  b += \"cXuM6HraBL6P7kqgviznKul7xsqCwAylhkOs9kNj+KUmWzEifg3r4wJfMk/jvvcE/YmUL08dR73\"\n  b += \"ecDdyjRx5VUwSpLQvjaFHVMs0bKFBIcpFCd80ZHdWTETizFZZK20G+bkoKAFNvLiVVqiIdIVYPH\"\n  b += \"1Ud1P23oLTDDeLCYjNAOvPCRVKG2jql0LKmWjsWV0rFEILKiDyPFdv1Kx2L0iEv8lD2yYtAWre8\"\n  b += \"CWMVd611G+Ba2GFoCDHhPVuAqfXg/BsOvJe9Ht8rPlO37kjEj/Fv0kh21P8/rS7a2DFwwuZLgcY\"\n  b += \"DZsK3VkXJEgbKv/f+Z+w6AKK6t4ZktgCzKqKioqCsaBQtgV6yDomIDBewRF1hwKQssC4oaQQV7w\"\n  b += \"Y5GDfYSezQxVrBrLMQWC4kl9oqKHeS/dXZ2ABWj7/vzHu6cmdvLueeeCoOMQIVFbGQGRW08ksHA\"\n  b += \"9QyWOwrnA44+KDocjbwuYUNDpdqS8HKggMEsSAQSpJnVP7uyqf5b9v+T+umCTbf8+IK9JCcLdhf\"\n  b += \"anNlyvGAvyU0L9joY4Qz5xxYs+Vrcgk23hDMyW8qbI47ziXUn2eXIfz44VfIU2HIUqT9YYRNYOZ\"\n  b += \"pt5LYNe+9HmhFyTLTLiPF5DRzDVcbXgGrJky2RLQlLXTJgsSfZ1qwqWYhFnUqXLbIJVYwhdDu2A\"\n  b += \"50ktQNNktqBvmGKtAONNrnkxR7huctyD0DQK1TEDwVaq7NM9BuNyuoINUmwRotC8MROo/0RWYcC\"\n  b += \"CZQYGQ6GR6KGFhHPQCaKdUKUVmDZMHQ0UpVjBVspk4d1dKURaauvx0rCxFAUGzZhD1emoAtYDZ0\"\n  b += \"EXZBRrI+CLkCrSHQ6CK43WehY8/MV0hcT7AKJMyzwh2jUzHkGtGszc54B9QKLdp6RxhLnGTtZk/\"\n  b += \"MM6C3kXzlySh6GmcCgXW50odfEqAZ5wmAROYvoMagD01k1gTrDEOLJXTfn2MkJC0+0YrIYrKQor\"\n  b += \"Bhszt0Vs8NQnDkuX0G8JnE7lPgVhDC9iO5AMNF+OV5aYNa+VTsOWH5GO/41tWOauQ68HJsnFuUv\"\n  b += \"m7rcluF4aAoaD02GVo1gk4jU7GWCsSJetiYlXsxWpa4yMDNTMJeDAmzsZJhG4cI6VuimzRJbWBY\"\n  b += \"bwhLjCZC2lGdpxswgtjQ0akV0xUls4GpmoQrwNNlc2C0q8TtqbsQKaDMrFa4YXuhnm4mKBWEDcj\"\n  b += \"5IKB3k7U6O9juKskgc9kMcSQxm7RxZaMvGJy3LAP+kZwDyXQGPhCL0W0XmNFINMUEgMVNiFSn2G\"\n  b += \"Ia9hvKWPRUdsMkLCmmNDeKkJjSyQiY08MjhdssclTBuDnT9uQbteHgkbZeZ+RrApweZvP+TBk37\"\n  b += \"/61B1Ct2UQ36zGX0+rOW0aX0r7KMPrNNdz+rTdu/TpuMggwDaQfCeNOYMQVTqzEPzAH8nFuElSU\"\n  b += \"EJwLcTDnybm+FfDQoiLd6e6xC10DNUBO8BmGcDie7YYEs8kClKeaSE4bc8Am7wHTddwP36T0C76\"\n  b += \"BYFqWMsigZzgbzCrFpDWehKpROzKFcKdGXxQZjdtgTh9jYRwHN0KC2WWlIusuQJ0i0hLEeKg6qR\"\n  b += \"HzIqSA/iPjtJYx7PutGJj7FoQcLFMLpiYwx2XeTqAj8niKTTRZdsvCygTF0GBgOg6wZSEHlKqni\"\n  b += \"P4dj8yJaA1GL3FuLj5GG+2WUNtwvK4o4xJ4DakPDvYnUNoEyg2DwHgZSg6QlHcK5F+KGTC9JQza\"\n  b += \"ztCGb2WIasoXFDZksyIe44q0koCEXVcbKlmNpDJ4vk5sqJFUybQ24tlsgF0hykx4i1guU451DOb\"\n  b += \"iCBaORtUyk3AorpGIqUJRK7LkNXrT5oYihPDQMRgmRI51HaHRt5koMe9qHYkIYdhPG2eyCiCo59\"\n  b += \"IaInS+p2XDooRfqTLDiuEaSuNzY6Ux4GQuZXKG0YEhc6Ln7AcYozz1T2ljgF9OhzrsNfKHEL/Jg\"\n  b += \"irLwhQK/uA1fVIIvcCBq/rTwgkSj/k14QWpZA19w4AUAuatyOkxITIFJcQ5ND0fPBiui3I2dPfD\"\n  b += \"QKUM0xovynqXJkoCCdUwqoyikWMkA6n4zRPRFGdW2Kj71NGhAKz6PCsQRl+4keMkdgqbp01CERj\"\n  b += \"77NPn8v2tYzspM2LDslZmihm1YlUka9mhNJmzYnlXkc390CYNN2eiRyo5xlMMDELLo18C7QA9kD\"\n  b += \"4f8I4Czc7wltj4Ej9Dyk7cSueXCYVX1oCnEZ2VfUcFO/61cJ1GxPwiHGwxKC0tAVsNQxot2f1lL\"\n  b += \"GGHQHlq3E74YLMVCbUHk3xYwRBwLQ1dY4EvwEiV8Zw+vphY4doHg9wE1wII64twMao8gKmSMgA8\"\n  b += \"aAAI1sQe2bCDsaOgJ6R6LvbWZHZcyFb2SCoxnwTuA4KdTJWglkMoIT7xQZRksrWzpxyvLYD9aGe\"\n  b += \"ZtG8xtuYXL5xa5cPVksWDCSWZyz4kNqbBjuc++UNLNWlyVWz9Z5ZovrXIEoB/lY0yHMQt5tbZUy\"\n  b += \"R4ay0I9eEw/bvRQT8DW3rZQx47B7qFZSEEicxbqHx97X1WzjRhbD6sJNWEYB8QxQv5ywOJCSvOT\"\n  b += \"qa4kSH+c9VJ04I/BOLvY7QT09wh+ZMidP7zpoiuwHLn2g8IPJlbk0I9gbpNHf+Qo4xjLX99CA6d\"\n  b += \"AR30IOgx3fNLWTBQfdCvZ8SPNJeFg/bwgklLE5kWBW2XQ3aACM34Qxxe5G0TmIpB/jwQRxN0goJ\"\n  b += \"UxE5HFTESYTtQ6UPwNwe9LiuRARZo5/8jxEYoOThrpSXJ0UupVTSNTtZNhbQgFigSKHa/aYLUVG\"\n  b += \"TdeLrCa0V6QHqbjzSJrFGP7iE/0t7Bx2AyIcA5F/Dd6dRe8tAl+TRBENP1FJzr7ZY149c0akVzU\"\n  b += \"hFz77xOCPMkK87H7E/Mxw0w3k/tdiTUhD2EBC4nPTNxdFCNMWbPXFBH5PHzes0/w14WPVpk0D9r\"\n  b += \"FijDulkISlFmVhkdF1gHcfA4RueU1957otMKeZgHYGdyPksFn9I/ghBnlgHFywnjoboW/7h5Nro\"\n  b += \"28zMgn7TjAhjVDVLgIAngmGUf5lCOt0uvu/PZkQkjAw8CdP0TBBCmR/sZEpNsTb6iYSOdIfDZIp\"\n  b += \"KNlQuOjEvLYCpPHNog8JgIcRAgnxoZtHO3BjqanAyHKE6Q0+TFU8yahZsiGeiGuefp/rJlS4X2x\"\n  b += \"5QYcVezDBhv7QZMLc0JCYSIksGsKXiEhJGTxJkLC36zY9qRUpbHk5IlSVOoYytMWnCmJ+f6QWYG\"\n  b += \"2spxGeIRXBuiEqCbRpuDwRqMGPQqz+JDk0lA0ox+t3BJXf/3/tvobX7X6eDPHnsQJhLlDTKgTyQ\"\n  b += \"jeZJB2HPQDIcdePeUboX0JuR46hYEJn2yJVjSvMADEOB3JReyQosRvSsElZ7J5oCZ4Q+NrQw8Jc\"\n  b += \"pFvdnACo/UpR4cqGhrEY+AiyWUViXKJ4aoTWcD4WqsweULnF+0CuK0xcce8Gzyv3U3w3PhCXryQ\"\n  b += \"8yvs6BGr8sBxQuMdjvV0iP8rKLJA2y+GrxHPs7HhyKzVCeaGxLIcUseIDoARYOAsQTszNOJ8jRg\"\n  b += \"jRP4xgOCoERNvUCVJ7ZVwtTiwiFxNvKxA9VPeEtsstMHqxuCpQRgWtchh1HPotuvRbMwMoovHDW\"\n  b += \"XlkM9GbLWEwxgAXFMgo/pXsUURlR3CuckQyyez5lSljRlV+dziC6nKMZiiUps47vwMuaOSm4OGy\"\n  b += \"wqPGvREIgfvcY8s8Lgo4LhYgLfd0bLnYEZuqRKPOVahqokNiME+eqAUtLSpd3M1kTxITBugRpfY\"\n  b += \"f5uZcQN17kYMGtiiDRrSD1ETipWHijLBQI7l0Pfth4iJxQhyOCmEsVfAoaYWWOoYvPRRgDTwbzl\"\n  b += \"4++qFw4djdf04zFDkwgonwswGtQExFSktg/RkvtUAHFtALTJOLijKogM5pEPfs6lDOi2rGANRkw\"\n  b += \"c8p2zHw7sZfVSMgaQ+Mrd1lI1xhLIlFj5bjBntCB4mjMYEAAq35bcR6uuO8WBGQ3rKD95DUOLk0\"\n  b += \"eBotFLFFBLlfjUHwIibNkMhUcFQRZntKVaMVzEHg+XyFJiTbIMPdyscNA6K3eUdoM62JxSmUym6\"\n  b += \"yGcwAx0mQ6ElWOTCfkqh0UUbMgqi+Q275xRG1MiwiBXg1EIqOCSlm5ASYV+V8AEcOSfkFHIU8AO\"\n  b += \"5wcGDH6rcHWfBpQqvZ4oLYDcVHf6THBadR+g+idAKDjVL5MUKwYkBFLj2lVRMJXQ25hI6iPiWyD\"\n  b += \"9fjpuAp3GLQDwi7y68G/eMJc5d5Ni5S01FUe5dCqkfiNy8mM5lufktA3txGSIyFCRkHBujJl4b5\"\n  b += \"JTkUiM/C5DMSraEXYb6GIioKp70kkPSSxUnsUWhun6ArEiE9+eh2Mt0cdx/qh/ohtUDsYVJmKBK\"\n  b += \"CJKrxAICyp7Rf+VdASYpV4E0DtDOkG6KGLHvCmyHjHjBinDY4XBAhToqvRD/AJo7zFNiE0EFWXd\"\n  b += \"KEvkXC4Bx2A8FcuSvILdnJOxSy7lnMnpbFx3mSsTKQEelElsDKOFM20GmGzzClMLprYQn+jI0+0\"\n  b += \"p8kCv5jJQD6CBX8ktYaOerBE/48FYig0J4oCuRLWNzmRuKgKxWcLMtIOLBqI10VW7qqgJ3FcbYn\"\n  b += \"EW6Kkf2912oqQgy3Cb+bwmRiPgnCuq7AfvnEwU5xqi1iPpSWf3XqRB63TWvMVIQUX3SjtpJYket\"\n  b += \"xskdRO4piNdr7GmLmysXWWogSrWquWdBD4abKqeX3lGo77Co2niHOYik+QxyeUp2HaBNYH3oyc5\"\n  b += \"RAZcBjvgD7eM4kQtBqhOAbOJYLK8DbQqHimYIAaqZ7lXBMlAZxSqHJKx0HouwgwM5sGCtZnbVWx\"\n  b += \"5mmttVJ40/gN3F4l6PZUvTeEqgLHKU2VKJJM+qhhPNBCiuIU64WWoBgPQSZHC7khNCCHWKJsS+J\"\n  b += \"ubL4VCnDHW7LSO+tBka6lRGVQ8UItWDaPOwrjg+iPlZDVuEbJGoSiUaLJH6FWsSbZGU6EIhuUFz\"\n  b += \"+AIdjmc9lTXVCN1xyKSqVTKpapVMqlolM6lW0RMC61Vhj9KI/DYPtIVRlBpyPLFKm0wSm1wmiU1\"\n  b += \"ehDoMFsQDPCfnCliBi2RFXQWrfsPBHaFk6VfiwbqsFbw9whmxwkJWpLNlbqcmN4F9kDH59cuIpA\"\n  b += \"X0JmSpmgzM+qBY8TIzozOUA8pcL4E7GMrB5+1BIp9b+6gzB/IiV3hB7M+S9xP7s5HQHEMmtsUg1\"\n  b += \"n1I6cwKmfhh4xES9p77UU7t/JAWIbrSkbsVMcvYJsOhxhRETMya6ybSMSt51Us+WfUvn1+1iX6F\"\n  b += \"2whztTEzGRQa4yh3Z8DdEBGzpg1vH8bnpRPLX7rnc9OpbbBlGJ+VTgOBZi8DFPkp5OgW2swrKSE\"\n  b += \"7SExYYRUmQshhj6gsFssTL+JciQIbRhKaFRwYapkXQiaJYYjxmkhU2mBMJxh4jjLOIY8c6tsimS\"\n  b += \"ZSeSJ8f5akIKx+co4I6UGvABJRSJS8BFYLNslAbHwFbofMCD2nYPY9cnmixsbNFmoW+VGxgLfK6\"\n  b += \"/boeEFxfrARqZnT0pJWeM+muAqv2+AKt9h8tEK9SfpFWEnEgAMr1rFiAw5sGOyo4EphZyb4Aenf\"\n  b += \"oadUFj8xWHWQfJNzy0hYECgZkijNoDOsGrICEPlaRkjaFNSYMJ/TjiPmM1qih+DzocNC6GESHtu\"\n  b += \"UXGEijtX/teKMxZlCxY/g86O0zM+ueKQ5qwZZfqVlMCLkzG8Rw2BfrRXD6WJADQd4myX1MJSAX0\"\n  b += \"GXybNZNU7A3VFQJo3ODAVQRp2IS8cRLh1DIl+IjkJq0CqnBq2YN/ceD5GIN4c6GYJMKehBhCPzo\"\n  b += \"AOWqk/wOWOwVA1QwSg8Fzpns5QI+RBmP0gC1aFUgr2TjGhKgCesKTEY+ZeGSwmyMlEcYRT4DW53\"\n  b += \"dIDWZIXAb9BdCTQ4qom4mSStI3XUa5YcmUMgOSnERw1wrAcnHOmhdk3sN6Q2urUINBaJp9MS2bB\"\n  b += \"Qkk0G6WoUn6EBxslOmJNUu2iCrA3iosFKOuAq2+AqW5IqW5pX6Yer7AF+kHaqUGcnXGcHXGcbXG\"\n  b += \"fLouv0EemIYcls0sIMYtH8Ji2DRE9yCKPq2A0I35CFlwzoH/DkbOJWhy+FIr/Aa4pajZk7RPSDw\"\n  b += \"r7As6wARX+G66ONmW4Wy/2hwLbWMnqhA6sUG0mbukWDoai+xzjxushfO6rQDXq4S8rOgL7kBiHi\"\n  b += \"DdyWuNHosokc4kGwDdRmg3psIAnJK0Ov6f0yHNGn1FLMkXI1eKRxCgqHZv4wAWLhvM+AOJErg23\"\n  b += \"koDkgcguTiO+v2DyQzxmbKaTKgQpPaganAhcfiTsnd6YS5SQhRq0MXuvsMPagVz0Zvt/J+IylGW\"\n  b += \"YO8twQlqoURoO247sewlJZIClXAIihwUiTU4ZFMLB5rJejoqojdr+lliOT0o1q5cYxjhZEcwRJF\"\n  b += \"6uCIbBYw7PxKHyrN5JuYkpDJjLAiKB2juj8lRF3lJj7UEYuY0ESPv1cBhSLT7ooOPzEmlsMUZfD\"\n  b += \"/tIRvwxGOya8GUDnrb2IyLo0mnHMZ1SWuhHJ4LM3ZRZfmVCdI2UmMYSPxGA+Eq4+bxNS4HlEixp\"\n  b += \"G7qxYj4ihHjTlRnj8CsQOtuXEQclM3CqWcJgUhOKxqkKtwLDePYM0ZTHRAZC2RI1RgT3SoxsrjW\"\n  b += \"Akx7p2TrJ7NshsOBE7ezexTukGIoFvYMOR9QR3QinYqZasprTKJazpD1NNWnI1otGACF8IqxyyW\"\n  b += \"LqJAvhAxxz3qGMOdG2B0YAWsGZaiLybSAsxE+ZNleH+YO8iClMtSFOIKFmyWH6LwhzBFzQmJ6kI\"\n  b += \"Bk3awJrpXYLs0pqSFCKiSW1ihLHcC4ti6elpezLM6enkPRkmevr67gxCTz8Cr0309Gql6XQ1Z0X\"\n  b += \"bQ6lXEQ69OUK2QM+DggYyvLTCI17wOSgEQRJ8Z5JqAqTyNbRFrDAbGy130KqtFogSobqemEhAcp\"\n  b += \"05MqqdIlolMm6O4MAiHNtbYlYrn9gNB8BEznWQA314TkOVCESoI14Mi0R5ntAbJFQ9I/GoGBoWi\"\n  b += \"TU51CByYZQHsjAjJd5csEM/NQl2Ts83JA2zFKRh8FqWlkzYG/B9bUJoEfEYde6nQPF7ifUUZKB9\"\n  b += \"cW2LpxZfG6rGCdf7dWrL+p/WljflC2rrZ35rlfKl7ElMYxr1iyMhjek+YIhje4E5Rde2ebmMUC4\"\n  b += \"jlMtKyi3SYX6hcqOLZCyqyd6noyMTRkfmIcco4OS0AxQF4MjQMjI6Mri6sbtGhRAnmr/1FziH4A\"\n  b += \"DVBRXyarDKky0RnY2ecWxzSEIJZ7NG7B8Ds0ohGUTi7tgTjhCJuyPgChqHR0b6q+D3bM7E5sP0C\"\n  b += \"YVquMF+vRpOCjWc/EY1ZAs1ZEtqCJXcCu9lZzJmM/i5C0PGL76aiTWd6BN0UncfzBqsJ1ioB18C\"\n  b += \"06/heoR9ZF6PXFKP3LQA+WlXM7FYjz6hvVNEJZKdaj5ccslwyYXhkvNrAQrENZAn2JNHpCdDzTe\"\n  b += \"SmH2KtMdkRqxchwg1dEYgDjtPk6pxUsiRgCyX0cJBgfnFjGqg+ZSQSB+KEs2FggSalGzWXgINx5\"\n  b += \"poOCgZgy0VPAF4Eoa2iSKViSg1FlJqSH9B5SmI2yATqht2ZCwj8WIANQcPMipYw3uURlgWKT5/r\"\n  b += \"f7OvZzJFIX0RAJODpGu5jw4PFVcyQSnX6nJqfcLN/krFX1p0oFCRVPVOjndhAwM2I68KVm0ZrOg\"\n  b += \"ru8kMDEnWaJPlS1D8bs8mBYMNsekT1b0Cf/IYYB39C+xZYIgwz2FssAtcjwPkk59pR5pJFf568S\"\n  b += \"dGCso/qCYq6bArDCIay4KzMoRdg9SxEKhVOFRgw2wueMKem8fKqnB7WtXMBhXkM6a8eWgrJxIwk\"\n  b += \"3MOYYw58T2cJxYMi6Sh6ezmHHAmkvirTBDk3v+2aWTIDbmpWNpe+Q3Zewho2PuIEt5eUPMo9tiG\"\n  b += \"xV6D4YXUeS2hMQNLXEUBzAPYi3pRB7LHyHtzVQRNKXt6RBie5iq3A2ZWJyGGQRykShC9l8Kv/l5\"\n  b += \"hQ8xcyxA5HwTWDM5H4nZSnwHKIkiihIZeTBU0CV4ise1kOIHFnmoUr78RGQ9QJaQHHlzbMiU4n7\"\n  b += \"Ddzg5jBBoCjdrFyYYbaPtOwAbctNQgPZmUkLB/lscKtAkIxScjrA4lA/6DiZZjZj7XUwOqLD4RS\"\n  b += \"Fo1JRI2AIFOVC7F51wKDIVjezJ8qPCyshkLDrcEsLwxY3HxsD0Hscra8qkLtJMbvh9MS9XMEAht\"\n  b += \"iFIORhJcijbVi0jXcSB6HAXEQoEqeVEzI/tYP2IhoqcGsAix1EIxUN3TsSYpwoKry3nskkgC+Rv\"\n  b += \"bj4rBLPIoFEnryPs3dfkJoK4AJPEIuyMFZjDTF69PmdsexC5OCAyOpNA9sX6F5KJ/QvJRP6FYOm\"\n  b += \"wsJWFYlomgbUMPcA+O3Mufd7LrAdK7AF23KErB2fPPD+jFPYAu2vHsp3nj70+1hNxEz2uvb//fN\"\n  b += \"vUSYdXJ0K0LfN4mvLu0fbf98yFMLiIeGxasejcnMPX1tWEtsEyj5y0PQfvTt89tSJiPXjcfnbs3\"\n  b += \"62LZ8zwxqHFiOP1fXIhkmUfMpJqfHNBrtSFkOZq8GQRjwQBBWxPjJGhPZ4zmvn2MRsnwegaSLNA\"\n  b += \"wSf/RQztaJFuRRXpJipS9vEiLQoX2aGoIjuIipR/vEgrU5Gfv4T+KskS6s9IqAoHuKBssIm5QxG\"\n  b += \"YvzPhTXHPFCYNDVsVv/NOJsN/x0+7C9q7wgIiPXlxuhNWOCALcjaHgraQezTRoBYcnMrRriLuM6\"\n  b += \"hJfG1hi7qJ3V6hCwL1DknehVHawVxLXIzmiLoNuDP0hpdiB1GUaR6py6Bg9lbimNNCoDyR9TxCQ\"\n  b += \"ggngZFwICrhJlU67G8fRy79lJP8h4rPcJIPHTJ+/zlmaujAg1JWMIqfsD5Djg5zKNQfoX8kJgGL\"\n  b += \"kXeL4DMOZELxBKfCggs1fsoRnrCo1yIaPESARm85BJJzDbGoDUrmjiFYNUAwVCYKwMj6CCw55Ey\"\n  b += \"RW4xtgCCMWcRF0x+dyWmEViGhP6SEZhVMx+TModKmQmTmSaSHBMhMpO3WQERkYoc3WAoFGUSIb9\"\n  b += \"K7iHX33xaduzAYRK9jI7kEI2IP5EMuPc2tXInQ3V/CdrCXKAhxEv0gqyLVg7AnpwOW9DrgR059u\"\n  b += \"2LdQNqFcY+VaIXaF5vGnqSBaGKRHK0lM7s1fsVNgCysuGdKc/4vYkdws2VViIRZ9GXDTfpFZEOO\"\n  b += \"cKKZrTWOHoQFg2AEyXbGMhu5yLcCw+duxuwThmxbqLJKNm4fAdWSExXPHvI1pkAqI4lIVU7GPcY\"\n  b += \"uHqCnKpQBU3RYz0GOHclDSzNG1b2w6sCnPfUVo+Pd33ydq6FdbFGrO30JuURBaaB0cdsKi5tPoo\"\n  b += \"K+XowQLB7L7M1EdRjHEfKWKneyWL1QgXxUm0mJ7UpcnNy8OLmkuD7YAvYBS9ESDjLGmHRMMJiK0\"\n  b += \"A34F4MY+2RQMAcjIwTSIu+Ki7xrXuRd8yLvmhd517zIu2yJO60w77RC0un/tMJvFLvCvQpxsQSq\"\n  b += \"Gek7k4uBrIiLAaWasQoQRbrmfiekcXxgkIafMxi+tMhPxDX4wlbkJ+JP+KJMIT8Rg3DYxelKpLu\"\n  b += \"PnUC/+QskrcOnXxJC2XKnZIK+CUV1QjQiQTXWCQ4eOm/gTwdAP2NFMP4QQ8I+Ib0I8NiFeO0gJz\"\n  b += \"Gkg5FcspMjiz9x75SYqEM3/k5qtsiGXtqQCRuatDFTaOjBL2noYDEXjjq6Z0n9CkcsIPBUdBDsb\"\n  b += \"agnGcqfxEQKjAJ8Gcuk/xbE26pukkMI+1KaRAz9GHoxJQJvuNLkSO8aiwzkxBIOcSmLLmrulxTV\"\n  b += \"VXJowI06XSbYOFP7GaEgmagg2acKmvglBRXduZlfb5wmf72iXn1JUZ2RTSh0Ecq9UtYkwefBfQC\"\n  b += \"FGlS3gDgNU8MMVmMHVW10lEGbJ1kyoYxbM9WKHPDUrzVzU75s5oixQFHXMQW6jhGtLlBWEdcw1n\"\n  b += \"QN64gF0JDDT1wsQDUh+KPEtA+LOfxIHZTogWI/PlAHCxoiyCkxwIktb3diHxJkuhoyLDdeSRlAC\"\n  b += \"hEDyEbwDYjRY1FjNEn+lQZ7x5cVVCKmhAJfNQlvQsyQ6GI6pArPmpV41j4+ZWozUwp0r4NWI0iA\"\n  b += \"gQiqbjhES1LSIYj3sQMRe6SDQ2wJuLIy7LoQqxjgC5o9drVq5rsQjSIesy02OLwoxsgmiyuI0l3\"\n  b += \"Z6zbkDknM3vi00vw9cFupCkcDdt5U0HX7jxWUWllS0LHKfFplSUGFDWUcCREL/ZbPx0YyMG6YhI\"\n  b += \"jF+kyIiLVStYaMPGLGp+jAXbTg2VjInAOLn0VOeeUqc30KwgKHHra9ROeXTOSxXobYcR/VcpLh1\"\n  b += \"UC1nbqYTyYh0/FNHBn4mAUnuygEJ7toCj6G5txHcjmXMzJ6O8fkzid1rxRIyQvfx5fIS9awtZup\"\n  b += \"ReqGzZnmDSPODpAX7syxRyFqgc620TPSvJd14K/jWUC7kr+FAaQni77gYMTovRq79mNVnai5v1g\"\n  b += \"rnBDx3AdsKFBTYeJtKIiDQLAQ0hQU13gWW0gqq/9EKQuFUj7alEcfLWS+UIiruVhSQe0urQqJXP\"\n  b += \"GyaUtGFUClmY/PMpldNZlwuId6mt3eEDbauRzQUTX57SsEyo44KOAZwduKAnt0xHfscTJ6f+uId\"\n  b += \"qSM+L0WkW2IYY9INd5E3SHneKiEY0gObqUCR+8Xl3FUXAYUP7LEaAf7fMDWY2YiBHuJCIET8xFU\"\n  b += \"nVC4JBmRy32ZHIIePYJmA41GJyeWY5xajqPRybEVHdJHwDpA9mHETy5i0LSV8pa4U0rqOpeaiih\"\n  b += \"EC6UK9g1A+Ee9sIiJuLiWWERRuyYaa5HbLCd66WBLe+MESL9ccFdt4u0wtcGdkWxZbAcGNzK6Xf\"\n  b += \"Aq4n3HJowbiC3qQdbmn0BOwhoXoaAfAV3BFHL4J5fJGdxM5HFzDmtrAn6nnEbodGGPXPTloFzVn\"\n  b += \"op/wEdHlpsKObFPlJ/PV/50W6aK27JL3Ja94rYckqu8iyuLn3QCaQannRRrBiNvJeLyFovL2yX7\"\n  b += \"SHlJ65Hy786fMz9W3lJxeXtlKh6NFRigNwoanhQD8Fprgxii/JZTmUgNHDJEk6B1EXq6jp9ULYk\"\n  b += \"CuaBlIVckYuYMWNxVBXeCoEolQOYizY920hVPIo4quJVKOXFUxVBfTHBqVsL7trDki8++oujsK8\"\n  b += \"yyt2HMDE/Jrpd6nxa+mxmb0sxfhjI8KLsMXcDDyFUZbUbwTxhhvFA0Tvy/yQgJyoSZDx3lSr65B\"\n  b += \"GbfujBXMvlyEbzHzoQzYzJAMDFjYHRH6hfG3PWrlCujag1Pw9HEAwIyaK0vJ8qKxMUOi9BbbxSd\"\n  b += \"BLkvxVo3XEdVG5PiA8V347BLfQ+2NwmGKX5FdK6xYkMbk2IDzTy2cOax0sxYb6EVjizIxXdgqL4\"\n  b += \"3uhUiKnp0DLz4dHZkqxIBCRwyoxqCGCtKDy3kz4Nq5ZOglkgolspGiIaqMUVJxCWuoHhvOrURsw\"\n  b += \"PfKRAWKsGxX5i4U7lhO+vrDLaPY80c3SNDBpOje+TgfohUG94G9ZIyXRbfEKEV7BqWftogfGKxZ\"\n  b += \"jKrZsQeg7lZ4HhrYr5bsc2HoOzDEs1VmPqqkm7RZlCsVQTVLvZwK8OhTiEhzzNd0CwxXxrBSdUC\"\n  b += \"3UWw6IULE/w/CEhAeCdBB7Bz2GTg800rUV3WETAq4z1ZhJqBTMr0hTJ0HMMH/tBE6pyN4deuPcT\"\n  b += \"isK6AepTyTLBDsTBugxKJ9edBY5+JFiZq8xPpz5qnd2OExcjNtyS+p08jl3HcAgqfkdsSJX1LPE\"\n  b += \"ucCH1wJvTBkKEzm28Ig1ODNbO75LFXbnSvWrsImr5wNdEdDxlRcm6CBWUJ22ehalZUhmOSDMdRh\"\n  b += \"kYMtlR6wqpaiGKYwT1FfHKrTV5c0ASLUyCecnPiu8CGtxqOMTtSC4WAFWF5IkBBjkwEMKJsluJs\"\n  b += \"luJsluJslpJsNuJsNuJsNuJsNpJsnDgbJ87GibNxw+mpwz21gNFeW7OzK+P7wnV7csHZCJHpdpm\"\n  b += \"wRcC3LTK6feRrZTj7E5L9pg3OvsWGZN8As69kxdnTWSF7Ggvn8eMb5rx0w4BNSMhRNMd35HDzId\"\n  b += \"7IFnkYdw6DRELC3UYglFlCY0hRtnzzbD8pzLLlmWWrVTTOFtO8qvrEvs/GdOvJIERHPVRLDiQnO\"\n  b += \"sMQeyoXcSS9howNdCIEDiN3xkZNjUyRHzh70C6ZCp0yRektYPKCnExYzY+SAg1NLf4MyrgulqwT\"\n  b += \"kQOD9wSkZBgoGwBJHBm0C1yIIpJYrZGhGqKkXdfgVr+O9nRd6o3jMEu4K9xRSy7dsjQOxYuRM0A\"\n  b += \"aTaljEMS+Mgu94c5YCXIqtdzTnSlF5QmuIjEUdtSBY10L7n8RMtykpGSpiynAikhrklhlER1UZJ\"\n  b += \"GFA6GQ5FnmGpzHWHFyZFeVxdLxlqgQoAMTWT/YYCWYa8IJ6AZxqw1xOQlxq43JZR8rBM1VqEn8Z\"\n  b += \"RlYXMK1DSGrmdCRn4rbYoEvyKDwJDm9qTUxub8yizOH+Q7Q0xUNNQcHieFegEmQlj8NBuwuVXT5\"\n  b += \"qPF2uPGIJWRHG4+Y8xxR38TzBJZQocIzlmQW2/jGxdBiIleOgp9qTNR/1kwtNM2U8+efMFJq3OR\"\n  b += \"JEZR26zKxqUCRFtA0cX8qC/f20LXie+uKohcpCNbLccZIL8eZvyXCeccyj7CEZ+mCz3icPIPgyA\"\n  b += \"wZnzzJlHznQ/PkbqT063Kc/LqcXylK/uaxkNwVK1uT9BmWpHhL/pAo/aVnnyw+ebIpecZbIblaQ\"\n  b += \"EmE10picjtFEAxaXAKZ8RMJlDRBzWISAKL9E0UIaLxxyXYP7FjDomlgcucU08A/WaBRprIqKLn6\"\n  b += \"lFC+2D6lyz7VJxua4PMbuNKiJN25JWc+sUnOI20mheBwiW4SOMrImSty0gd2vFIwzLTnr2N/SBI\"\n  b += \"xhnMhYlzk1tyMBG9Y3K7Kle4qSEk0KGZPzZXuKSFxEUt+u3RHwcQNi9tP56X76WNFz5XuJpi4rp\"\n  b += \"naPBirFthYGV1ORFctSrhQgRc2ArIS3NSgw5+SBjz0qmfgZQayDsMc6Xv4RvWdBLHN3Qj9EUHWB\"\n  b += \"AN5EASlVRHbs8PMciPR6lU1kJ6RxBAECR3SfsqE13IhooyTVA0NO+cyM/7iplkgfP55sXlQRz0E\"\n  b += \"1o6HwNQxKZSgp8+rOhVU/dEOJd8075B0+PbcyoRHrGT4BL3Cjcin7gYPFjp+SOzmyFRFxxK4wqA\"\n  b += \"OX3cnC8SdP59sWiDULzjmTsAO89Y4oTV/a5JZujSEmVksjGETzWz9GVM4N7ZoDCNZQ9+Z1ZRbRE\"\n  b += \"3Qp1Ndc1diDPFqh4MR71Ng4ru2kC5dJk5Hgxb/ymKGZu1PlHefFcqrxRBXyPyYGLK28ZomLlPgG\"\n  b += \"NQB+TcirQLOg6HSVpk5EqqajAbfPBl/pgh0BVIie1w1HhI1f0s0STuXH4ACTXh04DCEOJEbn5wi\"\n  b += \"wgumRHXQhDNkwsFtSpRs0gohWT0k9wBDjxPCJ/6QKOk9SdK0yTQpfOJviZP+PI4VV36PoMV7gNS\"\n  b += \"YIKo8/RAr7ojQ25WiRDnLzRMJvT0kSpS64pBZhWkK0jIFf0uULGNFMRUmizD7pTXFVLhSlOiNKV\"\n  b += \"F1Bkk2UYQWtIZwOBh4jy5bhlFVA4vMzCRFbK8BW8viKKc8xELH1ghV4Bs2NuNS1SNYkaNeOzgss\"\n  b += \"nu0ACCBKnx2msBqUzkgEynCZeVOKEijcDlqFkYbcZZD3TiZR/uJjvLRankKeEz0x8jB0WxYcqWr\"\n  b += \"Dp4djmaDMle65hrScROtuO3SFQcTORWx3s5L15uQULLacqWrTahWtNbmStea0Hyhh9ulK61wD89\"\n  b += \"L15lQlWiV5UpXWeGq5krXWOGqtktXGEziUNT6QqvL4mMfVR/7aP+xj5UwRhdpWMjCqcQQLqS5St\"\n  b += \"XHE8z7VIL5SoLyk3aT0xU5GOK37BaxYAExMhTsD37n2KMmzYA9GPCE1hngEcl6eRbtQUiFF0N61\"\n  b += \"MSR35HGwqPJAN0quO7I4XYOBJRcd1UF4uNbhvV7bFBQclWVwmOERggc8jUYHPGI8JtZIdgT4eyX\"\n  b += \"wwUSbSFUmr20NFSWDE+FiJ1spkKpqoYxgSc2yZPoeBeTlfCfy+JBIAwheM5WZkzSc8Ldw1yOQtW\"\n  b += \"Yi3QqU/zjyBJqG0tsVKqKjIm/wqI4I5A7BLoPsFllOETx4eDfGp2rkpSFDk4HzLrhJwFSn1dJAq\"\n  b += \"fSj3PgxzKSj5WLO2eFbMd+hNMryYZcRaSVxqE1SGR42Gf4hF5jXgROd6xykenQa3G6ezZFpkOvx\"\n  b += \"enSii4vTVReJZE9jtitVCWy4qTvy5K75SkZnebyaLYaYgmIO2Rex5DBwt6dsFRU4SSrDVcfh5LB\"\n  b += \"EEtQ2BUeo7IhcwmODw2ZNcQmVIiYJuVJbDS0V1lM95Yn+cJEjasgrhZrFnC+qFDxWyiJ32VJ6nK\"\n  b += \"WWbXA/GayjEldHcJF5ZKk0N+XlUnmqrJFY2R0RJRzuAEl80CXG4BzV2cwpPV29I5LxsGGjgN+KU\"\n  b += \"NWKqpSDGE+0qccJR4s8eiXETMJwlRipkIYnRpRF8vgMYKjxK1SwgRiCfUDC6EVJIsvKgOZsAtVc\"\n  b += \"ujMEL0QsyHETVCQJvAZ0uxqGRk3OGiiKvH0lC9CqItjIyt4WQzY0jCLuN3dyWdwCYnhFfECpI7h\"\n  b += \"lRgyCdNwZFvCOEVrjV64yMIDwI9KTwqoEUAyXcKZSIFJMpTLGk+2molRqUgj5TFCfnQkCGMCWxt\"\n  b += \"mmjPuCrjzQlw17SE4eMry6Q8JHUVSVJF3sGFUGGwmE4RAZUQrZScGneXCV2uq2uWO2oArWiCDyV\"\n  b += \"j+2DxAvNjBiTZ9O6YQAQctRcB1GQD4dLBwwaAAUsCaxHdJDFNZQv43OFVwbRu5qXJRvkvi4lNkJ\"\n  b += \"J+CHxEjPLL00cbsMR6dedCODHOuwE56C15ULcvg6rESbXdR8XmsygpvDz/6UIE+eNKHLrC9LPe3\"\n  b += \"Av9mK+gHnu6t31jUJYCIyG84+gWHGf4dEQYnmkS7UlnA3gfjQUhmMRiLf/zx26u4PO4o+c0iqdp\"\n  b += \"hcKkF/n2jxL9TLVRKeBsG/3LjWdA9j0OTT/12/PD+59UhIPhqhoDghhksK4/ct0vvPFmx/u0HuE\"\n  b += \"U8Tr96Mn79zQOLdiZC6Ma8D/cvbco6sjZRBVVx4J9qyxyZK1i6SRmMKl+uiY3VGoy6KL06RKOL0\"\n  b += \"Aa7q7XBoVqXYVpd6DCjum1bdaw2IoSCDdWNXA1xscYg12ZNggJbBLq1CnRzCwrUalq2aNY0JCSw\"\n  b += \"RUttCy340qxxo6DAlpqQpoGuEbpAg8aQ4KqJiIgKco01BLkGRUVEaINglbGugUaDVuuqjwrWuhh\"\n  b += \"iGTeGYwaBWY6XMUwp8Fu4bbrgEeo26o68D9/Ry28ATT+y2PSgPpcIrd7JGfYkONaIAZpvlQXDKM\"\n  b += \"EvhZ0UDFNRBGsJ/HljhHphGihROfPluH1BYBC0weqh3tGwMHf3OP1wgybayXmoGhStUQ/tFaXXD\"\n  b += \"lXHayLitDRpH21sXIRRmlSvHuppMJCkDMMy+D/4C4aCAdUxCtGfknyDfxaMKb0VuJOA65XqsiN8\"\n  b += \"A4NSfBj0oUC2cq+v8tKyUlaXWjXp+sMSZ981j2PhvIGZhJMESTDGGqS/A6pyZUzwPQncjcG9prC\"\n  b += \"PBPYHf2VE8EDJ9wDJ92DJd53ku17yPVbyfYTk+w+S7xMk36dKvqdKvs+TfF8k+f6T5PtKyfd1ku\"\n  b += \"+bJN9/kXzfKfm+V/L9kOT7SQl8TgJfkcA3JPA9CfxUAr+SwPkSWMGaw9YS2JY1b38FyXcHCVxHA\"\n  b += \"jsDmBfBDQBsL4K7StJ3l6T3B3BlETwUwC4iOISFO9gEx0u+jwFwYxE8VlL/VEn9MyT1zwNwBxG8\"\n  b += \"EMA1RPCPkvatBHBzEbwGwFVE8DZJeXsB7CGCj0m+n5J8z5LUd1kCZ0vSX5P094Gk/CcsxgEUfgb\"\n  b += \"gaiL4jQSuDvBHZxFcU2be33oALi2ebwC3EcGuAG4tgpvKzOsHdLxZe9vJzPvHA7ipCO4kMx/frh\"\n  b += \"K4G4A7ieCeEvzXRwIHStofDOBWYvwlaW+8pD0jJe1NkZmvr0mS8ZspM5+PWTLz9TpHkn6BpL7tA\"\n  b += \"PYVwfsk7TshKT8LwA1E8HnSXo3aGBcdoVVHhahjdSO16mArDpyLDDPaikOnkEbdSRcbHaFJUOsi\"\n  b += \"QbpIrd6oQYetQWuMM+jBKQjOO63BEGVQx+m1I6IB7aANjkj474RIrNGg04eiM203aEt3eKZZYZx\"\n  b += \"kIzpRS4tOTJ0eHLm6YHzwuqsbqGl71ABXlOIYW5CmPfhVidICkiPUOEzNDJZ8dx0WFal11YyMM2\"\n  b += \"jjAH3h6hKkMYRGuRq0oTrQsgTUxFCdcVhcoEtQVGTDRtqgoOaNW7UKDmylDWrZuIlrtEYH29/Qz\"\n  b += \"aVRcxc3lDwwIrZR44AmLRu5hhhQv0aDugIJRQDnJDoqIkEfFanTRKiDtaGA9lIbo6LUwwDN8l9b\"\n  b += \"A6o2GoMaNnYBzUGJYVWoDdbWHNMf4huwHiBVROHTAK4rgkMk30PJdzoPH6NPwArRGAxgCYFFRsa\"\n  b += \"7qU5v1Br0oKdo7QCaDcJgpuL0Bq0maJgmEKzJIECzuYO5ywZ11gN1ePiBMempiVYP08Sqg3UhIS\"\n  b += \"CH3gjGKto4DNITHLh2Qpz1TahgTbwuVGNElHBLUA+kf4LAXzlEqeH/SkIW2oooQLjTykqoxM8Z1\"\n  b += \"w8wUBlM31XOvPstuf9L7z2PnnpPWxilPLxhwNba9r3iIgO1BnVUnDFWF4y2eLRBF6lVh+i0EcEu\"\n  b += \"fdH6F71Ra/H+dhliwyFcSvsG21j+K+yJQquQEK2poL5+8EwhlHgnbZAhAVHhvsM0Bq3wPRH8dYS\"\n  b += \"0HoGTCOzRwzfA16tLAPht1Bjsry6NA/r37OTu25Vv2LhZ8wBf337+AX28A3r59wgQ8sLzXVzWAh\"\n  b += \"bj1yBNtCZIZwRrNV5rCImIGv7fF1O8FvwCRBQQYoiKDNCBdR6g18YCtAT7nlKaY4aAeptJ1tJXr\"\n  b += \"FY7wqjVw8ryQF1+pC6INz+1fjqj+xRAQuogsCmNWrVBow+OilQP9QHYY6i7OqkM5Ax9g3VBsNPa\"\n  b += \"MhjXVAeNrAl+i22Phy5eY0CNgouc4E53NWfLIZqwHfiFe4qW11RmOjc+tr+CtaA3ABuDczFYHZh\"\n  b += \"g1AKsE6WvawTICqImcCkMNUTFRdN9w1QQ7Vt4M60kgiFtg09aMCRxQUZ1R130MHBvBZOjHg7GRt\"\n  b += \"2EFhPLZIH2QtxaWbL/SE6fuMAIXVB3bYKvluRtJDSB4TiOcRSlBYNSKE0bDu9v2pKoyEidEX6Sp\"\n  b += \"BzK4fmtIupHVdHZaYY1AEEQbQADRugDBxF+gzi5OoPp5xLcsr8FGo/URLuCJhrQ4VcA+jcUtMmT\"\n  b += \"3B06gvqiIhnUZ9p2uO58tTFxYMq1PcH3rpp4bQ90hvmCZdFDB0auk2mZ8PqEXlFG37jo6CgwtcF\"\n  b += \"eeKD8NKGecMUAegDNDS27FvgjSToCREfTkFceUVERQjamtijfd6Z8/saQlkKiOqI0cP14RTHQ5F\"\n  b += \"t452zKh4k9d/QTq44EHQOzaVTr4BzEoW9ObnCjOfuV49Be0ZTD62o8+KX75r9PkEEzPADgKTAZf\"\n  b += \"gYd3tqxwwDdFA6fNOoIgEfAAUZxcjqouwe5KyGOTURULMA5oNXxUeEgt0EbFGeI1cVrwZoH9CjY\"\n  b += \"vkZDVAIkUSMAvghOUAicFbqe+ZzVGYzqvt23Otmiy+PTRSf7OicoRHgBgDoC/weUZWOXxjgHOOA\"\n  b += \"RMcdcAvV9D28TZAWUZLd9laZFGbSgYc3IKASCeQ6HLYu145jBoD07ICehaN6hPlgLuYeIWWdABF\"\n  b += \"SsiyY2wKANcXLGjEGIsUg5q5kS8+y+AUGPJ9m3AscMgH0iVDy9jXRCx5BfVFRXQMB3AqhfFwTOL\"\n  b += \"E+IfACO8NRHxYUOQ/RNrN8wLT20dLECza8OAWvYOAySwdqQEF2QDp4NcF8EavFooUMJ71aIvZ6A\"\n  b += \"dkCKxlcXqtcY4b6IRaWD/AAno50dTFsRjEtg2lTkmPogD2gQONRgiwBGMM/ORIM0VU2Y45su4R8\"\n  b += \"rfvH6ZdqSmyHc5e2++Q0uBm24TpXwDW4fa5r7j1EU33KTXaqE98Z5ctJS+KIEzmBMN7ef16PW/l\"\n  b += \"5Q4Lv1Q8HP1Wu/2vIq/axb6P5yKS+Suw8P/mtD946/rqnafdGdxFYPyrJVvnTf0rrpvo2MCo6Li\"\n  b += \"IuFyz0UkXJwpYMbUlzzpu7uPfn+Xx0fg+tmVAC5dlfGfH9Ibdf+H+DkiMr/f+JkyypfByfTcujc\"\n  b += \"thdRrR1KeCvmRZSmx1e6WYC+N3FpKj6VQfuqckjCkaHE8peOZF/AdkOuoSfkOBMYcuG6iKiorpA\"\n  b += \"7qIvVgBucofCYOdUDuDbC2QX1x0UXG6AH0+nk/KWkUqwxGHPDEvRBrpHRsfifAECPxkFWxJ9VMX\"\n  b += \"0xhHAQimqPHlwxRO2JBSOK5o3mDSB5vUR9hJzE7v/hFmrW7ChAOoO2TnLA1JuScOZLsA98onSxU\"\n  b += \"XpPyCnyGwZJOR9AG7u7gyMwKA5cA+P0iF0EiUdw0VWHRQWq4X5X41H6r2vIiGqMBjU2bOTS0py+\"\n  b += \"61EN45JtRFoC+0cp7p7wXBXtBW/0y9/YDSjOuRWDNHp9lNGMZNUExcTpwLkbCfoExWE3qpHr9X+\"\n  b += \"ehFjX4ZrYSFcXF9c4fSy9nLiiekAvbKrja1Al5tsKQn1Eg9H7G27uW9Xx5rYnV8/hwzTgv/bC+z\"\n  b += \"mE/UHhSwwyuhbgaxL4X5Leo4evX4BP9wAv3wCvXp29enn5DUCv+nr28eo8IKAz79UDwXyXLn0C/\"\n  b += \"Ab4eAb09PLtyft17Ipzenv18gvo5e0Hcgd06ePt7yN57d0roKN/n76e6LUH3ynAs1dH705evbqg\"\n  b += \"F77+HTt6+voW3uHRRoO6Zlu129dDMWD0tZpINJhN1BwSMywgawP+R9+NZPG4UHiUBJ5E4MJNBmt\"\n  b += \"e3Q402ZR2miQvFKeVRayGz2MT03w7iNitcJ16VCNNN71YhBmrBfRysAlzm9o0rtg89dAJidENyB\"\n  b += \"0bF6k1BGiCg3UwFTgqwVGhiYh1CdUanZxxx2mZL8nhS+GfyDhTeAOpk8JqVmAVJ9F3h1nzPEfY4\"\n  b += \"hQuvsFSgXeEYLzvhjiSPpD6KexP2CgU3kcOAEb07tRnrBWa9s9i09aLigiGGh9u6tGjBaBhI1E9\"\n  b += \"/5Dxo3AA2dsUHkpgnR7OI8BDkLPVtp1aGxltTBClc2Mxoi9uLRSecVPeziye889d2zRfX5Cviai\"\n  b += \"c90xx44DXOk1nReoL1ASr9UQkEKIGFej12ohYdYQ2xKj2q80xDqKyo1lMIFM4gYxbSRB+HxG+9y\"\n  b += \"Vrlpb3SLJGHkvgJwT+3DH6ivRVFFzObt9x6LxykOO1S+HycixGpXAU6Fx9ERwmgYMVOH1JLrI0r\"\n  b += \"5ecsh/1wYj2EZU7iHz7X7PgnOqYs+C+IiYBTxiPrAV19CYqEhUJntAYjXALIt6/JiIoLgKy/yFz\"\n  b += \"xKCN1MB7igHzrjXqYF08IBbREh+pNUSJyoN4p6oI3s9imudz1xjN14vsfQqXAXC9IvdhaJzGEOw\"\n  b += \"SGAfwgW6kFmICjJqcggFFGaHTiwhydZ066prDo8K1AXHRAZoQKCQargHnhz7UmdZTm4w5hceRei\"\n  b += \"mcxuILLYXnSdo5jqgkUXgCYSVTOEbyPY4x3/Nfmx70E+EHf0wcJ50FxHFWKdqCNZIer/3ESOMTO\"\n  b += \"FiLfsG5KzrEhTLWFXs64jIAYR6kBbA4M827/v8MK4GGxA6LMoINcswZC/Eqk90BrzxgleC5IMkg\"\n  b += \"M8VYN5byveG1yAgT0Lz9mOJUJ53w8RWsMWrw4WU2iDT/AHLyUDiMCKsoHAL+WsIVFB1q0KDWaUL\"\n  b += \"BLhW+/0Hqp/A+CbyBUAwUziPsGgq/YbDyV0mwqkyUv1Wxa6CY6/JXRHPi6/us+vgK/nOxJzloTy\"\n  b += \"FeAsPQfOOYzxNkVrTxzU+d+MvglwXxC0PzKo3IXNba7ug87wpd7ma9OBW2KadD7tWaJ/WnH8e9V\"\n  b += \"y3lh7PlYhzv2lyYs2HXjHz7hCpBjtNOf2fZr3zAgL/n9u7g49x/Q++MAczG9tMcyoQtt/LJa7dH\"\n  b += \"lV8AR7dUvIyxOaRich/u6n/Ut19a1wDPfn2iffufHh75qO/yBVUsB8+5lfTu4JBXFTjrubLlM5+\"\n  b += \"/rDJ/+8Q671/+knS7Xrsdc9Yuu7+pTZUlC+emhTcPsg/6LTTqrz0+HWfPGqu0eFVraVzGulUHh5\"\n  b += \"7as+Rw+nqLERNu2o/Z2jr0Fz7l5K9VqnZJqfC8zONfD7x4PDS2VL3ZZbv18Br6xjq2x8DFzYfUe\"\n  b += \"Dd6wMAg6/URKXfuBniV1t/f8XT38u+e5sStO2d5+0rSmBn545nvtwRfm52XsTFbY1ffuu56+/SH\"\n  b += \"t1qHbdg4wX1F2+O9BnslPD7RZqVP/0p3n1f9J2jZgfol7i9AbNkAsQ0tKbu15PXkXAf1bK3cuVJ\"\n  b += \"Th6Y1ruU+U/xZavWdeOsLv87rEdHl9vSM8UvmrJv0MLThvMo7UtolLFr/74nZt2emlU1zneIxq1\"\n  b += \"OLmDPvM3asurrj/qADfVs9K/tswMpx7WdfGOLwc9p6y0vsoPHl9qU0qn3wBxt/4/f7DB+2/pO0x\"\n  b += \"iL7R+OzHzMzdT/emtBl39MjSzJtTy6zqR3V4H7D9cnGbtnrtgy+MultfJ/e7dIijzRae6yufMvR\"\n  b += \"xAH7X6iuH+kya82F3kEnLEKdne1SrH+r27JmVZe8yAY9y5du6esXa63dbR0W73L8wNiUBobZy+7\"\n  b += \"tX949pMra6KndD6zoHXG08r3Zf9a2WHgxpVmZ3Oj0MK5i5srKVhEtqvcY3rXujj1bmv5i49Cq2/\"\n  b += \"pLvbxPLB70Ispl2JNxM41RQatG2I04lmwlOzrtXcG+1IcRPitfr3i77/mImCMvCqDkoO56a6ZpX\"\n  b += \"mPmpG9iknX4yPszu/xVe9edfWPObXX9ecT+1rHHZ4z5Z3zb3p4XS8XkxEy4dVx+6uyqUzU6O/78\"\n  b += \"/byqKec2e0T3X/rHLnZfmV9nnPXJGq//4a2cnxjkp1Xn2Pde/3JRmfVa14MVk6s37NF5ws1Ge3+\"\n  b += \"bdXvwztG9nu+Y5XCjbjP7vPAr+hZOKdUsbx/096swkLHWPvNfOKXN/TOz//xFm8YfetHO9vG5TR\"\n  b += \"6HZrd94TK/zfK53n9dbXnLscLxEX519mxQZBdAWXLEpGpMqtt0Jtr2oFP/x5Vqhw7vUCm74/1aG\"\n  b += \"5bUrFB+cdX2/j73frXe5xozzbJGQM1zJ2J2dDzQMNrh6dDtJ1XcAm/vSQ2N9VuuaNm4XYOrk2ae\"\n  b += \"br+sve2tguWz0zYvj2WuL3P8EKNb+D6qoXHQL+3WLTp0eOE/5Yd2mRZzu+byg3XbTZx0qc/AWzs\"\n  b += \"MJ8JbTuE1HcZZOJRnNr/41b7ntJsf5iyo+a7ypsqJnZ+lOLVX/FLwvOmD7Fp+TEbB2f6D/szdp7\"\n  b += \"ZW7ytfaureq4NbpkyevD7k8tE2txLauNc6lTvnxoIKG2uF9Kz+tMWEUeNKn33ScFvZjckTFx4eV\"\n  b += \"cqye4iqq3t/j1VHht2uk6GLyVu941KvRk+XD7qbI+udMctvUAJT74fohfprtf2H/lW9QrIlX/d1\"\n  b += \"tFPNXl413Vbudb39489te/w7N6HfyzpD9z6td+/DEsXkPj5OI/6+on1YhX3Q6PycMp4911zsPvx\"\n  b += \"JasrW/fwUhysjg3O/+8V3chXbwUm3qtas3YObOfJB5XOtZlV8Vd93xsYyz0v9Vqd57s05f0fu/e\"\n  b += \"vkskUNuq7amzvePsizsd3VjDGvT861dvmpa98yXRs6bXGe3Hz7H/tz7fMbdvA9nnO41n3v0/11B\"\n  b += \"R1HBl1b1bBt6VYNbP96eyNt8LWsBdsMq3Rplwo+3PvO9WjB8HKr11rYeuXkJozNd0taO/dNChc8\"\n  b += \"dauf25Vy2tKTlNrEVTefMbeGPjem73bKqvkqIfA3K9WWCyN2eRruxAXb11i0q2/y9ta/3Hm1f9K\"\n  b += \"IPybYrvg9pcLNJx/8n2YvXq3csOraor8X3illGfNyf7+Dt0tv46qEb9pe2nr6qV9+Cd3d96b3ti\"\n  b += \"W9+vU9PyWBz/cJmNVRERc09Z/X3aeVOup8+Ycxmi134mJ9Pc630H9Y2nVk+Sv/bK72cHR8+41/P\"\n  b += \"r115oZtYsil3t0cxlXb3/2at3JU/HStT72rhgu/9Fv+btb+KV1+Dm4x/qLu/sNSXD27aL6z6z63\"\n  b += \"q+tZ763fx3SISgnbZO/5dkv+8PTA39PLX3lqa1y3utPhi+2m9e2Z2a781NRRB9tvr5g6wPm4u2p\"\n  b += \"xQNmNcyLWa9nLmRarWi+qWyusknau9Ykzswty/Fts7ebces6maB+HK5FlPdWPesx283x8+tnYxx\"\n  b += \"fHN7HKe/RTp9UHUtJymgw/d9KvfjePzJYT83+6Uin/3S+N6655n15uWPfbzb2bF9yspQxpk+lsy\"\n  b += \"+eMGFf2pNe/7xWNXWc6Tjzv0/ufRcnfnTt+7UCFxRfrr+t4axS/p9OIBg42nSxzk3vLyo1S/hG2\"\n  b += \"SZvYv4a6Q+/GTzvZeV2JLnd33tv3HmEdDUMtrpzcFm5v651qZayQ8epxUJvfy6sr251ynDDr/fa\"\n  b += \"/T7TzCO7Rrc7713Wdaz1UHWjr/uZVz7duk14k/VX7/ONND3fPvdCww0mLme239S4bX+P8L5X7dd\"\n  b += \"TWXtf49wZHJt1rnht860i/18vWRV8b22PAoOkrmugsQra3MCRG2bw+Fj/CaNVGl5N05q0q5bhj7\"\n  b += \"Uyf36/EpM6otXmUw8XAPZNrjb5w5dLN8D2Oy+zWT9TNqpRfsfzijgX/Vl1zLSbOvbZ24dhTLwOd\"\n  b += \"X70+6tB87otF6480zq174Ib9kwO7m+5udHhXA87Gcv+GUcft4hdmzJ71uyHojeZg+2Z2efOmDXL\"\n  b += \"1mlgvwqL+ibITdfsHzaxU8d713Jy/sleXCzWMv/kisW/90DX9f++3tGe12Ni9igczZaevnYtQWa\"\n  b += \"9odHJOHd241fajfuDk9c53snQr3d7LY1WA/4GFI94YuwLs/GHK0AUzpw7N+f6YV31l45bX7VZe+\"\n  b += \"GHe6jpB0f6e/IHLG6dbu78aXG+2x+XyP1Svo/+3yZhm0636Jo9erjyT47PrbrW9DPNPjWmuvkez\"\n  b += \"xiud9099oXpdfvfezfvn5fcbbFnJb8jqASucIlXNX20/Pb6Vb+SYt69+urH5df3KPp4zO4PVO3X\"\n  b += \"JrVO/qtr3nlJwNFA1IP/0CcO/Pbo3YtbunHu68dPwgLYx89KTr0XOqpm2pcfpB8HTJ1XVtqk5Qf\"\n  b += \"73nqplG1k3WjVust2Vlxndlt0/W8vv+OKNb9fcauc0L0O/3nKWg4usxqAzcypNejzwWj7rc3nNX\"\n  b += \"1sMq7SV3buMH9tw8M29P0z84+7DvANbJi+Kjzi3Tfl+qf5e1fnldtX451qmc9WHlrVPHXptmHd9\"\n  b += \"ziyfhPjU2b2a7+i9ediYzroU26YvW81d+8PK4J63xiXNepebMFB3Z0X9C9Z+AaV7JTvbzWqyLbz\"\n  b += \"3it7ts0L0vh36junfdlzTNetWnJ3wroX/42cbL5RZNyd2SFjjxYvtqswu12bLvvqdK3Wra/3u5a\"\n  b += \"Lsxw+b39s7w39R503eVZ69WRocmN2mvvYGM/aPK7MOBO4NtK/T4NnkEzuPK703/L7OtuJctsG7h\"\n  b += \"GED2waHLbnRedLfg0Ls9r9qv9m3dLXdtwMnbzt442i5Su2mqFL3D9lxiJ1d5dHw7A+5Pas84K5a\"\n  b += \"1ug5oMqh7/98X3qWb7cmz7vMa7kypn/FtJ94mTrP05LZXHH7y6zV1Ze06zujj4V7fKV28aOf7l5\"\n  b += \"aIWeGJ1t+9/waHh86jz9b+9/F40Y1LF2h88WWO8JLzXEfV21e5Tr1olZ69x7w4JeQma6lXita3A\"\n  b += \"l6+e7y8x4R5bsbvPZnnTkzQKfo7NtB33268cHMC7IGiy3vzxrwY+RcrZcF/+TG7rPPGoWmV22/I\"\n  b += \"vTmgjeWAWVqVi7lXIlb4JP2Q+bqehPr9Q0uV9H35BOZz8uCkf9utmw5bN/tEalxfmtPTrlaoeHv\"\n  b += \"h34vX23HnxMjOYf6t7ssaRbxcGjPIG5KwFP7MYOWTEqPefd3rfJ5h7Nj2hl0g0v/xvTL7fNsVvy\"\n  b += \"t6mlTrd//3szfu02Ypuzlq/Ni5QFRV7SD/z3cI+B5/zpHVny45tMu3rJvrVXZTcLafQgf9frpRt\"\n  b += \"vFyujcyF/v1/cIPbdiQOby2i3q2fw5ct/3ZXtOuu2i7Rb0a26VSzu3Tf2g4Bd/6Lt8zQF2woq41\"\n  b += \"k/fjHre3vJ4vLH51MkBvVynhbt0rW1hVfbDxd3Xj03p1Cg+MXPLgL372069MFpe9siT0OUus442\"\n  b += \"Yn47FeAQtb/a1vwJu/71Ln1u5fL7+2b22dRm0cZ1YT/eObn1/dyGQbvndFTcO7rjydNX+iP+uw1\"\n  b += \"/Tz5QO61aWuVnZ1dujTlZudT79ZnenNNqj8vsNa8y5w2Nh5dyjyiV+3RjwMOyexblOPWbZL0qu3\"\n  b += \"GPWF0Fw4oa73+x0D6ICfzt0AzD6YX+a0LOP/61R0Dw+bE2g25NHVTm2ULeLeHe1nm3gq8U3Gry4\"\n  b += \"4d2zf44Ujt4fe33S5dqjbWshzWZnmNh7NFONqJJ6VXnjI9mb9o+ZkHTDT+t384fnBifunSy/M6g\"\n  b += \"h3sHrzl5eb98zrvwdc2ce/TdkX8zpsnBF2VcNrzyOl/j/hi3kc1+H7z3wu2k8uGVV01zH14rq1c\"\n  b += \"lw7L8rI2b4tfYDvk9omD0I5uVFxxLV07JT5l9ve7rUZMrua31X5K9ae4I5d5LXnFvLqW21VROrm\"\n  b += \"TtBaoacj9v6aH2zzcVhCqqBrQcHbY0PlPukPGg9Jw9CTv+fVxr4FGNn6dNrcFLx6n1p3zrDa9uO\"\n  b += \"2NcwahyXmuehpW1zuxUdz/nwPk1CnNXTn+2W/aqTs7SF4/SfXtnz/dawuSds9p7oZSM+b3NXzZd\"\n  b += \"bgUstT87pN+yCL+9Y/yrWlVLG/jDrZonzv/63a/b+p1Upzgqdi3b8iKROzB+cmzaxbFLEg5d/bt\"\n  b += \"8M6/xrVx+alSq5uAtexvMWyqfE/x6+brhu/xDg62OXPtXke9iHPGDy/h578sM2Xyy14G3Za4v63\"\n  b += \"E5fEPXx282rpFXHx/Q6G/nIZp6zXwXaSpVnz2kV0ZTpy4GbbPz5b7r+X3crKFNV1t3bdyxoXdfz\"\n  b += \"z6+XgM9G3by9WvI8FvewRtSSQnxkqZn+Iz3oB63g55xgIAvPfnCqpTGvo4v6jUY86NbiNUkn9rc\"\n  b += \"pDHTqpZePiz16k3vnFt27inBFdpH3rZj+PQ8mM+jD+QAu99Okb35x9bGit37qsO/V5dOustaNKr\"\n  b += \"Tu0Vv1c+djlbql3ZRFur3IOH+dnU5cPPLB/lSFbr+j/IKCg6dT8gfdPbJixXVQguiyh9usjZxr4\"\n  b += \"3fqSZ2dQY0GJZcP8DWs2uT2fP2M99ftxzs/xZcFR9OfFcw88rtgijtWfdznnOMWba58VqLoDu9L\"\n  b += \"59Lus+3reL8T2nFhx96hFSw2rQeFF/wsmN+QZfHzwt+a6xbcn+5l/s9y5G7G49v9GLtI11Gbnr1\"\n  b += \"6XZPLWQF7er8Yq14mPbSafBMVlvxsmNOJYXszlHdeKfysY0vRlXosn3G44aBNdIPGJ7Uq3f7VsH\"\n  b += \"Y5Pfl0qx+0uysnvLQ+J2i7+xyCfeXX52x7G6pdfNuhb7e6Tm29fKG1yL3l2nk1OL7MxUzc5sHdt\"\n  b += \"pX9rpVysPeO8esN85JG/oi38/B5UjFu0dcE4+t+bC0xvtNtdnBEzrdC9r3ZtvAF2MGDk/cbmX9e\"\n  b += \"tr4vfXL36rcYPj4Dbq/WE+XA8b7F9uuLZi+ZfjdgzP2rPj+jIviQLOM/T5WifedW1mWdCLObrkE\"\n  b += \"BnTyuhfvflv5990urU9/uFZnSqhPwcjKaxeFOvXY1j/Lqt++6lNSQ2rXT2R3ZdhuW/IGrKwHjiu\"\n  b += \"tW8Zca3xMr1+9o22HuVX1u2LnrvFtsz+uqXUDXrfqXNs/vbONQ64OLlfS9GAhjs1kVFmykt7x/1\"\n  b += \"w0eNX3/V3bjR+bOaFtzbkejVsETj3WyamlfTuucn69jbN/zxm9wbtXQrVjQ8b9kDf7guqK7YqBy\"\n  b += \"9ecGTV6zOx6mf9Uyn62r1f4pelWrmvOG69MVJ/4s9qe0/NDBixveHZi/u7HY+qX+dbpA4dcdzga\"\n  b += \"86pLu1YW5Sz7/W2xPCb/Rb1TSaMDsyKWPpCPVbxqkXVsQ0XPw/wDdSn/mUnlS5oeDGwyGNgMNiu\"\n  b += \"mh7+//+2AFevDav1d0H6i/Vv9tsqdw8M8vSZaJU86UPPwz9Nka041d9o7MH8N1+So9cGYASC9jf\"\n  b += \"Wm9UtrcIzN1QUJCdXmur7f6qDnn3pYzj+X21d54GYH5rfWrcbe1oxYYnev5er169c/39zbf8esJ\"\n  b += \"wU/dZw2usVlmxXNdixf2VHh0elG6k3/zmPPhVSdO2TjB99JC4OUj787GuNwdH2HGf8mj/T3L1X5\"\n  b += \"4M/8TGtlpUtboxKPnU8JvjQgK+VNwna97qwsqbGxyozKDH99AuhIDrvg5/Jga7vXaFewopomb9B\"\n  b += \"zq22VW/7Rr8UJ+0fToprXDW43ecu8ocdGLZD3Wdeq/dYlrxQu/lDNLL6TmunacRGzM3vAVH230/\"\n  b += \"fHRB0ZtC7jNzf51t/8qr/P29pBc2O7KrHUvrHyH/wvgfInxV0rUOmDC17wJ8I8Npy9t/X1m1+vN\"\n  b += \"j5VxfhLjf4Nu/7+8sr9nY2Mu677JlbcNzxvb/KrS/NvZoW0zr3ltiO/z/wWBZO62d9Q3Hv3qNYf\"\n  b += \"/dY9XLFx6b9nbQ9eONxoiPKYVUnTA5w5Gc2gxfZZYOqt9+e3jJ961j+y55OB6oAZb8ctuWBfpdq\"\n  b += \"o5SOXT5gx5+y2bQdliUmlVB7lf7AxOviCGXz719r1V7q+LjhTs/O+HyMm/LloYO+zNWU1l0d3fV\"\n  b += \"ZvRYbul9LdNvctcD50cqusxYwNYAaVN/v6JwyzZLLz/m5RYUoVdr6NvkPQs6B1Fg53xq4d1yO3N\"\n  b += \"PtwZpJtHU/vSoNfhLou2xu98rvtdZvcbPkhY3pozpHnWeeOu6QNHDTnuL9DcKgx52bGq7p+qeud\"\n  b += \"9ENGl2X4nCmgI0OvDYx/V1AQyMa9H890fTBqZtnm9wc4tqna90LcsXWZP90oOzS+OZPXLuZE77J\"\n  b += \"X+LbpR+QlTQ8GbBqoJ112WNY6v6Bgy/e78h/2r/Wy/F9VKvZcq7FcPaTbodW9VsQ12P1j2cyaA2\"\n  b += \"KPWL96v2Fv+cv/ljlcAPVctoa4MY+C7zJ2f1j8uSpqx5B2a9aV+pBe/njy5PKJG0e8t75Rts/MW\"\n  b += \"e3KLPFQ3ll/CKyUnr5nCkJ7VCpY4FvtO9XEh7HP91coNbFPzLjnVw42XHpi12L3Vl37PXl31bjP\"\n  b += \"Tnu+8i995llZlh9vvWN2gO7ITMdKf55sc2/BE+fsbSc2DVrR8/T67x/M+dfhYcj7LbaOz606X7z\"\n  b += \"dY2PYq22PRnvlhad79J97buF35+d1PZN1b22HXYurZk7+J/32H+VbumxOTJ505WmZsu67pidUbf\"\n  b += \"7+UYOBE2bt/JvJnHGlfq1nMzPK1Oxy4tmRNpkXFINH7e9Sz7HLgACH28nPOJbhs2bACfnWOBRs3\"\n  b += \"ZmwnpKyCe8FTwH9eeZWb+DpMT//vfPF6+EVjrifWFvxR1m+8Y1r2AG9Q/TQkN+aNx+qqVr755VV\"\n  b += \"lYAqmQXq2VGppIdIScmfknakpNRIf3+wbgten8kv+GnKy4KAl+qtE3dYzpvQ6v08p8V1B++qtTv\"\n  b += \"k+yrb2v7d/2zTgj96z7TKOmD5Z3TW6DEBx8ovPrRo0fhHqqe5naJGNNGNvx8eunjq/osW70/3XL\"\n  b += \"9+47m4zPqXMqsOLfc/1ppirngVVpui76jaFIVHSeDPUZuiaadJ8pZUbYrm+5TaFE1XErUpmudrq\"\n  b += \"k3RMqnaFIWp2hSFqdoUhcVqU/QdVZui8P+V2pRFD3O1KQpTtSkKi9Wm6LvPUZuiab9EbYrmpWpT\"\n  b += \"FKZqUxT+lNoUTfclalM0b0nVpmg+qjZF4U+pTdF0n6M2ldcTq03RPFRtisJfojbVtwi1KVreI8k\"\n  b += \"aeSyBqdpUP2JVDsuAFq8iBer/a5V1JrfXl+us07xUZ32AaKyghyKoiz1Y9A7aXfSLMoQj+xKoCy\"\n  b += \"HSFYd2EFBXPMCgDdLq4rWGb6goftsb64nnEi8lzGeof/f2+d+of4/2MVf/HiJZfyVZuwGivEOL3\"\n  b += \"mNxkQF4oGKhNtQ3HPMBvfGY/0n65S/MPBh5XQgY8IgIMP86PdRPIU2iebzJPqZwKTm27/oW6m5W\"\n  b += \"fb6uuhstj6q7Ubik6m40H1V3o/C3Vnej9VB1NwpTdTcKU3U3Cs+TtJOqu1GYqrtROEby/Vuru2l\"\n  b += \"EeyMQq7tdXwuo91N2tAVrJD3+L+putIwvUXejedf/HyvhOvmbK9lSOEwCUyVbClPFWQpTZdn/a3\"\n  b += \"WvZ/5fpu5F840TqKz/O/XDnX3N1Q+lKn70O1Xxo/A+CUxV/ChMVfwo/KUqfjQ/VfELElm1QR+FW\"\n  b += \"hEM1RRDRfAw8ssQ/4V0t4Z9BWMlgNoSGoaDt5pwZJbaWHRSKfpjC8qWLKHaCNyTxeu68DoRnGWq\"\n  b += \"27Q1udGk+foQSp/CK1ji04LAPwPYQQRnsBgzUvgY8bdCLdnHJeHfKfg3Cf0P/E5NEqw10dNY8r4\"\n  b += \"USTeF5J9Efkvh7/AkRb9TCTyVULmTST45+ZWRX1JNkjV5IPmTaH0kQRJthxV5T/ybxGsMOg30e7\"\n  b += \"JzAIcwPvbDIrxmsgZgHxd67XBjQrTpy70B2CdYnF5nKmUgh6zMtYCQsQPPcH1EaqIZNXiWI3Vc7\"\n  b += \"CukAYCtRGXitjBMm4G4DXg944XrR8ok9aDTYthA4pcuAZz8yHsWw4wm77BrNDWTCmBLuMbBbVIT\"\n  b += \"BI2ohw5NH4j9l/08EPvpCImI0sBjVR0NKB2jeuiegdi/G/0OcQlU8IfUWjZ4V0r0LRCQVVp4jMH\"\n  b += \"9KPn2rU7JaAkFKfhD+pbW/Mj8YQTAmVEGgMogreUU5OYsedHIOXkQtva/r8S+Ayn8QAIrLbBFMY\"\n  b += \"UtCFxSYSXNb0eslL/VmMdIxvx/O9YMkzMY97M1Ma6hsI8cW5B/a/Xlks4Lbd9wGZ6XknJfS6oGX\"\n  b += \"JIzEFCVv+8FVOVqhDyTGN03nUxMpzEZQzh00MIrOCTMKAyvg64iOPQ/uJ4IEZx/hejAxW34MICb\"\n  b += \"1OCuEaI1MJMCsIsSU5rhBh3YtOJEGwIwq8YN3K2zArBDMPiOv7cfDFcpNdkDMobPgy+ushzxzAj\"\n  b += \"/K6k+dUk7V1J+eUlXHOz0saG40+fBL389U9LpXPjikUzc6cjFz1+k3l94vNbg2RP/eBxRf2YrP8\"\n  b += \"N8u3PKsgUDfrp8uavlp6wOStrIkg7Ctx60b6+tn3H4fyMlSjoK6ylp+0raLtCfY7Cekrav5OOWd\"\n  b += \"Tzzi3R4tpyA+Urer9Q/YL6SrjeGz0H5Sj5fWSdhvpJLN7ecgvlKPp6pp0G+VPb/Q3HtGdSwby2v\"\n  b += \"LfkMpf6JGhZxxOO59cE6LaI//Prn+sx6o5fbdd/13rJDurNd05DGo3s/DXc820u7ax7z9+sJJx9\"\n  b += \"F/ytrf2tP6ZdtLo2byS655ttu7PKxN7RtVp3IOTLvg8/0Pme+iwufkpDr8zil294nbyLy06tVKv\"\n  b += \"mSyzqLGlbSqSnp1H/BHjqPGlbSqSnp1JccKWRdgORSpZJOTUmn/r/SYSEhgAQz9zzHuIWbRGPl/\"\n  b += \"gN7GrqIwhyfCF2QllJ1DDMXlA/d2DxUYYZCnIhZEk9+v7X7LKsI7D7rGAmV0SvK6KXvDD2PAgJc\"\n  b += \"1B4oMhkpgkdBJ+YkkIT4/RjIUCF2sYFRBkPUcG0whSPjjJrACNP7kSJ3VIklZEaJ80JSfKxIJDe\"\n  b += \"OtIl+H19CMUuy6MKWIunfBAk8UcTIkTL4sNSDzLeJeA7V6rUGDXKspIuJ01LRmVcnd3WgzhgbrQ\"\n  b += \"nSqrUjhmnioBPj7ZHY6fYLOWafU/itHDOvSWa9JlKrjtQkQOGL4JEQMTJ1UQa1Pg6Q9MjDrpC/i\"\n  b += \"QLnZ5DUMlynD8b9oqFSIFMpUhsbqwnFY03HYzJ0XQVSe8dCFqj5WEwhzCbqJnBaEWNSlIjmmJ5D\"\n  b += \"DDEofq1bXB7i5qoI1QgjGMsAuMwRI1hdR+3rx/t5BvTkfbtDSXsf/169vHpBF2N5enxHWUdEz96\"\n  b += \"gSDBIoAD4AL2eRxu08bqouFi4SLVaPeTqxIJFF2zKO4nklYnKe0qYoRR+z2In0CKxcBFSwwCwXy\"\n  b += \"Oj9GSVBOj0IVGgf2eiOORItgJh6FK4IvG4ROHKJA2FnYi7vSJUFVzwfjOXYIjzVRGVA/8ci5iDa\"\n  b += \"I1eFxSOQwYkReN+PiRBOygM5686UWOhe3EGDMZA9gxdQ6nEXZ94rcyWpJkjgeeSoDP+JhFrr7gI\"\n  b += \"7LdDvAbnQ+YhfEu8DYu/LZDs3TRUHo1i4BkV4m0cpjV4wV1jiIsGr/rBa+5ArSHKTxepDfaOMxI\"\n  b += \"nnZ00Rg159NJHxxn7RcVFBHtAiTePUZ3nCICdYz0MUeFavY8uWssHBxsAZuXjwZxA+QGEvfT+sV\"\n  b += \"rwsmOUXo8aQB7A3PGBqIOmFwBraY1iMAQcBsE+WkOkLjYWvOik1evAgEQZO0fF6YP7aIPiP3PVR\"\n  b += \"Wug9N4VoSQd3I6eBg6pc8D9WEeqcgJT4/3G0HSuRLRt+oR0OEKRvMQUsILZAtLXQOgG52vAUFUq\"\n  b += \"Ufk4P8BccXpYHk0bQoQXFDYSl5tR0RCPwrUeGxcUBJBVCEDt0N8+RIJCPA3QEpDCOEwHtneExhg\"\n  b += \"SZYj8XBk+LAyMyfexHOpnaSLqNtULKxKSF6pmMcgH9xdU3YrXGNRQBGue5XMbQkoAbbkDymxs5k\"\n  b += \"3u45oOTkas5lBStQUfkM9NVM9C0b6BwZ5+BH+LvwZNFBJppBTRWiMORDKYxe6cF0oCkWigz95Ij\"\n  b += \"REx3I0GOJqfippS2CEPqA/W1SWOQ/jUU4aFNR/z3FMoaAFc73EY5zkSJqVbUXHStBFGDVJ6KtRr\"\n  b += \"fVyka7AuIQDJD2B7TsfhM7AHGW8K9yIwS9wfQyHbPXD2c+CgTJ/AMh08bJmk+QCT3XipZE4sag3\"\n  b += \"PJTtCz2VZMowaFNChtJxJSgaYuWEjljkAqM25zUAXMqOeT6iFxnfs0w0pg/jIhk+gi5jHgFwvz9\"\n  b += \"YI2x/8uKX+8YI1V3Lftr8v9wZXjJXwUx223TyXUguvyfNbVrB1vWWs9ejlmXNW2YpDV7ac2lM5s\"\n  b += \"clqeZ0a93vJGP4RTJ1uzY52SRs08dw+w0+XL010rVDuiM8/4dH6bmdsL827oI/ZVmdLyJGNtZtX\"\n  b += \"qDbwnEebMn4FQRmx/icrPX2rfe60x//10eyk7Mf63NNPswNe+yqZIkcxJMLYOFiL9EMB8ghNcA0\"\n  b += \"2aEKj9EWSCsEukRqAZtqp3ZiWw/GejiN0b5GJdfo4pEYDhYckffxH0kdH4OQ07fCPlQ0a4hI0TB\"\n  b += \"sUrg2GSplOOLuzWB+LljPic8uJjQt0Is0WF0TLSSi2HKhUggWeYLX25PujeB+dvLp4+fmK+j6S5\"\n  b += \"KdwJlmbFH7LYK9DFH5H9i2FWaIqSGEYFE1cnkoC20jg0hK4jATuTugRCmtZ8/pjWHymCXPJmrd3\"\n  b += \"PGnfNc8qbeVnqtzJfH/yA9wfJ44sOlrpQ/TP2e/PI9g7e8++vK3DC169z0awzcVw/umsvvvK5t1\"\n  b += \"CcJu8xNSNNbKmN8h7hODxi/wbOQ3ufa5zXi6CdxxfvXHmhpglmrw8BP8x9Umt4Y6LH4zKUxQgzr\"\n  b += \"DviA6zvE5ump9ng+B+p3/9PqFcm3Fb8+wQ3KLv+57N53IH/shzQLB3WteWUQ/mp97Jq43go+7jv\"\n  b += \"vsjxfgXk98AwbkL9i84dWZCetX8pgi+vaFepTTrpk+b5bdB8Ixtzeq9D225zSe/E4Jbtz9y9tr5\"\n  b += \"Y8nh+T0QvOvUuSp1O/19OCXfD8Hzj3+3+/RP4XPS8wcjOHlV4A+1IzZc3ZUfjOBXVwJK9w/5ecW\"\n  b += \"F/AgE13l28J85b26+eJpvRPDOpIL1azfu2GH9YTSCp3YbHaEMCJz43YdkBPu6ZTYdWrDnePsP0x\"\n  b += \"DsX2fXrGkpveYP/DAXwXvHOEfXHv72mvHDYgTP3Hl75097r62e+WElguf+YJx0JmDdm3UfNiD4z\"\n  b += \"I9rZ86J7vT7oQ/bERxewXb/mxyrKdc+7EHwr40aaf2/23Lq7YdDCN6QOCrryM32C+0KTiLYonX9\"\n  b += \"ev+vtOuAjuq42m9mXt9daVeooMqKCLRqq7d9V/RqiizAohgQqKCVEEaISCuDg7FXDRdEjUMTYAG\"\n  b += \"i18QY8tvYEEJ1iIAYjCk2/RgHB4hbHINRZubt5hcY2+c//+oc7fvezNy5M2/mztw7d989pM+7YW\"\n  b += \"47Q/GHi6vKliclbRncdonikA+Yui/ffuWHSW03KL4dY1hcLN7c91LbFxSfeHV4hXRiX+Pytq8pT\"\n  b += \"vdGX3s2au/pt9oetDF9lnyHBSXXe2VrGxa/LQTUp+rXn7l1qy0YiKto2+HbM7cjKtdxb0tvfDfT\"\n  b += \"06smga4/DPNWhHB8VuvSA266/8crU97fZ7VaX1qQS/dYDDPZ//nWFvffzpbTADx4xeu8Iqpr8rA\"\n  b += \"3X6UB5LDGdf/QGcvaSf9YS1/NzDCbth9rdHs/3fUeXYsY5qJ3a8x88Wjdx3Su4NU//td9/x0/4d\"\n  b += \"CX1JmBYZ79LHZDetnTi3WgmOK/z5seU3wHXEgGUykeMuPuiuXrytf2BT6KG56bvXvWTOnLPPAix\"\n  b += \"TM6fvLCmhsjd88A9RQfPNw0fvGc8XMWg0aKe0xYcuxwruPYNvCG2t7mpd/n7U793VGwkuLr+c3L\"\n  b += \"33tz4KdXQQvFXRo9F+0Hm9Y/ANsozntz2brKFUe+jYS7KW59//ORufsv7bXAfRRf69P5y6ivHry\"\n  b += \"aDQ9RvH5m3odNrcYTJfAExZdzE2d9NS5yWQ08Q3GW0mnppbebrzXBSxQveet6Xu7p85v2wBsUd+\"\n  b += \"+/seX8i033T8EvKNb3b9mYnf38u7fh1xTHrOy95+78rXN59IDi9PoxG/R3O50yIpYaElIsiz6/2\"\n  b += \"aJv6oa0FK/Srlxzv0n/2SgUrqZ/3a3ovNG0bTqKo7jh5MbfTBza3z8XJVGc8ck21PtG4v71KJ3i\"\n  b += \"BW39J2auLJ1/ANkp7vPHxpWromxnLqDuFG+Ovb578cXo1d+g/hSfn3H5nWn7l9wOZbNBe6vGz6+\"\n  b += \"6pZVlVdVUnd/1khoWaHZAQw3izYHVI4i3PIa3Poa3PYa3P4Z3/MKqaEwLLsndjSaLsXt3o9OS0q\"\n  b += \"78zsfoaQLO5O2cQ4n3Z7GXhIEIOH8G84YENP4gjgqEhwzifo+lDwmk/5jXRLL04qWauvKb2vN3B\"\n  b += \"fxC+9o1K1jmKni0Tdcew8lQbWMQp8JH+Sx4DB+A6svZg/gcVF9cHsTXA+k/O0YCu/szfj0NyWME\"\n  b += \"P7MLGa9MwDuoorxkJY9YgoJlEgNlFLM5I61sWklOYc4vbGLKC2fi62D564GQVGbM9Is16kFtX2o\"\n  b += \"VoXqyevl0tY+i/4MZcle1GsZxXTtNpYVqteTV/hXVPuI4XER08qos6mCMeSJRGTCvPorVjPgOw9\"\n  b += \"yoUTU1tlZPtd117TSu9aQPevTo8eNGF5joLyWMlST0ckqBbKS/nMD3C9Jl9Sa5JmH+umO6xGo0K\"\n  b += \"kC/tFZ1i6qqVV2riGvKT+VZVqu6JRE6wTbvq1X78YkaXVF12dRibyUxMq9rZ+UhQQw2kjWGjAP8\"\n  b += \"OVWrttkasDgEsS2g8RtnyelyutE4y2g2y7PT8X/jbArw12yTbEpPkce37yciYyY8kSE8IIlKUKd\"\n  b += \"6MngDWpIyU1EUi2JVbIpdcShOxaW4FY9FsVgsVovNYrc4LE6Ly+K2eKyK1WK1Wm1Wu9VhdVpdVr\"\n  b += \"fVY1NsFpvVZrPZbQ6b0+ayuW0eu2K32K12m91ud9iddpfdbfc4FIfFYXXYHHaHw+F0uBxuh8epO\"\n  b += \"C1Oq9PmtDsdTqfT5XQ7PS7FZXFZXTaX3eVwOV0ul9vlcStui9vqtrntbofb6Xa53W6PB7PowdV7\"\n  b += \"MGkPLubBtx4dL1sC8nTbTz2fwJycXq/2x2FOtdwp/89PkN5+TC+DWGoqq70lhVOrSH8H08JEta4\"\n  b += \"gjhZV6+ZPnZZ4yydNJpaPjg3q2BgXkNuVxMpETEaVvsA0Ck44NYXE96Ek2sXFHNSgjutxDWq4LT\"\n  b += \"UniWqgUmhsUN33gulqeTWN1lRlLPSpsxcXooDZhvMS/g82BEJ5qeuHausPFKVkqqeTO1gwlZVXl\"\n  b += \"6uBhaoqqitxipoe4BHLr+IKbxU1FJUX+iZNppG2iC8XtXQ9klU7R0/X2MQ5aqChp+vUeTrebDZP\"\n  b += \"oL6NgZ7BEuYRaUSu8IQvm6O6M/rmqG0IzvMib2nZNOL8SrrGRC5SjDMme9XqifUFl22Zo7pa/mG\"\n  b += \"O6qa5Z47ad0EapE7ShkJiEKxU68XPt5uRmG2qiN2drK1Gkxr5L4VyFOTnFv4mmlrIK6qbZyT+5t\"\n  b += \"vR/tFYqZ5WRl2yp1eWTSOHTF71ZKE/LtclYDmJa4eJxdtJBTbiOJ5HAi+KkkGO00Rrw3X6EF0oq\"\n  b += \"0dhYR2kSBDFdYTRKEaIg/GgU6QRpaF0mKExAwVZoBVshJvhFnar+D28z/3APkRt0vaZL8ydt1YZ\"\n  b += \"8+zcxoVx8Z+EhA7Nvv/AnNkrb0L+29fq581ftHjz79959/CR4x98euNmG8MawlIsdldWtx6Dh0y\"\n  b += \"on48Td7/z7pEPWk/euMmwuhCamtVtwMDBQyYWe+sXNa063npSZ0gZMHhMsXfeos048+Hjl2/cvK\"\n  b += \"czDBhc7PXX/2Hf+/vPnrv3z7qGuS0b3t9/+GjryQsXBy17769HWk8Ozhk2ZuzE/NfmL/j9nr37/\"\n  b += \"3Tk6DlDZNT4vG//9bDNryv/9aeXQ0I7TauIi8+f/dKOne/u+z4yKqHTwKdyhj07Lm/iSy+/ffjM\"\n  b += \"2Uv3/vlNZdUCX/WSzPyu5syNO/fuP3ry3OUVvZcuUxZ0OvCn1racYePGC2KoPjnzzt1pFa4evfo\"\n  b += \"OWLjoYVtuafWx46dOf3z+s4dtjDG/c+1ltra/GMvyhpptIf6tDpPGfwVFi4DNZO2sgIDACwZ5eG\"\n  b += \"iYMEpAbJwsIREJCCKEtCyHNDwIieCykEHgOb0wRoBChG442w9lIMAa+FBtFhvfJd9Yzk7p4j/G1\"\n  b += \"e5CMXztD2isEKGJksK14dopvMzH8GOFNG6gnM5qWYAsmnQ2htcg/zaclNgrm81APrE7CkXdBbeY\"\n  b += \"xtW2GTqKmYYMZNQnhvob2dql0ZqIV9/gMrluAgzpKPnfyvBp/R/FaDl/G+e/rL2jQ/XzkEuqyQv\"\n  b += \"3/1H0/yXVjWTeLQ4UtbxPk4DGsWMlf13HODlSymb9r/NbW7RRrGUNW3Ohq6DlOP96Q025fqYplc\"\n  b += \"ep81j/+ygWheoYHgDcPIiHKZQ5DQxh9cAAw7gOhnAQAaNgtC6OixeTwBT0HNwHT8Mz2rPSR/Acv\"\n  b += \"ACucFfhLXjHeI/9Dv4b4oEKtMndeuYMW7B69Zu8IDl79Bz91anTbHhHp2v0mJe37Nj5nuNK2Cuv\"\n  b += \"zV/93+FHRl/OsGJv3p69sXGCKGvCo5yerE2bPz4vuRYu2iTI3XqWlC1YXJF/5+64ohVNyaZRq5r\"\n  b += \"XrGvZuGn7O/sO8RptRHxWrwEjNmw88ddmITqmc5eevQ4fYY2/6tLVZHNnDRqSPTx31GgyxgomeU\"\n  b += \"ueq5o5++XXW7bs3HXg1I6dL5yYVvHbiZ1ncQg/khIEMs3+2nhkCY1jk6QELo3rz4ak+rfwSWwSa\"\n  b += \"xLtGuBfWOOSImXRv8yDJomSEsklolgO9HazQ7lMVhYkobcxmdVKTpTFxQisVhg+2GXT2QSzKNd0\"\n  b += \"fSbHJKaOjguPknLYhNB+IdGCzA8Sk6VqTa8+qXw3TuZH8IDTI84/tyhhkCj7N0zsPEAj87oOHkF\"\n  b += \"2prN6/4HuxbnaQZI8cEDsIDE33lMjDJTj0VODXShElHmcq8YZ7d8LQq26uqaSao3/0Ov76jMXnK\"\n  b += \"59as3/1HqEVBYWdJUHyiauQ+2u8d6hrEcw9CaPeul3Yv1HqdLaf9V0siADK9Y0vsY+x+mQJOh/W\"\n  b += \"+D/Vq4Sp0UN9K8I146Rov2v1DyFGvqGRjQMT/OfzUAxLKyZnsWBBsZ/LiWblVlYZ+if3cN/sDsP\"\n  b += \"2FFcrB3WhKSzxdrRsn+HO16Xzkp4SPP+FXUfizqkQz7tWAFPGdaN+TeJnXNqRmojEOIEKVoQJKQ\"\n  b += \"TUvx/6SLX8z8pjgPf+fSF11gif9ionogMDZw8BnHwjdlB/EwgyNwT9YqislJ1N4d153l6upc4C9\"\n  b += \"S99xN+EFmhnn4+QYsqKy3zEeXQ/gTbfQU5CVRNv+33VUQHza0o9xIVgOoKNEAouaCHgeTXdr4Ke\"\n  b += \"vCQj5foR8sSfZVstOtYI7OIK2AmdGhmwqKaE7TGKwl3041pqUpzWsWGgnS46Up6wv0rGczDZsfq\"\n  b += \"tiuOH0ChE8hrnEm6QtfWkKvuzI6JHiWucOBXCWuG3JtSmDOsYk3Oqn2Jw7ynrw5jLiQOZ65cHaF\"\n  b += \"cLcz94tqakaduXR1pZMyj7oH9o5jpjMBkAAAg/gODNEqEHngFyEMI2F+BhNjxmixJAh1ZIGFJw6\"\n  b += \"WhGaHA6MLZWRGLSEHG618WKcyKOIMMYwCEHiyQWIjFMkiACGgI5nAGEA4jsbjKIjXh3AKSYQLoh\"\n  b += \"stqcUkTJu5BHJZlAtRQmoQdXCEkOA564P/WEQ8GARZg0kAEIwAUtGIRgJKGHwJjAfm4QgCuj9OA\"\n  b += \"JAmUsIDHLMFoyCI9q8OXPAgFuL9RPIqHCbA3BIIIoEYCGWgG7AyeRyyUAI8u4uZjTgVCD4q8DIF\"\n  b += \"i6MUqGHPAJGmhETcQIDegbKAsEcJlCOiAQKpD8EgW4Bjw50QGzQMFRoYvgwwLZCMcDhkirkE05M\"\n  b += \"BSGBOmA13FaI0ZKYB0WDLoh3sdQi1uVyawYboQcrjdqVAEd0inATyYSaRhTOUa+B3HINxK1oRYs\"\n  b += \"B7TZ+ByzS7gDHUjC6Y1ACVxQOwJtNAu4dkN8hHpQB40AyRG0N4EIBKECIj7s0iaEEV6kiePhnT8\"\n  b += \"bcwPj79j4SiR3JkCaGHgRfgxcowE4Df4OeAxABbiulhglE08fTo8RGbcyYyAuwE8EwkFQu03PCJ\"\n  b += \"Ucd8NIlUBzD9eIhnQix1BrnE7WU4UoZDAvoEYF2sVQQiI5EAopmKgFDg8QllGKBeYAv89ps+utQ\"\n  b += \"cZDSbzCZCmV1YUV0/CCiUUp+I9e3VhqReyz1RX+RjUDys/WpxODoC9xRlFL7AcPZOMt5gdNrNiN\"\n  b += \"P33bNJIlLgMxZlhcaVwkwid0Racg+SZ7PNNr8rKbOdKlTl16vPqvwxMfIp3ks+IlTW7y+osdLm9\"\n  b += \"NpfbaiuyYIWs0FVY6C62uJ1ej8XhUkpKvNYUfkbhVMwDr5gtHrOiJeesGUV4J17qnRZGnLBcdqP\"\n  b += \"J6prkKrQXK84UpnOoj4QB8eWXeGlo0CqQFqr6SnkzSqdWFGEF6j+s/G8k\"\n\n\n  var input = pako.inflate(base64ToUint8Array(b));\n  return init(input);\n}\n\n\n","\nexport const printError = (e) => {\n  console.log('Error Stack', e.stack)\n  console.log('Error Name', e.name)\n  console.log('Error Message', e.message)\n}\n\nexport const mostCommonString = (arr) => {\n  return arr.sort((a, b) =>\n    arr.filter(v => v === a).length -\n    arr.filter(v => v === b).length\n  ).pop()\n}\n","\nimport uint8arrayFromString from 'uint8arrays/from-string'\nimport uint8arrayToString from 'uint8arrays/to-string'\nimport naclUtil from 'tweetnacl-util'\n\nimport { mostCommonString } from '../lib/utils'\nimport { wasmBlsSdkHelpers } from '../lib/bls-sdk'\n\n/**\n * A LIT node client.  Connects directly to the LIT nodes to store and retrieve encryption keys.  Only holders of an NFT that corresponds with a LIT may store and retrieve the keys.\n * @param {Object} config\n * @param {boolean} [config.alertWhenUnauthorized=true] Whether or not to show a JS alert() when a user tries to unlock a LIT but is unauthorized.  If you turn this off, you should create an event listener for the \"lit-authFailure\" event on the document, and show your own error to the user.\n * @param {number} [config.minNodeCount=8] The minimum number of nodes that must be connected for the LitNodeClient to be ready to use.\n */\nexport default class LitNodeClient {\n  constructor (\n    config = {\n      alertWhenUnauthorized: true,\n      minNodeCount: 2,\n      bootstrapUrls: ['http://127.0.0.1:7470', 'http://127.0.0.1:7471', 'http://127.0.0.1:7472']\n    }\n  ) {\n    this.config = config\n    this.connectedNodes = new Set()\n    this.serverKeys = {}\n    this.ready = false\n    this.subnetPubKey = null\n    this.networkPubKey = null\n    this.networkPubKeySet = null\n\n    if (typeof window !== 'undefined' && window && window.localStorage) {\n      let configOverride = window.localStorage.getItem('LitNodeClientConfig')\n      if (configOverride) {\n        configOverride = JSON.parse(configOverride)\n      }\n      this.config = { ...config, ...configOverride }\n    }\n  }\n\n  /**\n   * Retrieve the symmetric encryption key from the LIT nodes.  Note that this will only work if the current user is a holder of the NFT that corresponds to this LIT.  This NFT token address and ID was specified when this LIT was created.\n   * @param {Object} params\n   * @param {string} params.tokenAddress The token address of the NFT that corresponds to this LIT.  This should be an ERC721 or ERC1155 token.\n   * @param {string} params.tokenId The token ID of the NFT that corresponds to this LIT\n  * @param {string} params.chain The chain that the corresponding NFT lives on.  Currently \"polygon\" and \"ethereum\" are supported.\n   * @param {AuthSig} params.authSig The authentication signature that proves that the user owns the crypto wallet address that should be an owner of the NFT that corresponds to this LIT.\n   * @returns {Object} The symmetric encryption key that can be used to decrypt the locked content inside the LIT.  You should pass this key to the decryptZip function.\n  */\n  async getEncryptionKey ({ accessControlConditions, toDecrypt, chain, authSig }) {\n    // ask each node to decrypt the content\n    const nodePromises = []\n    for (const url of this.connectedNodes) {\n      nodePromises.push(this.getDecryptionShare({ url, accessControlConditions, toDecrypt, authSig, chain }))\n    }\n    const decryptionShares = await Promise.all(nodePromises)\n    console.log('decryptionShares', decryptionShares)\n\n    // sort the decryption shares by share index.  this is important when combining the shares.\n    decryptionShares.sort((a, b) => a.shareIndex - b.shareIndex)\n\n    // combine the decryption shares\n\n    // set decryption shares bytes in wasm\n    decryptionShares.forEach((s, idx) => {\n      wasmExports.set_share_indexes(idx, s.shareIndex)\n      const shareAsBytes = uint8arrayFromString(s.decryptionShare, 'base16')\n      for (let i = 0; i < shareAsBytes.length; i++) {\n        wasmExports.set_decryption_shares_byte(i, idx, shareAsBytes[i])\n      }\n    })\n\n    // set the public key set bytes in wasm\n    const pkSetAsBytes = uint8arrayFromString(this.networkPubKeySet, 'base16')\n    wasmBlsSdkHelpers.set_mc_bytes(pkSetAsBytes)\n\n    // set the ciphertext bytes\n    const ciphertextAsBytes = uint8arrayFromString(toDecrypt, 'base16')\n    for (let i = 0; i < ciphertextAsBytes.length; i++) {\n      wasmExports.set_ct_byte(i, ciphertextAsBytes[i])\n    }\n\n    const decrypted = wasmBlsSdkHelpers.combine_decryption_shares(decryptionShares.length, pkSetAsBytes.length, ciphertextAsBytes.length)\n    // console.log('decrypted is ', uint8arrayToString(decrypted, 'base16'))\n\n    return decrypted\n  }\n\n  /**\n  * Securely save the symmetric encryption key to the LIT nodes.\n  * @param {Object} params\n  * @param {Array} params.accessControlConditions The access control conditions under which this key will be able to be decrypted\n  * @param {string} params.chain The chain that the corresponding NFT lives on.  Currently \"polygon\" and \"ethereum\" are supported.\n  * @param {AuthSig} params.authSig The authentication signature that proves that the user owns the crypto wallet address that should be an owner of the NFT that corresponds to this LIT.\n  * @param {string} params.symmetricKey The symmetric encryption key that was used to encrypt the locked content inside the LIT.  You should use zipAndEncryptString or zipAndEncryptFiles to get this encryption key.  This key will be split up using threshold encryption so that the LIT nodes cannot decrypt a given LIT.\n  * @returns {Object} An object that gives the status of the operation, denoted via a boolean with the key \"success\"\n  */\n  async saveEncryptionKey ({ accessControlConditions, chain, authSig, symmetricKey }) {\n    console.log('saveEncryptionKey')\n    /* accessControlConditions looks like this:\n    accessControlConditions: [\n        {\n          contractAddress: tokenAddress,\n          method: 'balanceOf',\n          parameters: [\n            ':userAddress',\n            tokenId\n          ],\n          returnValueTest: {\n            comparator: '>',\n            value: 0\n          }\n        }\n      ]\n    */\n    // encrypt with network pubkey\n    const encryptedKey = wasmBlsSdkHelpers.encrypt(uint8arrayFromString(this.subnetPubKey, 'base16'), symmetricKey)\n    console.log('symmetric key encrypted with LIT network key: ', uint8arrayToString(encryptedKey, 'base16'))\n    // hash the encrypted pubkey\n    const hashOfKey = await crypto.subtle.digest('SHA-256', encryptedKey)\n    const hashOfKeyStr = uint8arrayToString(new Uint8Array(hashOfKey), 'base16')\n    window.hashOfKey = hashOfKey\n    window.uint8arrayToString = uint8arrayToString\n    console.log('hashOfKey', hashOfKey)\n    console.log('hashOfKeyStr', hashOfKeyStr)\n    // hash the access control conditions\n    const conditions = JSON.stringify(accessControlConditions)\n    const encoder = new TextEncoder()\n    const data = encoder.encode(conditions)\n    const hashOfConditions = await crypto.subtle.digest('SHA-256', data)\n    const hashOfConditionsStr = uint8arrayToString(new Uint8Array(hashOfConditions), 'base16')\n    // create access control conditions on lit nodes\n    const nodePromises = []\n    for (const url of this.connectedNodes) {\n      nodePromises.push(this.storeEncryptionConditionWithNode({ url, key: hashOfKeyStr, val: hashOfConditionsStr, authSig, chain }))\n    }\n    await Promise.all(nodePromises)\n\n    return encryptedKey\n  }\n\n  async storeEncryptionConditionWithNode ({ url, key, val, authSig, chain }) {\n    console.log('storeEncryptionConditionWithNode')\n    const urlWithPath = `${url}/web/encryption/store`\n    const data = {\n      key,\n      val,\n      authSig,\n      chain\n    }\n    return await this.sendCommandToNode({ url: urlWithPath, data })\n  }\n\n  async getDecryptionShare ({ url, accessControlConditions, toDecrypt, authSig, chain }) {\n    console.log('getDecryptionShare')\n    const urlWithPath = `${url}/web/encryption/retrieve`\n    const data = {\n      accessControlConditions,\n      toDecrypt,\n      authSig,\n      chain\n    }\n    return await this.sendCommandToNode({ url: urlWithPath, data })\n  }\n\n  async handshakeWithSgx ({ url }) {\n    const urlWithPath = `${url}/web/handshake`\n    console.debug(`handshakeWithSgx ${urlWithPath}`)\n    const data = {\n      clientPublicKey: 'test'\n    }\n    return await this.sendCommandToNode({ url: urlWithPath, data })\n  }\n\n  async sendCommandToNode ({ url, data }) {\n    console.log(`sendCommandToNode with url ${url} and data`, data)\n    return await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    })\n      .then(response => response.json())\n      .then(data => {\n        console.log('Success:', data)\n        return data\n      })\n  }\n\n  async connect () {\n    // handshake with each node\n    for (const url of this.config.bootstrapUrls) {\n      this.handshakeWithSgx({ url })\n        .then(resp => {\n          this.connectedNodes.add(url)\n          this.serverKeys[url] = {\n            serverPubKey: resp.serverPublicKey,\n            subnetPubKey: resp.subnetPublicKey,\n            networkPubKey: resp.networkPublicKey,\n            networkPubKeySet: resp.networkPublicKeySet\n          }\n        })\n    }\n\n    const interval = window.setInterval(() => {\n      if (Object.keys(this.serverKeys).length >= this.config.minNodeCount) {\n        clearInterval(interval)\n        // pick the most common public keys for the subnet and network from the bunch, in case some evil node returned a bad key\n        this.subnetPubKey = mostCommonString(Object.values(this.serverKeys).map(keysFromSingleNode => keysFromSingleNode.subnetPubKey))\n        this.networkPubKey = mostCommonString(Object.values(this.serverKeys).map(keysFromSingleNode => keysFromSingleNode.networkPubKey))\n        this.networkPubKeySet = mostCommonString(Object.values(this.serverKeys).map(keysFromSingleNode => keysFromSingleNode.networkPubKeySet))\n        this.ready = true\n        console.debug('lit is ready')\n        document.dispatchEvent(new Event('lit-ready'))\n      }\n    }, 500)\n\n    window.wasmBlsSdkHelpers = wasmBlsSdkHelpers // for debug\n  }\n}\n","import 'regenerator-runtime/runtime'\n\nimport {\n  zipAndEncryptString,\n  zipAndEncryptFiles,\n  encryptZip,\n  decryptZip,\n  createHtmlLIT,\n  toggleLock,\n  unlockLitWithKey\n} from './utils/lit'\n\nimport {\n  connectWeb3,\n  mintLIT,\n  checkAndSignAuthMessage,\n  findLITs,\n  sendLIT\n} from './utils/eth'\n\nimport {\n  decryptWithPrivKey,\n  encryptWithPubKey\n} from './utils/crypto'\n\nimport {\n  fileToDataUrl,\n  injectViewerIFrame\n} from './utils/browser'\n\nimport { LIT_CHAINS } from './lib/constants'\nimport { printError } from './lib/utils'\nimport { initWasmBlsSdk } from './lib/bls-sdk.js'\n\nimport LitNodeClient from './utils/litNodeClient'\n\nimport { litJsSdkLoadedInALIT } from './utils/init'\n\nimport {\n  listenForChildFrameMessages,\n  listenForFrameParentMessages,\n  inIframe\n} from './utils/frameComms'\n\nif (typeof window !== 'undefined') {\n  // only run this in browser\n  if (inIframe()) {\n    listenForFrameParentMessages()\n  } else {\n    listenForChildFrameMessages()\n  }\n}\n\ninitWasmBlsSdk().then((exports) => {\n  window.wasmExports = exports\n})\n\nconst functions = {\n  zipAndEncryptString,\n  zipAndEncryptFiles,\n  encryptZip,\n  decryptZip,\n  connectWeb3,\n  checkAndSignAuthMessage,\n  createHtmlLIT,\n  mintLIT,\n  toggleLock,\n  LIT_CHAINS,\n  LitNodeClient,\n  encryptWithPubKey,\n  decryptWithPrivKey,\n  fileToDataUrl,\n  findLITs,\n  sendLIT,\n  litJsSdkLoadedInALIT,\n  unlockLitWithKey,\n  injectViewerIFrame,\n  printError\n}\n\nexport default functions\n","import { sendMessageToFrameParent } from './frameComms'\nimport LitNodeClient from './litNodeClient'\n\nexport const litJsSdkLoadedInALIT = () => {\n  sendMessageToFrameParent({ command: 'LIT_SYN' }, '*')\n  setTimeout(function () {\n    if (!window.useLitPostMessageProxy) {\n      console.log('inside lit - no parent frame lit node connection.  connecting ourselves.')\n      // we're on our own with no parent frame.  initiate our own connection to lit nodes\n      const litNodeClient = new LitNodeClient()\n      litNodeClient.connect()\n      window.litNodeClient = litNodeClient\n    } else {\n      console.log('inside lit - parent frame is connected to lit nodes.  using that.')\n    }\n  }, 1000)\n}\n"],"names":["runtime","exports","undefined","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","key","value","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","generator","create","Generator","context","Context","_invoke","state","GenStateSuspendedStart","method","arg","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","done","GenStateSuspendedYield","makeInvokeMethod","fn","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","invoke","resolve","reject","result","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","toString","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function","SYMM_KEY_ALGO_PARAMS","LIT_CHAINS","polygon","contractAddress","chainId","symbol","decimals","rpcUrls","blockExplorerUrls","websocketUrl","fantom","xdai","ethereum","kovan","body","recover","e","signAndSaveAuthMessage","now","Date","toISOString","AUTH_SIGNATURE_BODY","replace","connectWeb3","web3","account","console","log","request","params","signature","address","verifyMessage","toLowerCase","msg","alert","signMessage","signedResult","localStorage","setItem","JSON","stringify","sig","derivedVia","signedMessage","commsKeyPair","nacl","box","keyPair","publicKey","naclUtil","encodeBase64","secretKey","checkAndSignAuthMessage","chain","authSig","parse","getItem","selectedChain","selectedChainId","debug","chainName","nativeCurrency","res","errorCode","window","message","detectEthereumProvider","provider","accounts","sendMessageToFrameParent","data","parent","postMessage","fileToDataUrl","file","reader","FileReader","onloadend","readAsDataURL","pact","s","o","_settle","bind","v","observer","wasm","unlockLitWithKey","symmetricKey","mediaGridHolder","document","getElementById","lockedHeader","fetch","encryptedZipDataUrl","_fetch","blob","encryptedZipBlob","decryptZip","decryptedFiles","mediaGridHtmlBody","innerHTML","innerText","locked","_Pact","onFulfilled","onRejected","callback","_this","encryptZip","zip","generateAsync","zipBlob","arrayBuffer","zipBlobArrayBuffer","crypto","subtle","generateKey","generateSymmetricKey","symmKey","iv","getRandomValues","Uint8Array","encrypt","encryptedZipData","Blob","encryptWithSymmetricKey","exportKey","exportedSymmKey","uint8arrayToString","encryptedZip","importKey","importSymmetricKey","importedSymmKey","encryptedBlob","recoveredIv","encryptedZipArrayBuffer","decrypt","decryptWithSymmetricKey","decryptedZipArrayBuffer","JSZip","loadAsync","unzipped","files","PACKAGE_CACHE","mostCommonString","arr","sort","a","b","filter","init","input","imports","wbg","__wbindgen_throw","arg0","arg1","ptr","len","cachedTextDecoder","decode","cachegetUint8Memory0","buffer","memory","subarray","load","instance","__wbindgen_wasm_module","module","Response","bytes","WebAssembly","instantiate","instantiateStreaming","headers","get","warn","Instance","commitment_sizes_by_threshold","poly_sizes_by_threshold","wasmBlsSdkHelpers","sk_bytes_to_pk_bytes","pkBytes","wasmExports","set_sk_byte","derive_pk_from_sk","pkByte","get_pk_byte","sign_msg","m","sigBytes","set_msg_byte","sigByte","get_sig_byte","verify","p","verified","set_pk_byte","set_sig_byte","set_rng_values","RNG_VALUES_SIZE","get_rng_values_size","rngValues","Uint32Array","set_rng_value","ctBytes","ctSize","ctByte","get_ct_byte","from","c","msgBytes","set_ct_byte","msgSize","msgByte","get_msg_byte","generate_poly","threshold","polySize","polyBytes","polyByte","get_poly_byte","get_msk_bytes","mskBytes","mskByte","get_msk_byte","get_mpk_bytes","mpkBytes","mpkByte","get_mpk_byte","get_mc_bytes","mcBytes","mcSize","mcByte","get_mc_byte","set_mc_bytes","set_mc_byte","get_skshare","skshareBytes","skshareByte","get_skshare_byte","get_pkshare","pkshareBytes","pkshareByte","get_pkshare_byte","combine_signatures","sigshares","shareIndex","share","h","shareHex","match","map","byte","parseInt","sigIndex","byteIndex","set_signature_share_byte","set_share_indexes","combine_signature_shares","create_decryption_share","uiShareIndex","derivedShareIndex","ct","dshareBytes","dshareByte","get_decryption_shares_byte","combine_decryption_shares","totalShares","TextDecoder","ignoreBOM","fatal","LitNodeClient","config","alertWhenUnauthorized","minNodeCount","bootstrapUrls","connectedNodes","Set","serverKeys","ready","subnetPubKey","networkPubKey","networkPubKeySet","configOverride","getEncryptionKey","accessControlConditions","toDecrypt","nodePromises","_this2","getDecryptionShare","url","all","decryptionShares","idx","shareAsBytes","uint8arrayFromString","decryptionShare","set_decryption_shares_byte","pkSetAsBytes","ciphertextAsBytes","saveEncryptionKey","encryptedKey","_this4","digest","hashOfKey","hashOfKeyStr","conditions","TextEncoder","encode","hashOfConditions","hashOfConditionsStr","storeEncryptionConditionWithNode","val","sendCommandToNode","handshakeWithSgx","urlWithPath","clientPublicKey","Content-Type","response","json","connect","_this12","_this11","resp","add","serverPubKey","serverPublicKey","subnetPublicKey","networkPublicKey","networkPublicKeySet","interval","setInterval","clearInterval","keysFromSingleNode","dispatchEvent","Event","top","inIframe","origin","addEventListener","event","messageIsFromFrameParent","source","respondingToCommand","useLitPostMessageProxy","encryptionKey","listenForFrameParentMessages","childFrameThatSentMessageIndex","frames","command","target","litNodeClient","listenForChildFrameMessages","pako","inflate","atob","split","charCodeAt","initWasmBlsSdk","functions","zipAndEncryptString","string","zipAndEncryptFiles","folder","createHtmlLIT","array","title","htmlBody","css","encryptedSymmetricKey","npmPackages","scriptTags","packageName","ok","statusText","dataUrl","getNpmPackage","scriptDataUrl","_cycle","thenable","mintLIT","quantity","tokenAddress","contract","Contract","LIT","Web3Provider","getSigner","mint","tx","wait","txReceipt","tokenId","events","args","toNumber","txHash","transactionHash","mintingAddress","code","toggleLock","publicContent","encryptWithPubKey","receiverPublicKey","version","pubKeyUInt8Array","ephemeralKeyPair","decodeBase64","msgParamsUInt8Array","decodeUTF8","nonce","randomBytes","nonceLength","encryptedMessage","ephemPublicKey","ciphertext","decryptWithPrivKey","encryptedData","receiverPrivateKey","output","recieverEncryptionPrivateKey","decryptedMessage","open","encodeUTF8","findLITs","chainHexId","chainHexIdToChainName","tokenIds","maxTokenId","balanceOfBatch","balances","sendLIT","tokenMetadata","to","safeTransferFrom","success","litJsSdkLoadedInALIT","setTimeout","injectViewerIFrame","destinationId","fileUrl","className","includes","URL","host","location","iframe","createElement","src","sandbox","loading","allow","appendChild","printError","stack"],"mappings":"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"}